
GPIO_7segment_sw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f9c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002134  08002134  00003134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800214c  0800214c  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800214c  0800214c  0000314c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002154  08002154  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002154  08002154  00003154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002158  08002158  00003158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800215c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  08002168  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08002168  00004074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000070dd  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000130c  00000000  00000000  0000b119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000638  00000000  00000000  0000c428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004c1  00000000  00000000  0000ca60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014947  00000000  00000000  0000cf21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006e9b  00000000  00000000  00021868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008209d  00000000  00000000  00028703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000aa7a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001874  00000000  00000000  000aa7e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000ac058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800211c 	.word	0x0800211c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	0800211c 	.word	0x0800211c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000508:	f000 fb4e 	bl	8000ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050c:	f000 f822 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000510:	f000 f8b4 	bl	800067c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000514:	f000 f888 	bl	8000628 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(GPIOB, SW1_Pin)==GPIO_PIN_SET)
 8000518:	2101      	movs	r1, #1
 800051a:	480c      	ldr	r0, [pc, #48]	@ (800054c <main+0x48>)
 800051c:	f000 fe44 	bl	80011a8 <HAL_GPIO_ReadPin>
 8000520:	4603      	mov	r3, r0
 8000522:	2b01      	cmp	r3, #1
 8000524:	d102      	bne.n	800052c <main+0x28>
		  ZeroToNine();
 8000526:	f000 f939 	bl	800079c <ZeroToNine>
 800052a:	e7f5      	b.n	8000518 <main+0x14>
	  else if(HAL_GPIO_ReadPin(GPIOB, SW2_Pin)==GPIO_PIN_SET)
 800052c:	2102      	movs	r1, #2
 800052e:	4807      	ldr	r0, [pc, #28]	@ (800054c <main+0x48>)
 8000530:	f000 fe3a 	bl	80011a8 <HAL_GPIO_ReadPin>
 8000534:	4603      	mov	r3, r0
 8000536:	2b01      	cmp	r3, #1
 8000538:	d102      	bne.n	8000540 <main+0x3c>
		  NineToZero();
 800053a:	f000 f9c1 	bl	80008c0 <NineToZero>
 800053e:	e7eb      	b.n	8000518 <main+0x14>
	  else
		  HAL_GPIO_WritePin(GPIOC, A_Pin | B_Pin | C_Pin | D_Pin | E_Pin | F_Pin | G_Pin | DOT_Pin, GPIO_PIN_RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	21ff      	movs	r1, #255	@ 0xff
 8000544:	4802      	ldr	r0, [pc, #8]	@ (8000550 <main+0x4c>)
 8000546:	f000 fe47 	bl	80011d8 <HAL_GPIO_WritePin>
	  if(HAL_GPIO_ReadPin(GPIOB, SW1_Pin)==GPIO_PIN_SET)
 800054a:	e7e5      	b.n	8000518 <main+0x14>
 800054c:	40020400 	.word	0x40020400
 8000550:	40020800 	.word	0x40020800

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b094      	sub	sp, #80	@ 0x50
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 0320 	add.w	r3, r7, #32
 800055e:	2230      	movs	r2, #48	@ 0x30
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f001 fdae 	bl	80020c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	f107 030c 	add.w	r3, r7, #12
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000578:	2300      	movs	r3, #0
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	4b28      	ldr	r3, [pc, #160]	@ (8000620 <SystemClock_Config+0xcc>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000580:	4a27      	ldr	r2, [pc, #156]	@ (8000620 <SystemClock_Config+0xcc>)
 8000582:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000586:	6413      	str	r3, [r2, #64]	@ 0x40
 8000588:	4b25      	ldr	r3, [pc, #148]	@ (8000620 <SystemClock_Config+0xcc>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800058c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000594:	2300      	movs	r3, #0
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	4b22      	ldr	r3, [pc, #136]	@ (8000624 <SystemClock_Config+0xd0>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a21      	ldr	r2, [pc, #132]	@ (8000624 <SystemClock_Config+0xd0>)
 800059e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005a2:	6013      	str	r3, [r2, #0]
 80005a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000624 <SystemClock_Config+0xd0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b0:	2302      	movs	r3, #2
 80005b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b4:	2301      	movs	r3, #1
 80005b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b8:	2310      	movs	r3, #16
 80005ba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005bc:	2302      	movs	r3, #2
 80005be:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c0:	2300      	movs	r3, #0
 80005c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005c4:	2310      	movs	r3, #16
 80005c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005c8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005ce:	2304      	movs	r3, #4
 80005d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005d2:	2304      	movs	r3, #4
 80005d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d6:	f107 0320 	add.w	r3, r7, #32
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 fe16 	bl	800120c <HAL_RCC_OscConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005e6:	f000 f9fd 	bl	80009e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ea:	230f      	movs	r3, #15
 80005ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ee:	2302      	movs	r3, #2
 80005f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2102      	movs	r1, #2
 8000606:	4618      	mov	r0, r3
 8000608:	f001 f878 	bl	80016fc <HAL_RCC_ClockConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000612:	f000 f9e7 	bl	80009e4 <Error_Handler>
  }
}
 8000616:	bf00      	nop
 8000618:	3750      	adds	r7, #80	@ 0x50
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40023800 	.word	0x40023800
 8000624:	40007000 	.word	0x40007000

08000628 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800062c:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <MX_USART2_UART_Init+0x4c>)
 800062e:	4a12      	ldr	r2, [pc, #72]	@ (8000678 <MX_USART2_UART_Init+0x50>)
 8000630:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000632:	4b10      	ldr	r3, [pc, #64]	@ (8000674 <MX_USART2_UART_Init+0x4c>)
 8000634:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000638:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800063a:	4b0e      	ldr	r3, [pc, #56]	@ (8000674 <MX_USART2_UART_Init+0x4c>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000640:	4b0c      	ldr	r3, [pc, #48]	@ (8000674 <MX_USART2_UART_Init+0x4c>)
 8000642:	2200      	movs	r2, #0
 8000644:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000646:	4b0b      	ldr	r3, [pc, #44]	@ (8000674 <MX_USART2_UART_Init+0x4c>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800064c:	4b09      	ldr	r3, [pc, #36]	@ (8000674 <MX_USART2_UART_Init+0x4c>)
 800064e:	220c      	movs	r2, #12
 8000650:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000652:	4b08      	ldr	r3, [pc, #32]	@ (8000674 <MX_USART2_UART_Init+0x4c>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000658:	4b06      	ldr	r3, [pc, #24]	@ (8000674 <MX_USART2_UART_Init+0x4c>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800065e:	4805      	ldr	r0, [pc, #20]	@ (8000674 <MX_USART2_UART_Init+0x4c>)
 8000660:	f001 fa6c 	bl	8001b3c <HAL_UART_Init>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800066a:	f000 f9bb 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000028 	.word	0x20000028
 8000678:	40004400 	.word	0x40004400

0800067c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08a      	sub	sp, #40	@ 0x28
 8000680:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	613b      	str	r3, [r7, #16]
 8000696:	4b3d      	ldr	r3, [pc, #244]	@ (800078c <MX_GPIO_Init+0x110>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069a:	4a3c      	ldr	r2, [pc, #240]	@ (800078c <MX_GPIO_Init+0x110>)
 800069c:	f043 0304 	orr.w	r3, r3, #4
 80006a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a2:	4b3a      	ldr	r3, [pc, #232]	@ (800078c <MX_GPIO_Init+0x110>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	f003 0304 	and.w	r3, r3, #4
 80006aa:	613b      	str	r3, [r7, #16]
 80006ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	60fb      	str	r3, [r7, #12]
 80006b2:	4b36      	ldr	r3, [pc, #216]	@ (800078c <MX_GPIO_Init+0x110>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b6:	4a35      	ldr	r2, [pc, #212]	@ (800078c <MX_GPIO_Init+0x110>)
 80006b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006be:	4b33      	ldr	r3, [pc, #204]	@ (800078c <MX_GPIO_Init+0x110>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	4b2f      	ldr	r3, [pc, #188]	@ (800078c <MX_GPIO_Init+0x110>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	4a2e      	ldr	r2, [pc, #184]	@ (800078c <MX_GPIO_Init+0x110>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006da:	4b2c      	ldr	r3, [pc, #176]	@ (800078c <MX_GPIO_Init+0x110>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	4b28      	ldr	r3, [pc, #160]	@ (800078c <MX_GPIO_Init+0x110>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	4a27      	ldr	r2, [pc, #156]	@ (800078c <MX_GPIO_Init+0x110>)
 80006f0:	f043 0302 	orr.w	r3, r3, #2
 80006f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f6:	4b25      	ldr	r3, [pc, #148]	@ (800078c <MX_GPIO_Init+0x110>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	f003 0302 	and.w	r3, r3, #2
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, A_Pin|B_Pin|C_Pin|D_Pin
 8000702:	2200      	movs	r2, #0
 8000704:	21ff      	movs	r1, #255	@ 0xff
 8000706:	4822      	ldr	r0, [pc, #136]	@ (8000790 <MX_GPIO_Init+0x114>)
 8000708:	f000 fd66 	bl	80011d8 <HAL_GPIO_WritePin>
                          |E_Pin|F_Pin|G_Pin|DOT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800070c:	2200      	movs	r2, #0
 800070e:	2120      	movs	r1, #32
 8000710:	4820      	ldr	r0, [pc, #128]	@ (8000794 <MX_GPIO_Init+0x118>)
 8000712:	f000 fd61 	bl	80011d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000716:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800071a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800071c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000720:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	4619      	mov	r1, r3
 800072c:	4818      	ldr	r0, [pc, #96]	@ (8000790 <MX_GPIO_Init+0x114>)
 800072e:	f000 fbb7 	bl	8000ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : A_Pin B_Pin C_Pin D_Pin
                           E_Pin F_Pin G_Pin DOT_Pin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|C_Pin|D_Pin
 8000732:	23ff      	movs	r3, #255	@ 0xff
 8000734:	617b      	str	r3, [r7, #20]
                          |E_Pin|F_Pin|G_Pin|DOT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000736:	2301      	movs	r3, #1
 8000738:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073e:	2300      	movs	r3, #0
 8000740:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000742:	f107 0314 	add.w	r3, r7, #20
 8000746:	4619      	mov	r1, r3
 8000748:	4811      	ldr	r0, [pc, #68]	@ (8000790 <MX_GPIO_Init+0x114>)
 800074a:	f000 fba9 	bl	8000ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800074e:	2320      	movs	r3, #32
 8000750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000752:	2301      	movs	r3, #1
 8000754:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075a:	2300      	movs	r3, #0
 800075c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800075e:	f107 0314 	add.w	r3, r7, #20
 8000762:	4619      	mov	r1, r3
 8000764:	480b      	ldr	r0, [pc, #44]	@ (8000794 <MX_GPIO_Init+0x118>)
 8000766:	f000 fb9b 	bl	8000ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 800076a:	2303      	movs	r3, #3
 800076c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800076e:	2300      	movs	r3, #0
 8000770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	4619      	mov	r1, r3
 800077c:	4806      	ldr	r0, [pc, #24]	@ (8000798 <MX_GPIO_Init+0x11c>)
 800077e:	f000 fb8f 	bl	8000ea0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000782:	bf00      	nop
 8000784:	3728      	adds	r7, #40	@ 0x28
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800
 8000790:	40020800 	.word	0x40020800
 8000794:	40020000 	.word	0x40020000
 8000798:	40020400 	.word	0x40020400

0800079c <ZeroToNine>:

/* USER CODE BEGIN 4 */
void ZeroToNine(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	  //0 Display
	  HAL_GPIO_WritePin(GPIOC, A_Pin | B_Pin | C_Pin | D_Pin | E_Pin | F_Pin | G_Pin | DOT_Pin, GPIO_PIN_RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	21ff      	movs	r1, #255	@ 0xff
 80007a4:	4845      	ldr	r0, [pc, #276]	@ (80008bc <ZeroToNine+0x120>)
 80007a6:	f000 fd17 	bl	80011d8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, A_Pin | B_Pin | C_Pin | D_Pin | E_Pin | F_Pin, GPIO_PIN_SET);
 80007aa:	2201      	movs	r2, #1
 80007ac:	213f      	movs	r1, #63	@ 0x3f
 80007ae:	4843      	ldr	r0, [pc, #268]	@ (80008bc <ZeroToNine+0x120>)
 80007b0:	f000 fd12 	bl	80011d8 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80007b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007b8:	f000 fa68 	bl	8000c8c <HAL_Delay>
	  //1 Display
	  HAL_GPIO_WritePin(GPIOC, A_Pin | B_Pin | C_Pin | D_Pin | E_Pin | F_Pin | G_Pin | DOT_Pin, GPIO_PIN_RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	21ff      	movs	r1, #255	@ 0xff
 80007c0:	483e      	ldr	r0, [pc, #248]	@ (80008bc <ZeroToNine+0x120>)
 80007c2:	f000 fd09 	bl	80011d8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, B_Pin | C_Pin, GPIO_PIN_SET);
 80007c6:	2201      	movs	r2, #1
 80007c8:	2106      	movs	r1, #6
 80007ca:	483c      	ldr	r0, [pc, #240]	@ (80008bc <ZeroToNine+0x120>)
 80007cc:	f000 fd04 	bl	80011d8 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80007d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007d4:	f000 fa5a 	bl	8000c8c <HAL_Delay>
	  //2 Display
	  HAL_GPIO_WritePin(GPIOC, A_Pin | B_Pin | C_Pin | D_Pin | E_Pin | F_Pin | G_Pin | DOT_Pin, GPIO_PIN_RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	21ff      	movs	r1, #255	@ 0xff
 80007dc:	4837      	ldr	r0, [pc, #220]	@ (80008bc <ZeroToNine+0x120>)
 80007de:	f000 fcfb 	bl	80011d8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, A_Pin | B_Pin | D_Pin | E_Pin | G_Pin, GPIO_PIN_SET);
 80007e2:	2201      	movs	r2, #1
 80007e4:	215b      	movs	r1, #91	@ 0x5b
 80007e6:	4835      	ldr	r0, [pc, #212]	@ (80008bc <ZeroToNine+0x120>)
 80007e8:	f000 fcf6 	bl	80011d8 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80007ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007f0:	f000 fa4c 	bl	8000c8c <HAL_Delay>
	  //3 Display
	  HAL_GPIO_WritePin(GPIOC, A_Pin | B_Pin | C_Pin | D_Pin | E_Pin | F_Pin | G_Pin | DOT_Pin, GPIO_PIN_RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	21ff      	movs	r1, #255	@ 0xff
 80007f8:	4830      	ldr	r0, [pc, #192]	@ (80008bc <ZeroToNine+0x120>)
 80007fa:	f000 fced 	bl	80011d8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, A_Pin | B_Pin | C_Pin | D_Pin | G_Pin, GPIO_PIN_SET);
 80007fe:	2201      	movs	r2, #1
 8000800:	214f      	movs	r1, #79	@ 0x4f
 8000802:	482e      	ldr	r0, [pc, #184]	@ (80008bc <ZeroToNine+0x120>)
 8000804:	f000 fce8 	bl	80011d8 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000808:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800080c:	f000 fa3e 	bl	8000c8c <HAL_Delay>
	  //4 Display
	  HAL_GPIO_WritePin(GPIOC, A_Pin | B_Pin | C_Pin | D_Pin | E_Pin | F_Pin | G_Pin | DOT_Pin, GPIO_PIN_RESET);
 8000810:	2200      	movs	r2, #0
 8000812:	21ff      	movs	r1, #255	@ 0xff
 8000814:	4829      	ldr	r0, [pc, #164]	@ (80008bc <ZeroToNine+0x120>)
 8000816:	f000 fcdf 	bl	80011d8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, B_Pin | C_Pin | F_Pin | G_Pin, GPIO_PIN_SET);
 800081a:	2201      	movs	r2, #1
 800081c:	2166      	movs	r1, #102	@ 0x66
 800081e:	4827      	ldr	r0, [pc, #156]	@ (80008bc <ZeroToNine+0x120>)
 8000820:	f000 fcda 	bl	80011d8 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000824:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000828:	f000 fa30 	bl	8000c8c <HAL_Delay>
	  //5 Display
	  HAL_GPIO_WritePin(GPIOC, A_Pin | B_Pin | C_Pin | D_Pin | E_Pin | F_Pin | G_Pin | DOT_Pin, GPIO_PIN_RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	21ff      	movs	r1, #255	@ 0xff
 8000830:	4822      	ldr	r0, [pc, #136]	@ (80008bc <ZeroToNine+0x120>)
 8000832:	f000 fcd1 	bl	80011d8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, A_Pin | C_Pin | D_Pin | F_Pin | G_Pin, GPIO_PIN_SET);
 8000836:	2201      	movs	r2, #1
 8000838:	216d      	movs	r1, #109	@ 0x6d
 800083a:	4820      	ldr	r0, [pc, #128]	@ (80008bc <ZeroToNine+0x120>)
 800083c:	f000 fccc 	bl	80011d8 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000840:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000844:	f000 fa22 	bl	8000c8c <HAL_Delay>
	  //6 Display
	  HAL_GPIO_WritePin(GPIOC, A_Pin | B_Pin | C_Pin | D_Pin | E_Pin | F_Pin | G_Pin | DOT_Pin, GPIO_PIN_RESET);
 8000848:	2200      	movs	r2, #0
 800084a:	21ff      	movs	r1, #255	@ 0xff
 800084c:	481b      	ldr	r0, [pc, #108]	@ (80008bc <ZeroToNine+0x120>)
 800084e:	f000 fcc3 	bl	80011d8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, A_Pin | C_Pin | D_Pin | E_Pin | F_Pin | G_Pin, GPIO_PIN_SET);
 8000852:	2201      	movs	r2, #1
 8000854:	217d      	movs	r1, #125	@ 0x7d
 8000856:	4819      	ldr	r0, [pc, #100]	@ (80008bc <ZeroToNine+0x120>)
 8000858:	f000 fcbe 	bl	80011d8 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 800085c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000860:	f000 fa14 	bl	8000c8c <HAL_Delay>
	  //7 Display
	  HAL_GPIO_WritePin(GPIOC, A_Pin | B_Pin | C_Pin | D_Pin | E_Pin | F_Pin | G_Pin | DOT_Pin, GPIO_PIN_RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	21ff      	movs	r1, #255	@ 0xff
 8000868:	4814      	ldr	r0, [pc, #80]	@ (80008bc <ZeroToNine+0x120>)
 800086a:	f000 fcb5 	bl	80011d8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, A_Pin | B_Pin | C_Pin, GPIO_PIN_SET);
 800086e:	2201      	movs	r2, #1
 8000870:	2107      	movs	r1, #7
 8000872:	4812      	ldr	r0, [pc, #72]	@ (80008bc <ZeroToNine+0x120>)
 8000874:	f000 fcb0 	bl	80011d8 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000878:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800087c:	f000 fa06 	bl	8000c8c <HAL_Delay>
	  //8 Display
	  HAL_GPIO_WritePin(GPIOC, A_Pin | B_Pin | C_Pin | D_Pin | E_Pin | F_Pin | G_Pin | DOT_Pin, GPIO_PIN_RESET);
 8000880:	2200      	movs	r2, #0
 8000882:	21ff      	movs	r1, #255	@ 0xff
 8000884:	480d      	ldr	r0, [pc, #52]	@ (80008bc <ZeroToNine+0x120>)
 8000886:	f000 fca7 	bl	80011d8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, A_Pin | B_Pin | C_Pin | D_Pin | E_Pin | F_Pin | G_Pin, GPIO_PIN_SET);
 800088a:	2201      	movs	r2, #1
 800088c:	217f      	movs	r1, #127	@ 0x7f
 800088e:	480b      	ldr	r0, [pc, #44]	@ (80008bc <ZeroToNine+0x120>)
 8000890:	f000 fca2 	bl	80011d8 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000894:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000898:	f000 f9f8 	bl	8000c8c <HAL_Delay>
	  //9 Display
	  HAL_GPIO_WritePin(GPIOC, A_Pin | B_Pin | C_Pin | D_Pin | E_Pin | F_Pin | G_Pin | DOT_Pin, GPIO_PIN_RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	21ff      	movs	r1, #255	@ 0xff
 80008a0:	4806      	ldr	r0, [pc, #24]	@ (80008bc <ZeroToNine+0x120>)
 80008a2:	f000 fc99 	bl	80011d8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, A_Pin | B_Pin | C_Pin | F_Pin | G_Pin, GPIO_PIN_SET);
 80008a6:	2201      	movs	r2, #1
 80008a8:	2167      	movs	r1, #103	@ 0x67
 80008aa:	4804      	ldr	r0, [pc, #16]	@ (80008bc <ZeroToNine+0x120>)
 80008ac:	f000 fc94 	bl	80011d8 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80008b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008b4:	f000 f9ea 	bl	8000c8c <HAL_Delay>
}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40020800 	.word	0x40020800

080008c0 <NineToZero>:

void NineToZero(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
	  //9 Display
	  HAL_GPIO_WritePin(GPIOC, A_Pin | B_Pin | C_Pin | D_Pin | E_Pin | F_Pin | G_Pin | DOT_Pin, GPIO_PIN_RESET);
 80008c4:	2200      	movs	r2, #0
 80008c6:	21ff      	movs	r1, #255	@ 0xff
 80008c8:	4845      	ldr	r0, [pc, #276]	@ (80009e0 <NineToZero+0x120>)
 80008ca:	f000 fc85 	bl	80011d8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, A_Pin | B_Pin | C_Pin | F_Pin | G_Pin, GPIO_PIN_SET);
 80008ce:	2201      	movs	r2, #1
 80008d0:	2167      	movs	r1, #103	@ 0x67
 80008d2:	4843      	ldr	r0, [pc, #268]	@ (80009e0 <NineToZero+0x120>)
 80008d4:	f000 fc80 	bl	80011d8 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80008d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008dc:	f000 f9d6 	bl	8000c8c <HAL_Delay>
	  //8 Display
	  HAL_GPIO_WritePin(GPIOC, A_Pin | B_Pin | C_Pin | D_Pin | E_Pin | F_Pin | G_Pin | DOT_Pin, GPIO_PIN_RESET);
 80008e0:	2200      	movs	r2, #0
 80008e2:	21ff      	movs	r1, #255	@ 0xff
 80008e4:	483e      	ldr	r0, [pc, #248]	@ (80009e0 <NineToZero+0x120>)
 80008e6:	f000 fc77 	bl	80011d8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, A_Pin | B_Pin | C_Pin | D_Pin | E_Pin | F_Pin | G_Pin, GPIO_PIN_SET);
 80008ea:	2201      	movs	r2, #1
 80008ec:	217f      	movs	r1, #127	@ 0x7f
 80008ee:	483c      	ldr	r0, [pc, #240]	@ (80009e0 <NineToZero+0x120>)
 80008f0:	f000 fc72 	bl	80011d8 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80008f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008f8:	f000 f9c8 	bl	8000c8c <HAL_Delay>
	  //7 Display
	  HAL_GPIO_WritePin(GPIOC, A_Pin | B_Pin | C_Pin | D_Pin | E_Pin | F_Pin | G_Pin | DOT_Pin, GPIO_PIN_RESET);
 80008fc:	2200      	movs	r2, #0
 80008fe:	21ff      	movs	r1, #255	@ 0xff
 8000900:	4837      	ldr	r0, [pc, #220]	@ (80009e0 <NineToZero+0x120>)
 8000902:	f000 fc69 	bl	80011d8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, A_Pin | B_Pin | C_Pin, GPIO_PIN_SET);
 8000906:	2201      	movs	r2, #1
 8000908:	2107      	movs	r1, #7
 800090a:	4835      	ldr	r0, [pc, #212]	@ (80009e0 <NineToZero+0x120>)
 800090c:	f000 fc64 	bl	80011d8 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000910:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000914:	f000 f9ba 	bl	8000c8c <HAL_Delay>
	  //6 Display
	  HAL_GPIO_WritePin(GPIOC, A_Pin | B_Pin | C_Pin | D_Pin | E_Pin | F_Pin | G_Pin | DOT_Pin, GPIO_PIN_RESET);
 8000918:	2200      	movs	r2, #0
 800091a:	21ff      	movs	r1, #255	@ 0xff
 800091c:	4830      	ldr	r0, [pc, #192]	@ (80009e0 <NineToZero+0x120>)
 800091e:	f000 fc5b 	bl	80011d8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, A_Pin | C_Pin | D_Pin | E_Pin | F_Pin | G_Pin, GPIO_PIN_SET);
 8000922:	2201      	movs	r2, #1
 8000924:	217d      	movs	r1, #125	@ 0x7d
 8000926:	482e      	ldr	r0, [pc, #184]	@ (80009e0 <NineToZero+0x120>)
 8000928:	f000 fc56 	bl	80011d8 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 800092c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000930:	f000 f9ac 	bl	8000c8c <HAL_Delay>
	  //5 Display
	  HAL_GPIO_WritePin(GPIOC, A_Pin | B_Pin | C_Pin | D_Pin | E_Pin | F_Pin | G_Pin | DOT_Pin, GPIO_PIN_RESET);
 8000934:	2200      	movs	r2, #0
 8000936:	21ff      	movs	r1, #255	@ 0xff
 8000938:	4829      	ldr	r0, [pc, #164]	@ (80009e0 <NineToZero+0x120>)
 800093a:	f000 fc4d 	bl	80011d8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, A_Pin | C_Pin | D_Pin | F_Pin | G_Pin, GPIO_PIN_SET);
 800093e:	2201      	movs	r2, #1
 8000940:	216d      	movs	r1, #109	@ 0x6d
 8000942:	4827      	ldr	r0, [pc, #156]	@ (80009e0 <NineToZero+0x120>)
 8000944:	f000 fc48 	bl	80011d8 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000948:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800094c:	f000 f99e 	bl	8000c8c <HAL_Delay>
	  //4 Display
	  HAL_GPIO_WritePin(GPIOC, A_Pin | B_Pin | C_Pin | D_Pin | E_Pin | F_Pin | G_Pin | DOT_Pin, GPIO_PIN_RESET);
 8000950:	2200      	movs	r2, #0
 8000952:	21ff      	movs	r1, #255	@ 0xff
 8000954:	4822      	ldr	r0, [pc, #136]	@ (80009e0 <NineToZero+0x120>)
 8000956:	f000 fc3f 	bl	80011d8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, B_Pin | C_Pin | F_Pin | G_Pin, GPIO_PIN_SET);
 800095a:	2201      	movs	r2, #1
 800095c:	2166      	movs	r1, #102	@ 0x66
 800095e:	4820      	ldr	r0, [pc, #128]	@ (80009e0 <NineToZero+0x120>)
 8000960:	f000 fc3a 	bl	80011d8 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000964:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000968:	f000 f990 	bl	8000c8c <HAL_Delay>
	  //3 Display
	  HAL_GPIO_WritePin(GPIOC, A_Pin | B_Pin | C_Pin | D_Pin | E_Pin | F_Pin | G_Pin | DOT_Pin, GPIO_PIN_RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	21ff      	movs	r1, #255	@ 0xff
 8000970:	481b      	ldr	r0, [pc, #108]	@ (80009e0 <NineToZero+0x120>)
 8000972:	f000 fc31 	bl	80011d8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, A_Pin | B_Pin | C_Pin | D_Pin | G_Pin, GPIO_PIN_SET);
 8000976:	2201      	movs	r2, #1
 8000978:	214f      	movs	r1, #79	@ 0x4f
 800097a:	4819      	ldr	r0, [pc, #100]	@ (80009e0 <NineToZero+0x120>)
 800097c:	f000 fc2c 	bl	80011d8 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000980:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000984:	f000 f982 	bl	8000c8c <HAL_Delay>
	  //2 Display
	  HAL_GPIO_WritePin(GPIOC, A_Pin | B_Pin | C_Pin | D_Pin | E_Pin | F_Pin | G_Pin | DOT_Pin, GPIO_PIN_RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	21ff      	movs	r1, #255	@ 0xff
 800098c:	4814      	ldr	r0, [pc, #80]	@ (80009e0 <NineToZero+0x120>)
 800098e:	f000 fc23 	bl	80011d8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, A_Pin | B_Pin | D_Pin | E_Pin | G_Pin, GPIO_PIN_SET);
 8000992:	2201      	movs	r2, #1
 8000994:	215b      	movs	r1, #91	@ 0x5b
 8000996:	4812      	ldr	r0, [pc, #72]	@ (80009e0 <NineToZero+0x120>)
 8000998:	f000 fc1e 	bl	80011d8 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 800099c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009a0:	f000 f974 	bl	8000c8c <HAL_Delay>
	  //1 Display
	  HAL_GPIO_WritePin(GPIOC, A_Pin | B_Pin | C_Pin | D_Pin | E_Pin | F_Pin | G_Pin | DOT_Pin, GPIO_PIN_RESET);
 80009a4:	2200      	movs	r2, #0
 80009a6:	21ff      	movs	r1, #255	@ 0xff
 80009a8:	480d      	ldr	r0, [pc, #52]	@ (80009e0 <NineToZero+0x120>)
 80009aa:	f000 fc15 	bl	80011d8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, B_Pin | C_Pin, GPIO_PIN_SET);
 80009ae:	2201      	movs	r2, #1
 80009b0:	2106      	movs	r1, #6
 80009b2:	480b      	ldr	r0, [pc, #44]	@ (80009e0 <NineToZero+0x120>)
 80009b4:	f000 fc10 	bl	80011d8 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80009b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009bc:	f000 f966 	bl	8000c8c <HAL_Delay>
	  //0 Display
	  HAL_GPIO_WritePin(GPIOC, A_Pin | B_Pin | C_Pin | D_Pin | E_Pin | F_Pin | G_Pin | DOT_Pin, GPIO_PIN_RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	21ff      	movs	r1, #255	@ 0xff
 80009c4:	4806      	ldr	r0, [pc, #24]	@ (80009e0 <NineToZero+0x120>)
 80009c6:	f000 fc07 	bl	80011d8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, A_Pin | B_Pin | C_Pin | D_Pin | E_Pin | F_Pin, GPIO_PIN_SET);
 80009ca:	2201      	movs	r2, #1
 80009cc:	213f      	movs	r1, #63	@ 0x3f
 80009ce:	4804      	ldr	r0, [pc, #16]	@ (80009e0 <NineToZero+0x120>)
 80009d0:	f000 fc02 	bl	80011d8 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80009d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009d8:	f000 f958 	bl	8000c8c <HAL_Delay>
}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40020800 	.word	0x40020800

080009e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e8:	b672      	cpsid	i
}
 80009ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <Error_Handler+0x8>

080009f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	4b10      	ldr	r3, [pc, #64]	@ (8000a3c <HAL_MspInit+0x4c>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009fe:	4a0f      	ldr	r2, [pc, #60]	@ (8000a3c <HAL_MspInit+0x4c>)
 8000a00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a06:	4b0d      	ldr	r3, [pc, #52]	@ (8000a3c <HAL_MspInit+0x4c>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	603b      	str	r3, [r7, #0]
 8000a16:	4b09      	ldr	r3, [pc, #36]	@ (8000a3c <HAL_MspInit+0x4c>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1a:	4a08      	ldr	r2, [pc, #32]	@ (8000a3c <HAL_MspInit+0x4c>)
 8000a1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a20:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a22:	4b06      	ldr	r3, [pc, #24]	@ (8000a3c <HAL_MspInit+0x4c>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a2a:	603b      	str	r3, [r7, #0]
 8000a2c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a2e:	2007      	movs	r0, #7
 8000a30:	f000 fa02 	bl	8000e38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a34:	bf00      	nop
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40023800 	.word	0x40023800

08000a40 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08a      	sub	sp, #40	@ 0x28
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a19      	ldr	r2, [pc, #100]	@ (8000ac4 <HAL_UART_MspInit+0x84>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d12b      	bne.n	8000aba <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]
 8000a66:	4b18      	ldr	r3, [pc, #96]	@ (8000ac8 <HAL_UART_MspInit+0x88>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6a:	4a17      	ldr	r2, [pc, #92]	@ (8000ac8 <HAL_UART_MspInit+0x88>)
 8000a6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a72:	4b15      	ldr	r3, [pc, #84]	@ (8000ac8 <HAL_UART_MspInit+0x88>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	4b11      	ldr	r3, [pc, #68]	@ (8000ac8 <HAL_UART_MspInit+0x88>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	4a10      	ldr	r2, [pc, #64]	@ (8000ac8 <HAL_UART_MspInit+0x88>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac8 <HAL_UART_MspInit+0x88>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a9a:	230c      	movs	r3, #12
 8000a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aaa:	2307      	movs	r3, #7
 8000aac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4805      	ldr	r0, [pc, #20]	@ (8000acc <HAL_UART_MspInit+0x8c>)
 8000ab6:	f000 f9f3 	bl	8000ea0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000aba:	bf00      	nop
 8000abc:	3728      	adds	r7, #40	@ 0x28
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40004400 	.word	0x40004400
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40020000 	.word	0x40020000

08000ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <NMI_Handler+0x4>

08000ad8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <HardFault_Handler+0x4>

08000ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <MemManage_Handler+0x4>

08000ae8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <BusFault_Handler+0x4>

08000af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <UsageFault_Handler+0x4>

08000af8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b26:	f000 f891 	bl	8000c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b34:	4b06      	ldr	r3, [pc, #24]	@ (8000b50 <SystemInit+0x20>)
 8000b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b3a:	4a05      	ldr	r2, [pc, #20]	@ (8000b50 <SystemInit+0x20>)
 8000b3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b8c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b58:	f7ff ffea 	bl	8000b30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b5c:	480c      	ldr	r0, [pc, #48]	@ (8000b90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b5e:	490d      	ldr	r1, [pc, #52]	@ (8000b94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b60:	4a0d      	ldr	r2, [pc, #52]	@ (8000b98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b64:	e002      	b.n	8000b6c <LoopCopyDataInit>

08000b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b6a:	3304      	adds	r3, #4

08000b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b70:	d3f9      	bcc.n	8000b66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b72:	4a0a      	ldr	r2, [pc, #40]	@ (8000b9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b74:	4c0a      	ldr	r4, [pc, #40]	@ (8000ba0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b78:	e001      	b.n	8000b7e <LoopFillZerobss>

08000b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b7c:	3204      	adds	r2, #4

08000b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b80:	d3fb      	bcc.n	8000b7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b82:	f001 faa7 	bl	80020d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b86:	f7ff fcbd 	bl	8000504 <main>
  bx  lr    
 8000b8a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b94:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b98:	0800215c 	.word	0x0800215c
  ldr r2, =_sbss
 8000b9c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ba0:	20000074 	.word	0x20000074

08000ba4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ba4:	e7fe      	b.n	8000ba4 <ADC_IRQHandler>
	...

08000ba8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bac:	4b0e      	ldr	r3, [pc, #56]	@ (8000be8 <HAL_Init+0x40>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000be8 <HAL_Init+0x40>)
 8000bb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000be8 <HAL_Init+0x40>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a0a      	ldr	r2, [pc, #40]	@ (8000be8 <HAL_Init+0x40>)
 8000bbe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc4:	4b08      	ldr	r3, [pc, #32]	@ (8000be8 <HAL_Init+0x40>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a07      	ldr	r2, [pc, #28]	@ (8000be8 <HAL_Init+0x40>)
 8000bca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd0:	2003      	movs	r0, #3
 8000bd2:	f000 f931 	bl	8000e38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f000 f808 	bl	8000bec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bdc:	f7ff ff08 	bl	80009f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40023c00 	.word	0x40023c00

08000bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bf4:	4b12      	ldr	r3, [pc, #72]	@ (8000c40 <HAL_InitTick+0x54>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4b12      	ldr	r3, [pc, #72]	@ (8000c44 <HAL_InitTick+0x58>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f000 f93b 	bl	8000e86 <HAL_SYSTICK_Config>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	e00e      	b.n	8000c38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2b0f      	cmp	r3, #15
 8000c1e:	d80a      	bhi.n	8000c36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c20:	2200      	movs	r2, #0
 8000c22:	6879      	ldr	r1, [r7, #4]
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c28:	f000 f911 	bl	8000e4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c2c:	4a06      	ldr	r2, [pc, #24]	@ (8000c48 <HAL_InitTick+0x5c>)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c32:	2300      	movs	r3, #0
 8000c34:	e000      	b.n	8000c38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000000 	.word	0x20000000
 8000c44:	20000008 	.word	0x20000008
 8000c48:	20000004 	.word	0x20000004

08000c4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c50:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <HAL_IncTick+0x20>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	461a      	mov	r2, r3
 8000c56:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <HAL_IncTick+0x24>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	4a04      	ldr	r2, [pc, #16]	@ (8000c70 <HAL_IncTick+0x24>)
 8000c5e:	6013      	str	r3, [r2, #0]
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	20000008 	.word	0x20000008
 8000c70:	20000070 	.word	0x20000070

08000c74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  return uwTick;
 8000c78:	4b03      	ldr	r3, [pc, #12]	@ (8000c88 <HAL_GetTick+0x14>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	20000070 	.word	0x20000070

08000c8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c94:	f7ff ffee 	bl	8000c74 <HAL_GetTick>
 8000c98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000ca4:	d005      	beq.n	8000cb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd0 <HAL_Delay+0x44>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	461a      	mov	r2, r3
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	4413      	add	r3, r2
 8000cb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cb2:	bf00      	nop
 8000cb4:	f7ff ffde 	bl	8000c74 <HAL_GetTick>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	68fa      	ldr	r2, [r7, #12]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d8f7      	bhi.n	8000cb4 <HAL_Delay+0x28>
  {
  }
}
 8000cc4:	bf00      	nop
 8000cc6:	bf00      	nop
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000008 	.word	0x20000008

08000cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8000d18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cea:	68ba      	ldr	r2, [r7, #8]
 8000cec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cfc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d06:	4a04      	ldr	r2, [pc, #16]	@ (8000d18 <__NVIC_SetPriorityGrouping+0x44>)
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	60d3      	str	r3, [r2, #12]
}
 8000d0c:	bf00      	nop
 8000d0e:	3714      	adds	r7, #20
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d20:	4b04      	ldr	r3, [pc, #16]	@ (8000d34 <__NVIC_GetPriorityGrouping+0x18>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	0a1b      	lsrs	r3, r3, #8
 8000d26:	f003 0307 	and.w	r3, r3, #7
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	6039      	str	r1, [r7, #0]
 8000d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	db0a      	blt.n	8000d62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	b2da      	uxtb	r2, r3
 8000d50:	490c      	ldr	r1, [pc, #48]	@ (8000d84 <__NVIC_SetPriority+0x4c>)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	0112      	lsls	r2, r2, #4
 8000d58:	b2d2      	uxtb	r2, r2
 8000d5a:	440b      	add	r3, r1
 8000d5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d60:	e00a      	b.n	8000d78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	4908      	ldr	r1, [pc, #32]	@ (8000d88 <__NVIC_SetPriority+0x50>)
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	f003 030f 	and.w	r3, r3, #15
 8000d6e:	3b04      	subs	r3, #4
 8000d70:	0112      	lsls	r2, r2, #4
 8000d72:	b2d2      	uxtb	r2, r2
 8000d74:	440b      	add	r3, r1
 8000d76:	761a      	strb	r2, [r3, #24]
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000e100 	.word	0xe000e100
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b089      	sub	sp, #36	@ 0x24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f003 0307 	and.w	r3, r3, #7
 8000d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	f1c3 0307 	rsb	r3, r3, #7
 8000da6:	2b04      	cmp	r3, #4
 8000da8:	bf28      	it	cs
 8000daa:	2304      	movcs	r3, #4
 8000dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	3304      	adds	r3, #4
 8000db2:	2b06      	cmp	r3, #6
 8000db4:	d902      	bls.n	8000dbc <NVIC_EncodePriority+0x30>
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	3b03      	subs	r3, #3
 8000dba:	e000      	b.n	8000dbe <NVIC_EncodePriority+0x32>
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43da      	mvns	r2, r3
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	401a      	ands	r2, r3
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	fa01 f303 	lsl.w	r3, r1, r3
 8000dde:	43d9      	mvns	r1, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de4:	4313      	orrs	r3, r2
         );
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3724      	adds	r7, #36	@ 0x24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
	...

08000df4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e04:	d301      	bcc.n	8000e0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e06:	2301      	movs	r3, #1
 8000e08:	e00f      	b.n	8000e2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e34 <SysTick_Config+0x40>)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e12:	210f      	movs	r1, #15
 8000e14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e18:	f7ff ff8e 	bl	8000d38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e1c:	4b05      	ldr	r3, [pc, #20]	@ (8000e34 <SysTick_Config+0x40>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e22:	4b04      	ldr	r3, [pc, #16]	@ (8000e34 <SysTick_Config+0x40>)
 8000e24:	2207      	movs	r2, #7
 8000e26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	e000e010 	.word	0xe000e010

08000e38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f7ff ff47 	bl	8000cd4 <__NVIC_SetPriorityGrouping>
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b086      	sub	sp, #24
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	4603      	mov	r3, r0
 8000e56:	60b9      	str	r1, [r7, #8]
 8000e58:	607a      	str	r2, [r7, #4]
 8000e5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e60:	f7ff ff5c 	bl	8000d1c <__NVIC_GetPriorityGrouping>
 8000e64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	68b9      	ldr	r1, [r7, #8]
 8000e6a:	6978      	ldr	r0, [r7, #20]
 8000e6c:	f7ff ff8e 	bl	8000d8c <NVIC_EncodePriority>
 8000e70:	4602      	mov	r2, r0
 8000e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e76:	4611      	mov	r1, r2
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ff5d 	bl	8000d38 <__NVIC_SetPriority>
}
 8000e7e:	bf00      	nop
 8000e80:	3718      	adds	r7, #24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f7ff ffb0 	bl	8000df4 <SysTick_Config>
 8000e94:	4603      	mov	r3, r0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
	...

08000ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b089      	sub	sp, #36	@ 0x24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61fb      	str	r3, [r7, #28]
 8000eba:	e159      	b.n	8001170 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	697a      	ldr	r2, [r7, #20]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	f040 8148 	bne.w	800116a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f003 0303 	and.w	r3, r3, #3
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d005      	beq.n	8000ef2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d130      	bne.n	8000f54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	2203      	movs	r2, #3
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	43db      	mvns	r3, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4013      	ands	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	68da      	ldr	r2, [r3, #12]
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f28:	2201      	movs	r2, #1
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4013      	ands	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	091b      	lsrs	r3, r3, #4
 8000f3e:	f003 0201 	and.w	r2, r3, #1
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 0303 	and.w	r3, r3, #3
 8000f5c:	2b03      	cmp	r3, #3
 8000f5e:	d017      	beq.n	8000f90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	689a      	ldr	r2, [r3, #8]
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f003 0303 	and.w	r3, r3, #3
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d123      	bne.n	8000fe4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	08da      	lsrs	r2, r3, #3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3208      	adds	r2, #8
 8000fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	f003 0307 	and.w	r3, r3, #7
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	220f      	movs	r2, #15
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	691a      	ldr	r2, [r3, #16]
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	08da      	lsrs	r2, r3, #3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	3208      	adds	r2, #8
 8000fde:	69b9      	ldr	r1, [r7, #24]
 8000fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	2203      	movs	r2, #3
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f003 0203 	and.w	r2, r3, #3
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4313      	orrs	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001020:	2b00      	cmp	r3, #0
 8001022:	f000 80a2 	beq.w	800116a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	4b57      	ldr	r3, [pc, #348]	@ (8001188 <HAL_GPIO_Init+0x2e8>)
 800102c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800102e:	4a56      	ldr	r2, [pc, #344]	@ (8001188 <HAL_GPIO_Init+0x2e8>)
 8001030:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001034:	6453      	str	r3, [r2, #68]	@ 0x44
 8001036:	4b54      	ldr	r3, [pc, #336]	@ (8001188 <HAL_GPIO_Init+0x2e8>)
 8001038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800103a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001042:	4a52      	ldr	r2, [pc, #328]	@ (800118c <HAL_GPIO_Init+0x2ec>)
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	089b      	lsrs	r3, r3, #2
 8001048:	3302      	adds	r3, #2
 800104a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800104e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	f003 0303 	and.w	r3, r3, #3
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	220f      	movs	r2, #15
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43db      	mvns	r3, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4013      	ands	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a49      	ldr	r2, [pc, #292]	@ (8001190 <HAL_GPIO_Init+0x2f0>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d019      	beq.n	80010a2 <HAL_GPIO_Init+0x202>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a48      	ldr	r2, [pc, #288]	@ (8001194 <HAL_GPIO_Init+0x2f4>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d013      	beq.n	800109e <HAL_GPIO_Init+0x1fe>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a47      	ldr	r2, [pc, #284]	@ (8001198 <HAL_GPIO_Init+0x2f8>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d00d      	beq.n	800109a <HAL_GPIO_Init+0x1fa>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a46      	ldr	r2, [pc, #280]	@ (800119c <HAL_GPIO_Init+0x2fc>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d007      	beq.n	8001096 <HAL_GPIO_Init+0x1f6>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a45      	ldr	r2, [pc, #276]	@ (80011a0 <HAL_GPIO_Init+0x300>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d101      	bne.n	8001092 <HAL_GPIO_Init+0x1f2>
 800108e:	2304      	movs	r3, #4
 8001090:	e008      	b.n	80010a4 <HAL_GPIO_Init+0x204>
 8001092:	2307      	movs	r3, #7
 8001094:	e006      	b.n	80010a4 <HAL_GPIO_Init+0x204>
 8001096:	2303      	movs	r3, #3
 8001098:	e004      	b.n	80010a4 <HAL_GPIO_Init+0x204>
 800109a:	2302      	movs	r3, #2
 800109c:	e002      	b.n	80010a4 <HAL_GPIO_Init+0x204>
 800109e:	2301      	movs	r3, #1
 80010a0:	e000      	b.n	80010a4 <HAL_GPIO_Init+0x204>
 80010a2:	2300      	movs	r3, #0
 80010a4:	69fa      	ldr	r2, [r7, #28]
 80010a6:	f002 0203 	and.w	r2, r2, #3
 80010aa:	0092      	lsls	r2, r2, #2
 80010ac:	4093      	lsls	r3, r2
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010b4:	4935      	ldr	r1, [pc, #212]	@ (800118c <HAL_GPIO_Init+0x2ec>)
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	089b      	lsrs	r3, r3, #2
 80010ba:	3302      	adds	r3, #2
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010c2:	4b38      	ldr	r3, [pc, #224]	@ (80011a4 <HAL_GPIO_Init+0x304>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	43db      	mvns	r3, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4013      	ands	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010e6:	4a2f      	ldr	r2, [pc, #188]	@ (80011a4 <HAL_GPIO_Init+0x304>)
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010ec:	4b2d      	ldr	r3, [pc, #180]	@ (80011a4 <HAL_GPIO_Init+0x304>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d003      	beq.n	8001110 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	4313      	orrs	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001110:	4a24      	ldr	r2, [pc, #144]	@ (80011a4 <HAL_GPIO_Init+0x304>)
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001116:	4b23      	ldr	r3, [pc, #140]	@ (80011a4 <HAL_GPIO_Init+0x304>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	43db      	mvns	r3, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4013      	ands	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800113a:	4a1a      	ldr	r2, [pc, #104]	@ (80011a4 <HAL_GPIO_Init+0x304>)
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001140:	4b18      	ldr	r3, [pc, #96]	@ (80011a4 <HAL_GPIO_Init+0x304>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d003      	beq.n	8001164 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	4313      	orrs	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001164:	4a0f      	ldr	r2, [pc, #60]	@ (80011a4 <HAL_GPIO_Init+0x304>)
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3301      	adds	r3, #1
 800116e:	61fb      	str	r3, [r7, #28]
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	2b0f      	cmp	r3, #15
 8001174:	f67f aea2 	bls.w	8000ebc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001178:	bf00      	nop
 800117a:	bf00      	nop
 800117c:	3724      	adds	r7, #36	@ 0x24
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	40023800 	.word	0x40023800
 800118c:	40013800 	.word	0x40013800
 8001190:	40020000 	.word	0x40020000
 8001194:	40020400 	.word	0x40020400
 8001198:	40020800 	.word	0x40020800
 800119c:	40020c00 	.word	0x40020c00
 80011a0:	40021000 	.word	0x40021000
 80011a4:	40013c00 	.word	0x40013c00

080011a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	460b      	mov	r3, r1
 80011b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	691a      	ldr	r2, [r3, #16]
 80011b8:	887b      	ldrh	r3, [r7, #2]
 80011ba:	4013      	ands	r3, r2
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d002      	beq.n	80011c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011c0:	2301      	movs	r3, #1
 80011c2:	73fb      	strb	r3, [r7, #15]
 80011c4:	e001      	b.n	80011ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011c6:	2300      	movs	r3, #0
 80011c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	460b      	mov	r3, r1
 80011e2:	807b      	strh	r3, [r7, #2]
 80011e4:	4613      	mov	r3, r2
 80011e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011e8:	787b      	ldrb	r3, [r7, #1]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ee:	887a      	ldrh	r2, [r7, #2]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011f4:	e003      	b.n	80011fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011f6:	887b      	ldrh	r3, [r7, #2]
 80011f8:	041a      	lsls	r2, r3, #16
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	619a      	str	r2, [r3, #24]
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
	...

0800120c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d101      	bne.n	800121e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e267      	b.n	80016ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	2b00      	cmp	r3, #0
 8001228:	d075      	beq.n	8001316 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800122a:	4b88      	ldr	r3, [pc, #544]	@ (800144c <HAL_RCC_OscConfig+0x240>)
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f003 030c 	and.w	r3, r3, #12
 8001232:	2b04      	cmp	r3, #4
 8001234:	d00c      	beq.n	8001250 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001236:	4b85      	ldr	r3, [pc, #532]	@ (800144c <HAL_RCC_OscConfig+0x240>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800123e:	2b08      	cmp	r3, #8
 8001240:	d112      	bne.n	8001268 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001242:	4b82      	ldr	r3, [pc, #520]	@ (800144c <HAL_RCC_OscConfig+0x240>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800124a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800124e:	d10b      	bne.n	8001268 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001250:	4b7e      	ldr	r3, [pc, #504]	@ (800144c <HAL_RCC_OscConfig+0x240>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d05b      	beq.n	8001314 <HAL_RCC_OscConfig+0x108>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d157      	bne.n	8001314 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e242      	b.n	80016ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001270:	d106      	bne.n	8001280 <HAL_RCC_OscConfig+0x74>
 8001272:	4b76      	ldr	r3, [pc, #472]	@ (800144c <HAL_RCC_OscConfig+0x240>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a75      	ldr	r2, [pc, #468]	@ (800144c <HAL_RCC_OscConfig+0x240>)
 8001278:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800127c:	6013      	str	r3, [r2, #0]
 800127e:	e01d      	b.n	80012bc <HAL_RCC_OscConfig+0xb0>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001288:	d10c      	bne.n	80012a4 <HAL_RCC_OscConfig+0x98>
 800128a:	4b70      	ldr	r3, [pc, #448]	@ (800144c <HAL_RCC_OscConfig+0x240>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a6f      	ldr	r2, [pc, #444]	@ (800144c <HAL_RCC_OscConfig+0x240>)
 8001290:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001294:	6013      	str	r3, [r2, #0]
 8001296:	4b6d      	ldr	r3, [pc, #436]	@ (800144c <HAL_RCC_OscConfig+0x240>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a6c      	ldr	r2, [pc, #432]	@ (800144c <HAL_RCC_OscConfig+0x240>)
 800129c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	e00b      	b.n	80012bc <HAL_RCC_OscConfig+0xb0>
 80012a4:	4b69      	ldr	r3, [pc, #420]	@ (800144c <HAL_RCC_OscConfig+0x240>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a68      	ldr	r2, [pc, #416]	@ (800144c <HAL_RCC_OscConfig+0x240>)
 80012aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012ae:	6013      	str	r3, [r2, #0]
 80012b0:	4b66      	ldr	r3, [pc, #408]	@ (800144c <HAL_RCC_OscConfig+0x240>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a65      	ldr	r2, [pc, #404]	@ (800144c <HAL_RCC_OscConfig+0x240>)
 80012b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d013      	beq.n	80012ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c4:	f7ff fcd6 	bl	8000c74 <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012cc:	f7ff fcd2 	bl	8000c74 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b64      	cmp	r3, #100	@ 0x64
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e207      	b.n	80016ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012de:	4b5b      	ldr	r3, [pc, #364]	@ (800144c <HAL_RCC_OscConfig+0x240>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d0f0      	beq.n	80012cc <HAL_RCC_OscConfig+0xc0>
 80012ea:	e014      	b.n	8001316 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ec:	f7ff fcc2 	bl	8000c74 <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012f4:	f7ff fcbe 	bl	8000c74 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b64      	cmp	r3, #100	@ 0x64
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e1f3      	b.n	80016ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001306:	4b51      	ldr	r3, [pc, #324]	@ (800144c <HAL_RCC_OscConfig+0x240>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d1f0      	bne.n	80012f4 <HAL_RCC_OscConfig+0xe8>
 8001312:	e000      	b.n	8001316 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d063      	beq.n	80013ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001322:	4b4a      	ldr	r3, [pc, #296]	@ (800144c <HAL_RCC_OscConfig+0x240>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 030c 	and.w	r3, r3, #12
 800132a:	2b00      	cmp	r3, #0
 800132c:	d00b      	beq.n	8001346 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800132e:	4b47      	ldr	r3, [pc, #284]	@ (800144c <HAL_RCC_OscConfig+0x240>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001336:	2b08      	cmp	r3, #8
 8001338:	d11c      	bne.n	8001374 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800133a:	4b44      	ldr	r3, [pc, #272]	@ (800144c <HAL_RCC_OscConfig+0x240>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d116      	bne.n	8001374 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001346:	4b41      	ldr	r3, [pc, #260]	@ (800144c <HAL_RCC_OscConfig+0x240>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d005      	beq.n	800135e <HAL_RCC_OscConfig+0x152>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d001      	beq.n	800135e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e1c7      	b.n	80016ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800135e:	4b3b      	ldr	r3, [pc, #236]	@ (800144c <HAL_RCC_OscConfig+0x240>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	691b      	ldr	r3, [r3, #16]
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	4937      	ldr	r1, [pc, #220]	@ (800144c <HAL_RCC_OscConfig+0x240>)
 800136e:	4313      	orrs	r3, r2
 8001370:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001372:	e03a      	b.n	80013ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d020      	beq.n	80013be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800137c:	4b34      	ldr	r3, [pc, #208]	@ (8001450 <HAL_RCC_OscConfig+0x244>)
 800137e:	2201      	movs	r2, #1
 8001380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001382:	f7ff fc77 	bl	8000c74 <HAL_GetTick>
 8001386:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001388:	e008      	b.n	800139c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800138a:	f7ff fc73 	bl	8000c74 <HAL_GetTick>
 800138e:	4602      	mov	r2, r0
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	2b02      	cmp	r3, #2
 8001396:	d901      	bls.n	800139c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e1a8      	b.n	80016ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800139c:	4b2b      	ldr	r3, [pc, #172]	@ (800144c <HAL_RCC_OscConfig+0x240>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d0f0      	beq.n	800138a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a8:	4b28      	ldr	r3, [pc, #160]	@ (800144c <HAL_RCC_OscConfig+0x240>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	4925      	ldr	r1, [pc, #148]	@ (800144c <HAL_RCC_OscConfig+0x240>)
 80013b8:	4313      	orrs	r3, r2
 80013ba:	600b      	str	r3, [r1, #0]
 80013bc:	e015      	b.n	80013ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013be:	4b24      	ldr	r3, [pc, #144]	@ (8001450 <HAL_RCC_OscConfig+0x244>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c4:	f7ff fc56 	bl	8000c74 <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013cc:	f7ff fc52 	bl	8000c74 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e187      	b.n	80016ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013de:	4b1b      	ldr	r3, [pc, #108]	@ (800144c <HAL_RCC_OscConfig+0x240>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1f0      	bne.n	80013cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0308 	and.w	r3, r3, #8
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d036      	beq.n	8001464 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d016      	beq.n	800142c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013fe:	4b15      	ldr	r3, [pc, #84]	@ (8001454 <HAL_RCC_OscConfig+0x248>)
 8001400:	2201      	movs	r2, #1
 8001402:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001404:	f7ff fc36 	bl	8000c74 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800140c:	f7ff fc32 	bl	8000c74 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e167      	b.n	80016ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800141e:	4b0b      	ldr	r3, [pc, #44]	@ (800144c <HAL_RCC_OscConfig+0x240>)
 8001420:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d0f0      	beq.n	800140c <HAL_RCC_OscConfig+0x200>
 800142a:	e01b      	b.n	8001464 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800142c:	4b09      	ldr	r3, [pc, #36]	@ (8001454 <HAL_RCC_OscConfig+0x248>)
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001432:	f7ff fc1f 	bl	8000c74 <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001438:	e00e      	b.n	8001458 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800143a:	f7ff fc1b 	bl	8000c74 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d907      	bls.n	8001458 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e150      	b.n	80016ee <HAL_RCC_OscConfig+0x4e2>
 800144c:	40023800 	.word	0x40023800
 8001450:	42470000 	.word	0x42470000
 8001454:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001458:	4b88      	ldr	r3, [pc, #544]	@ (800167c <HAL_RCC_OscConfig+0x470>)
 800145a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1ea      	bne.n	800143a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0304 	and.w	r3, r3, #4
 800146c:	2b00      	cmp	r3, #0
 800146e:	f000 8097 	beq.w	80015a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001472:	2300      	movs	r3, #0
 8001474:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001476:	4b81      	ldr	r3, [pc, #516]	@ (800167c <HAL_RCC_OscConfig+0x470>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d10f      	bne.n	80014a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	4b7d      	ldr	r3, [pc, #500]	@ (800167c <HAL_RCC_OscConfig+0x470>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148a:	4a7c      	ldr	r2, [pc, #496]	@ (800167c <HAL_RCC_OscConfig+0x470>)
 800148c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001490:	6413      	str	r3, [r2, #64]	@ 0x40
 8001492:	4b7a      	ldr	r3, [pc, #488]	@ (800167c <HAL_RCC_OscConfig+0x470>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800149e:	2301      	movs	r3, #1
 80014a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a2:	4b77      	ldr	r3, [pc, #476]	@ (8001680 <HAL_RCC_OscConfig+0x474>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d118      	bne.n	80014e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ae:	4b74      	ldr	r3, [pc, #464]	@ (8001680 <HAL_RCC_OscConfig+0x474>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a73      	ldr	r2, [pc, #460]	@ (8001680 <HAL_RCC_OscConfig+0x474>)
 80014b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ba:	f7ff fbdb 	bl	8000c74 <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014c2:	f7ff fbd7 	bl	8000c74 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e10c      	b.n	80016ee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d4:	4b6a      	ldr	r3, [pc, #424]	@ (8001680 <HAL_RCC_OscConfig+0x474>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d0f0      	beq.n	80014c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d106      	bne.n	80014f6 <HAL_RCC_OscConfig+0x2ea>
 80014e8:	4b64      	ldr	r3, [pc, #400]	@ (800167c <HAL_RCC_OscConfig+0x470>)
 80014ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014ec:	4a63      	ldr	r2, [pc, #396]	@ (800167c <HAL_RCC_OscConfig+0x470>)
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80014f4:	e01c      	b.n	8001530 <HAL_RCC_OscConfig+0x324>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	2b05      	cmp	r3, #5
 80014fc:	d10c      	bne.n	8001518 <HAL_RCC_OscConfig+0x30c>
 80014fe:	4b5f      	ldr	r3, [pc, #380]	@ (800167c <HAL_RCC_OscConfig+0x470>)
 8001500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001502:	4a5e      	ldr	r2, [pc, #376]	@ (800167c <HAL_RCC_OscConfig+0x470>)
 8001504:	f043 0304 	orr.w	r3, r3, #4
 8001508:	6713      	str	r3, [r2, #112]	@ 0x70
 800150a:	4b5c      	ldr	r3, [pc, #368]	@ (800167c <HAL_RCC_OscConfig+0x470>)
 800150c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800150e:	4a5b      	ldr	r2, [pc, #364]	@ (800167c <HAL_RCC_OscConfig+0x470>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6713      	str	r3, [r2, #112]	@ 0x70
 8001516:	e00b      	b.n	8001530 <HAL_RCC_OscConfig+0x324>
 8001518:	4b58      	ldr	r3, [pc, #352]	@ (800167c <HAL_RCC_OscConfig+0x470>)
 800151a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800151c:	4a57      	ldr	r2, [pc, #348]	@ (800167c <HAL_RCC_OscConfig+0x470>)
 800151e:	f023 0301 	bic.w	r3, r3, #1
 8001522:	6713      	str	r3, [r2, #112]	@ 0x70
 8001524:	4b55      	ldr	r3, [pc, #340]	@ (800167c <HAL_RCC_OscConfig+0x470>)
 8001526:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001528:	4a54      	ldr	r2, [pc, #336]	@ (800167c <HAL_RCC_OscConfig+0x470>)
 800152a:	f023 0304 	bic.w	r3, r3, #4
 800152e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d015      	beq.n	8001564 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001538:	f7ff fb9c 	bl	8000c74 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800153e:	e00a      	b.n	8001556 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001540:	f7ff fb98 	bl	8000c74 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800154e:	4293      	cmp	r3, r2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e0cb      	b.n	80016ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001556:	4b49      	ldr	r3, [pc, #292]	@ (800167c <HAL_RCC_OscConfig+0x470>)
 8001558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d0ee      	beq.n	8001540 <HAL_RCC_OscConfig+0x334>
 8001562:	e014      	b.n	800158e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001564:	f7ff fb86 	bl	8000c74 <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800156a:	e00a      	b.n	8001582 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800156c:	f7ff fb82 	bl	8000c74 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	f241 3288 	movw	r2, #5000	@ 0x1388
 800157a:	4293      	cmp	r3, r2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e0b5      	b.n	80016ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001582:	4b3e      	ldr	r3, [pc, #248]	@ (800167c <HAL_RCC_OscConfig+0x470>)
 8001584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1ee      	bne.n	800156c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800158e:	7dfb      	ldrb	r3, [r7, #23]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d105      	bne.n	80015a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001594:	4b39      	ldr	r3, [pc, #228]	@ (800167c <HAL_RCC_OscConfig+0x470>)
 8001596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001598:	4a38      	ldr	r2, [pc, #224]	@ (800167c <HAL_RCC_OscConfig+0x470>)
 800159a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800159e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	f000 80a1 	beq.w	80016ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015aa:	4b34      	ldr	r3, [pc, #208]	@ (800167c <HAL_RCC_OscConfig+0x470>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f003 030c 	and.w	r3, r3, #12
 80015b2:	2b08      	cmp	r3, #8
 80015b4:	d05c      	beq.n	8001670 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d141      	bne.n	8001642 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015be:	4b31      	ldr	r3, [pc, #196]	@ (8001684 <HAL_RCC_OscConfig+0x478>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c4:	f7ff fb56 	bl	8000c74 <HAL_GetTick>
 80015c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ca:	e008      	b.n	80015de <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015cc:	f7ff fb52 	bl	8000c74 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e087      	b.n	80016ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015de:	4b27      	ldr	r3, [pc, #156]	@ (800167c <HAL_RCC_OscConfig+0x470>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1f0      	bne.n	80015cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	69da      	ldr	r2, [r3, #28]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a1b      	ldr	r3, [r3, #32]
 80015f2:	431a      	orrs	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f8:	019b      	lsls	r3, r3, #6
 80015fa:	431a      	orrs	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001600:	085b      	lsrs	r3, r3, #1
 8001602:	3b01      	subs	r3, #1
 8001604:	041b      	lsls	r3, r3, #16
 8001606:	431a      	orrs	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800160c:	061b      	lsls	r3, r3, #24
 800160e:	491b      	ldr	r1, [pc, #108]	@ (800167c <HAL_RCC_OscConfig+0x470>)
 8001610:	4313      	orrs	r3, r2
 8001612:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001614:	4b1b      	ldr	r3, [pc, #108]	@ (8001684 <HAL_RCC_OscConfig+0x478>)
 8001616:	2201      	movs	r2, #1
 8001618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161a:	f7ff fb2b 	bl	8000c74 <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001622:	f7ff fb27 	bl	8000c74 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e05c      	b.n	80016ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001634:	4b11      	ldr	r3, [pc, #68]	@ (800167c <HAL_RCC_OscConfig+0x470>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0f0      	beq.n	8001622 <HAL_RCC_OscConfig+0x416>
 8001640:	e054      	b.n	80016ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001642:	4b10      	ldr	r3, [pc, #64]	@ (8001684 <HAL_RCC_OscConfig+0x478>)
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001648:	f7ff fb14 	bl	8000c74 <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001650:	f7ff fb10 	bl	8000c74 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e045      	b.n	80016ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001662:	4b06      	ldr	r3, [pc, #24]	@ (800167c <HAL_RCC_OscConfig+0x470>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f0      	bne.n	8001650 <HAL_RCC_OscConfig+0x444>
 800166e:	e03d      	b.n	80016ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d107      	bne.n	8001688 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e038      	b.n	80016ee <HAL_RCC_OscConfig+0x4e2>
 800167c:	40023800 	.word	0x40023800
 8001680:	40007000 	.word	0x40007000
 8001684:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001688:	4b1b      	ldr	r3, [pc, #108]	@ (80016f8 <HAL_RCC_OscConfig+0x4ec>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d028      	beq.n	80016e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d121      	bne.n	80016e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d11a      	bne.n	80016e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80016b8:	4013      	ands	r3, r2
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80016be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d111      	bne.n	80016e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ce:	085b      	lsrs	r3, r3, #1
 80016d0:	3b01      	subs	r3, #1
 80016d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d107      	bne.n	80016e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d001      	beq.n	80016ec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e000      	b.n	80016ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3718      	adds	r7, #24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40023800 	.word	0x40023800

080016fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d101      	bne.n	8001710 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e0cc      	b.n	80018aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001710:	4b68      	ldr	r3, [pc, #416]	@ (80018b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0307 	and.w	r3, r3, #7
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	429a      	cmp	r2, r3
 800171c:	d90c      	bls.n	8001738 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171e:	4b65      	ldr	r3, [pc, #404]	@ (80018b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	b2d2      	uxtb	r2, r2
 8001724:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001726:	4b63      	ldr	r3, [pc, #396]	@ (80018b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	683a      	ldr	r2, [r7, #0]
 8001730:	429a      	cmp	r2, r3
 8001732:	d001      	beq.n	8001738 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e0b8      	b.n	80018aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d020      	beq.n	8001786 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0304 	and.w	r3, r3, #4
 800174c:	2b00      	cmp	r3, #0
 800174e:	d005      	beq.n	800175c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001750:	4b59      	ldr	r3, [pc, #356]	@ (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	4a58      	ldr	r2, [pc, #352]	@ (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001756:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800175a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0308 	and.w	r3, r3, #8
 8001764:	2b00      	cmp	r3, #0
 8001766:	d005      	beq.n	8001774 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001768:	4b53      	ldr	r3, [pc, #332]	@ (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	4a52      	ldr	r2, [pc, #328]	@ (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 800176e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001772:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001774:	4b50      	ldr	r3, [pc, #320]	@ (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	494d      	ldr	r1, [pc, #308]	@ (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	4313      	orrs	r3, r2
 8001784:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	2b00      	cmp	r3, #0
 8001790:	d044      	beq.n	800181c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d107      	bne.n	80017aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800179a:	4b47      	ldr	r3, [pc, #284]	@ (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d119      	bne.n	80017da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e07f      	b.n	80018aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d003      	beq.n	80017ba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017b6:	2b03      	cmp	r3, #3
 80017b8:	d107      	bne.n	80017ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ba:	4b3f      	ldr	r3, [pc, #252]	@ (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d109      	bne.n	80017da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e06f      	b.n	80018aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ca:	4b3b      	ldr	r3, [pc, #236]	@ (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d101      	bne.n	80017da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e067      	b.n	80018aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017da:	4b37      	ldr	r3, [pc, #220]	@ (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f023 0203 	bic.w	r2, r3, #3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	4934      	ldr	r1, [pc, #208]	@ (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 80017e8:	4313      	orrs	r3, r2
 80017ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017ec:	f7ff fa42 	bl	8000c74 <HAL_GetTick>
 80017f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017f2:	e00a      	b.n	800180a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017f4:	f7ff fa3e 	bl	8000c74 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001802:	4293      	cmp	r3, r2
 8001804:	d901      	bls.n	800180a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e04f      	b.n	80018aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800180a:	4b2b      	ldr	r3, [pc, #172]	@ (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f003 020c 	and.w	r2, r3, #12
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	429a      	cmp	r2, r3
 800181a:	d1eb      	bne.n	80017f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800181c:	4b25      	ldr	r3, [pc, #148]	@ (80018b4 <HAL_RCC_ClockConfig+0x1b8>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0307 	and.w	r3, r3, #7
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	429a      	cmp	r2, r3
 8001828:	d20c      	bcs.n	8001844 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800182a:	4b22      	ldr	r3, [pc, #136]	@ (80018b4 <HAL_RCC_ClockConfig+0x1b8>)
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001832:	4b20      	ldr	r3, [pc, #128]	@ (80018b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	683a      	ldr	r2, [r7, #0]
 800183c:	429a      	cmp	r2, r3
 800183e:	d001      	beq.n	8001844 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e032      	b.n	80018aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0304 	and.w	r3, r3, #4
 800184c:	2b00      	cmp	r3, #0
 800184e:	d008      	beq.n	8001862 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001850:	4b19      	ldr	r3, [pc, #100]	@ (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	4916      	ldr	r1, [pc, #88]	@ (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 800185e:	4313      	orrs	r3, r2
 8001860:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0308 	and.w	r3, r3, #8
 800186a:	2b00      	cmp	r3, #0
 800186c:	d009      	beq.n	8001882 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800186e:	4b12      	ldr	r3, [pc, #72]	@ (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	490e      	ldr	r1, [pc, #56]	@ (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 800187e:	4313      	orrs	r3, r2
 8001880:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001882:	f000 f821 	bl	80018c8 <HAL_RCC_GetSysClockFreq>
 8001886:	4602      	mov	r2, r0
 8001888:	4b0b      	ldr	r3, [pc, #44]	@ (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	091b      	lsrs	r3, r3, #4
 800188e:	f003 030f 	and.w	r3, r3, #15
 8001892:	490a      	ldr	r1, [pc, #40]	@ (80018bc <HAL_RCC_ClockConfig+0x1c0>)
 8001894:	5ccb      	ldrb	r3, [r1, r3]
 8001896:	fa22 f303 	lsr.w	r3, r2, r3
 800189a:	4a09      	ldr	r2, [pc, #36]	@ (80018c0 <HAL_RCC_ClockConfig+0x1c4>)
 800189c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800189e:	4b09      	ldr	r3, [pc, #36]	@ (80018c4 <HAL_RCC_ClockConfig+0x1c8>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff f9a2 	bl	8000bec <HAL_InitTick>

  return HAL_OK;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40023c00 	.word	0x40023c00
 80018b8:	40023800 	.word	0x40023800
 80018bc:	08002134 	.word	0x08002134
 80018c0:	20000000 	.word	0x20000000
 80018c4:	20000004 	.word	0x20000004

080018c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018cc:	b094      	sub	sp, #80	@ 0x50
 80018ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80018d0:	2300      	movs	r3, #0
 80018d2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80018d4:	2300      	movs	r3, #0
 80018d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80018d8:	2300      	movs	r3, #0
 80018da:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80018dc:	2300      	movs	r3, #0
 80018de:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018e0:	4b79      	ldr	r3, [pc, #484]	@ (8001ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f003 030c 	and.w	r3, r3, #12
 80018e8:	2b08      	cmp	r3, #8
 80018ea:	d00d      	beq.n	8001908 <HAL_RCC_GetSysClockFreq+0x40>
 80018ec:	2b08      	cmp	r3, #8
 80018ee:	f200 80e1 	bhi.w	8001ab4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d002      	beq.n	80018fc <HAL_RCC_GetSysClockFreq+0x34>
 80018f6:	2b04      	cmp	r3, #4
 80018f8:	d003      	beq.n	8001902 <HAL_RCC_GetSysClockFreq+0x3a>
 80018fa:	e0db      	b.n	8001ab4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018fc:	4b73      	ldr	r3, [pc, #460]	@ (8001acc <HAL_RCC_GetSysClockFreq+0x204>)
 80018fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001900:	e0db      	b.n	8001aba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001902:	4b73      	ldr	r3, [pc, #460]	@ (8001ad0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001904:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001906:	e0d8      	b.n	8001aba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001908:	4b6f      	ldr	r3, [pc, #444]	@ (8001ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001910:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001912:	4b6d      	ldr	r3, [pc, #436]	@ (8001ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d063      	beq.n	80019e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800191e:	4b6a      	ldr	r3, [pc, #424]	@ (8001ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	099b      	lsrs	r3, r3, #6
 8001924:	2200      	movs	r2, #0
 8001926:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001928:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800192a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800192c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001930:	633b      	str	r3, [r7, #48]	@ 0x30
 8001932:	2300      	movs	r3, #0
 8001934:	637b      	str	r3, [r7, #52]	@ 0x34
 8001936:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800193a:	4622      	mov	r2, r4
 800193c:	462b      	mov	r3, r5
 800193e:	f04f 0000 	mov.w	r0, #0
 8001942:	f04f 0100 	mov.w	r1, #0
 8001946:	0159      	lsls	r1, r3, #5
 8001948:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800194c:	0150      	lsls	r0, r2, #5
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	4621      	mov	r1, r4
 8001954:	1a51      	subs	r1, r2, r1
 8001956:	6139      	str	r1, [r7, #16]
 8001958:	4629      	mov	r1, r5
 800195a:	eb63 0301 	sbc.w	r3, r3, r1
 800195e:	617b      	str	r3, [r7, #20]
 8001960:	f04f 0200 	mov.w	r2, #0
 8001964:	f04f 0300 	mov.w	r3, #0
 8001968:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800196c:	4659      	mov	r1, fp
 800196e:	018b      	lsls	r3, r1, #6
 8001970:	4651      	mov	r1, sl
 8001972:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001976:	4651      	mov	r1, sl
 8001978:	018a      	lsls	r2, r1, #6
 800197a:	4651      	mov	r1, sl
 800197c:	ebb2 0801 	subs.w	r8, r2, r1
 8001980:	4659      	mov	r1, fp
 8001982:	eb63 0901 	sbc.w	r9, r3, r1
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	f04f 0300 	mov.w	r3, #0
 800198e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001992:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001996:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800199a:	4690      	mov	r8, r2
 800199c:	4699      	mov	r9, r3
 800199e:	4623      	mov	r3, r4
 80019a0:	eb18 0303 	adds.w	r3, r8, r3
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	462b      	mov	r3, r5
 80019a8:	eb49 0303 	adc.w	r3, r9, r3
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	f04f 0300 	mov.w	r3, #0
 80019b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019ba:	4629      	mov	r1, r5
 80019bc:	024b      	lsls	r3, r1, #9
 80019be:	4621      	mov	r1, r4
 80019c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019c4:	4621      	mov	r1, r4
 80019c6:	024a      	lsls	r2, r1, #9
 80019c8:	4610      	mov	r0, r2
 80019ca:	4619      	mov	r1, r3
 80019cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019ce:	2200      	movs	r2, #0
 80019d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80019d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80019d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80019d8:	f7fe fbfe 	bl	80001d8 <__aeabi_uldivmod>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4613      	mov	r3, r2
 80019e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80019e4:	e058      	b.n	8001a98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019e6:	4b38      	ldr	r3, [pc, #224]	@ (8001ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	099b      	lsrs	r3, r3, #6
 80019ec:	2200      	movs	r2, #0
 80019ee:	4618      	mov	r0, r3
 80019f0:	4611      	mov	r1, r2
 80019f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019f6:	623b      	str	r3, [r7, #32]
 80019f8:	2300      	movs	r3, #0
 80019fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80019fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a00:	4642      	mov	r2, r8
 8001a02:	464b      	mov	r3, r9
 8001a04:	f04f 0000 	mov.w	r0, #0
 8001a08:	f04f 0100 	mov.w	r1, #0
 8001a0c:	0159      	lsls	r1, r3, #5
 8001a0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a12:	0150      	lsls	r0, r2, #5
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4641      	mov	r1, r8
 8001a1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a1e:	4649      	mov	r1, r9
 8001a20:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a24:	f04f 0200 	mov.w	r2, #0
 8001a28:	f04f 0300 	mov.w	r3, #0
 8001a2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a38:	ebb2 040a 	subs.w	r4, r2, sl
 8001a3c:	eb63 050b 	sbc.w	r5, r3, fp
 8001a40:	f04f 0200 	mov.w	r2, #0
 8001a44:	f04f 0300 	mov.w	r3, #0
 8001a48:	00eb      	lsls	r3, r5, #3
 8001a4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a4e:	00e2      	lsls	r2, r4, #3
 8001a50:	4614      	mov	r4, r2
 8001a52:	461d      	mov	r5, r3
 8001a54:	4643      	mov	r3, r8
 8001a56:	18e3      	adds	r3, r4, r3
 8001a58:	603b      	str	r3, [r7, #0]
 8001a5a:	464b      	mov	r3, r9
 8001a5c:	eb45 0303 	adc.w	r3, r5, r3
 8001a60:	607b      	str	r3, [r7, #4]
 8001a62:	f04f 0200 	mov.w	r2, #0
 8001a66:	f04f 0300 	mov.w	r3, #0
 8001a6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a6e:	4629      	mov	r1, r5
 8001a70:	028b      	lsls	r3, r1, #10
 8001a72:	4621      	mov	r1, r4
 8001a74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a78:	4621      	mov	r1, r4
 8001a7a:	028a      	lsls	r2, r1, #10
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	4619      	mov	r1, r3
 8001a80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a82:	2200      	movs	r2, #0
 8001a84:	61bb      	str	r3, [r7, #24]
 8001a86:	61fa      	str	r2, [r7, #28]
 8001a88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a8c:	f7fe fba4 	bl	80001d8 <__aeabi_uldivmod>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4613      	mov	r3, r2
 8001a96:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001a98:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	0c1b      	lsrs	r3, r3, #16
 8001a9e:	f003 0303 	and.w	r3, r3, #3
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001aa8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001aaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ab2:	e002      	b.n	8001aba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ab4:	4b05      	ldr	r3, [pc, #20]	@ (8001acc <HAL_RCC_GetSysClockFreq+0x204>)
 8001ab6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ab8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3750      	adds	r7, #80	@ 0x50
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	00f42400 	.word	0x00f42400
 8001ad0:	007a1200 	.word	0x007a1200

08001ad4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ad8:	4b03      	ldr	r3, [pc, #12]	@ (8001ae8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ada:	681b      	ldr	r3, [r3, #0]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	20000000 	.word	0x20000000

08001aec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001af0:	f7ff fff0 	bl	8001ad4 <HAL_RCC_GetHCLKFreq>
 8001af4:	4602      	mov	r2, r0
 8001af6:	4b05      	ldr	r3, [pc, #20]	@ (8001b0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	0a9b      	lsrs	r3, r3, #10
 8001afc:	f003 0307 	and.w	r3, r3, #7
 8001b00:	4903      	ldr	r1, [pc, #12]	@ (8001b10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b02:	5ccb      	ldrb	r3, [r1, r3]
 8001b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	08002144 	.word	0x08002144

08001b14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b18:	f7ff ffdc 	bl	8001ad4 <HAL_RCC_GetHCLKFreq>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	4b05      	ldr	r3, [pc, #20]	@ (8001b34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	0b5b      	lsrs	r3, r3, #13
 8001b24:	f003 0307 	and.w	r3, r3, #7
 8001b28:	4903      	ldr	r1, [pc, #12]	@ (8001b38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b2a:	5ccb      	ldrb	r3, [r1, r3]
 8001b2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40023800 	.word	0x40023800
 8001b38:	08002144 	.word	0x08002144

08001b3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e042      	b.n	8001bd4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d106      	bne.n	8001b68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7fe ff6c 	bl	8000a40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2224      	movs	r2, #36	@ 0x24
 8001b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68da      	ldr	r2, [r3, #12]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001b7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 f82b 	bl	8001bdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	691a      	ldr	r2, [r3, #16]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001b94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	695a      	ldr	r2, [r3, #20]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001ba4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68da      	ldr	r2, [r3, #12]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001bb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2220      	movs	r2, #32
 8001bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2220      	movs	r2, #32
 8001bc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001be0:	b0c0      	sub	sp, #256	@ 0x100
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bf8:	68d9      	ldr	r1, [r3, #12]
 8001bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	ea40 0301 	orr.w	r3, r0, r1
 8001c04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	431a      	orrs	r2, r3
 8001c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001c34:	f021 010c 	bic.w	r1, r1, #12
 8001c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001c42:	430b      	orrs	r3, r1
 8001c44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c56:	6999      	ldr	r1, [r3, #24]
 8001c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	ea40 0301 	orr.w	r3, r0, r1
 8001c62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	4b8f      	ldr	r3, [pc, #572]	@ (8001ea8 <UART_SetConfig+0x2cc>)
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d005      	beq.n	8001c7c <UART_SetConfig+0xa0>
 8001c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	4b8d      	ldr	r3, [pc, #564]	@ (8001eac <UART_SetConfig+0x2d0>)
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d104      	bne.n	8001c86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001c7c:	f7ff ff4a 	bl	8001b14 <HAL_RCC_GetPCLK2Freq>
 8001c80:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001c84:	e003      	b.n	8001c8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001c86:	f7ff ff31 	bl	8001aec <HAL_RCC_GetPCLK1Freq>
 8001c8a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c92:	69db      	ldr	r3, [r3, #28]
 8001c94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c98:	f040 810c 	bne.w	8001eb4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001c9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001ca6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001caa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001cae:	4622      	mov	r2, r4
 8001cb0:	462b      	mov	r3, r5
 8001cb2:	1891      	adds	r1, r2, r2
 8001cb4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001cb6:	415b      	adcs	r3, r3
 8001cb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001cba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001cbe:	4621      	mov	r1, r4
 8001cc0:	eb12 0801 	adds.w	r8, r2, r1
 8001cc4:	4629      	mov	r1, r5
 8001cc6:	eb43 0901 	adc.w	r9, r3, r1
 8001cca:	f04f 0200 	mov.w	r2, #0
 8001cce:	f04f 0300 	mov.w	r3, #0
 8001cd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cde:	4690      	mov	r8, r2
 8001ce0:	4699      	mov	r9, r3
 8001ce2:	4623      	mov	r3, r4
 8001ce4:	eb18 0303 	adds.w	r3, r8, r3
 8001ce8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001cec:	462b      	mov	r3, r5
 8001cee:	eb49 0303 	adc.w	r3, r9, r3
 8001cf2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001d02:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001d06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	18db      	adds	r3, r3, r3
 8001d0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8001d10:	4613      	mov	r3, r2
 8001d12:	eb42 0303 	adc.w	r3, r2, r3
 8001d16:	657b      	str	r3, [r7, #84]	@ 0x54
 8001d18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001d1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001d20:	f7fe fa5a 	bl	80001d8 <__aeabi_uldivmod>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	4b61      	ldr	r3, [pc, #388]	@ (8001eb0 <UART_SetConfig+0x2d4>)
 8001d2a:	fba3 2302 	umull	r2, r3, r3, r2
 8001d2e:	095b      	lsrs	r3, r3, #5
 8001d30:	011c      	lsls	r4, r3, #4
 8001d32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001d36:	2200      	movs	r2, #0
 8001d38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001d3c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001d40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001d44:	4642      	mov	r2, r8
 8001d46:	464b      	mov	r3, r9
 8001d48:	1891      	adds	r1, r2, r2
 8001d4a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001d4c:	415b      	adcs	r3, r3
 8001d4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001d54:	4641      	mov	r1, r8
 8001d56:	eb12 0a01 	adds.w	sl, r2, r1
 8001d5a:	4649      	mov	r1, r9
 8001d5c:	eb43 0b01 	adc.w	fp, r3, r1
 8001d60:	f04f 0200 	mov.w	r2, #0
 8001d64:	f04f 0300 	mov.w	r3, #0
 8001d68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001d6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001d70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d74:	4692      	mov	sl, r2
 8001d76:	469b      	mov	fp, r3
 8001d78:	4643      	mov	r3, r8
 8001d7a:	eb1a 0303 	adds.w	r3, sl, r3
 8001d7e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001d82:	464b      	mov	r3, r9
 8001d84:	eb4b 0303 	adc.w	r3, fp, r3
 8001d88:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001d98:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001d9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001da0:	460b      	mov	r3, r1
 8001da2:	18db      	adds	r3, r3, r3
 8001da4:	643b      	str	r3, [r7, #64]	@ 0x40
 8001da6:	4613      	mov	r3, r2
 8001da8:	eb42 0303 	adc.w	r3, r2, r3
 8001dac:	647b      	str	r3, [r7, #68]	@ 0x44
 8001dae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001db2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001db6:	f7fe fa0f 	bl	80001d8 <__aeabi_uldivmod>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	4611      	mov	r1, r2
 8001dc0:	4b3b      	ldr	r3, [pc, #236]	@ (8001eb0 <UART_SetConfig+0x2d4>)
 8001dc2:	fba3 2301 	umull	r2, r3, r3, r1
 8001dc6:	095b      	lsrs	r3, r3, #5
 8001dc8:	2264      	movs	r2, #100	@ 0x64
 8001dca:	fb02 f303 	mul.w	r3, r2, r3
 8001dce:	1acb      	subs	r3, r1, r3
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001dd6:	4b36      	ldr	r3, [pc, #216]	@ (8001eb0 <UART_SetConfig+0x2d4>)
 8001dd8:	fba3 2302 	umull	r2, r3, r3, r2
 8001ddc:	095b      	lsrs	r3, r3, #5
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001de4:	441c      	add	r4, r3
 8001de6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001dea:	2200      	movs	r2, #0
 8001dec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001df0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001df4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001df8:	4642      	mov	r2, r8
 8001dfa:	464b      	mov	r3, r9
 8001dfc:	1891      	adds	r1, r2, r2
 8001dfe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001e00:	415b      	adcs	r3, r3
 8001e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001e08:	4641      	mov	r1, r8
 8001e0a:	1851      	adds	r1, r2, r1
 8001e0c:	6339      	str	r1, [r7, #48]	@ 0x30
 8001e0e:	4649      	mov	r1, r9
 8001e10:	414b      	adcs	r3, r1
 8001e12:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e14:	f04f 0200 	mov.w	r2, #0
 8001e18:	f04f 0300 	mov.w	r3, #0
 8001e1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001e20:	4659      	mov	r1, fp
 8001e22:	00cb      	lsls	r3, r1, #3
 8001e24:	4651      	mov	r1, sl
 8001e26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e2a:	4651      	mov	r1, sl
 8001e2c:	00ca      	lsls	r2, r1, #3
 8001e2e:	4610      	mov	r0, r2
 8001e30:	4619      	mov	r1, r3
 8001e32:	4603      	mov	r3, r0
 8001e34:	4642      	mov	r2, r8
 8001e36:	189b      	adds	r3, r3, r2
 8001e38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001e3c:	464b      	mov	r3, r9
 8001e3e:	460a      	mov	r2, r1
 8001e40:	eb42 0303 	adc.w	r3, r2, r3
 8001e44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001e54:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001e58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	18db      	adds	r3, r3, r3
 8001e60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e62:	4613      	mov	r3, r2
 8001e64:	eb42 0303 	adc.w	r3, r2, r3
 8001e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001e6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001e72:	f7fe f9b1 	bl	80001d8 <__aeabi_uldivmod>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001eb0 <UART_SetConfig+0x2d4>)
 8001e7c:	fba3 1302 	umull	r1, r3, r3, r2
 8001e80:	095b      	lsrs	r3, r3, #5
 8001e82:	2164      	movs	r1, #100	@ 0x64
 8001e84:	fb01 f303 	mul.w	r3, r1, r3
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	3332      	adds	r3, #50	@ 0x32
 8001e8e:	4a08      	ldr	r2, [pc, #32]	@ (8001eb0 <UART_SetConfig+0x2d4>)
 8001e90:	fba2 2303 	umull	r2, r3, r2, r3
 8001e94:	095b      	lsrs	r3, r3, #5
 8001e96:	f003 0207 	and.w	r2, r3, #7
 8001e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4422      	add	r2, r4
 8001ea2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001ea4:	e106      	b.n	80020b4 <UART_SetConfig+0x4d8>
 8001ea6:	bf00      	nop
 8001ea8:	40011000 	.word	0x40011000
 8001eac:	40011400 	.word	0x40011400
 8001eb0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001eb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001ebe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001ec2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001ec6:	4642      	mov	r2, r8
 8001ec8:	464b      	mov	r3, r9
 8001eca:	1891      	adds	r1, r2, r2
 8001ecc:	6239      	str	r1, [r7, #32]
 8001ece:	415b      	adcs	r3, r3
 8001ed0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ed2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ed6:	4641      	mov	r1, r8
 8001ed8:	1854      	adds	r4, r2, r1
 8001eda:	4649      	mov	r1, r9
 8001edc:	eb43 0501 	adc.w	r5, r3, r1
 8001ee0:	f04f 0200 	mov.w	r2, #0
 8001ee4:	f04f 0300 	mov.w	r3, #0
 8001ee8:	00eb      	lsls	r3, r5, #3
 8001eea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001eee:	00e2      	lsls	r2, r4, #3
 8001ef0:	4614      	mov	r4, r2
 8001ef2:	461d      	mov	r5, r3
 8001ef4:	4643      	mov	r3, r8
 8001ef6:	18e3      	adds	r3, r4, r3
 8001ef8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001efc:	464b      	mov	r3, r9
 8001efe:	eb45 0303 	adc.w	r3, r5, r3
 8001f02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001f12:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001f16:	f04f 0200 	mov.w	r2, #0
 8001f1a:	f04f 0300 	mov.w	r3, #0
 8001f1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001f22:	4629      	mov	r1, r5
 8001f24:	008b      	lsls	r3, r1, #2
 8001f26:	4621      	mov	r1, r4
 8001f28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f2c:	4621      	mov	r1, r4
 8001f2e:	008a      	lsls	r2, r1, #2
 8001f30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001f34:	f7fe f950 	bl	80001d8 <__aeabi_uldivmod>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	4b60      	ldr	r3, [pc, #384]	@ (80020c0 <UART_SetConfig+0x4e4>)
 8001f3e:	fba3 2302 	umull	r2, r3, r3, r2
 8001f42:	095b      	lsrs	r3, r3, #5
 8001f44:	011c      	lsls	r4, r3, #4
 8001f46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001f50:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001f54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001f58:	4642      	mov	r2, r8
 8001f5a:	464b      	mov	r3, r9
 8001f5c:	1891      	adds	r1, r2, r2
 8001f5e:	61b9      	str	r1, [r7, #24]
 8001f60:	415b      	adcs	r3, r3
 8001f62:	61fb      	str	r3, [r7, #28]
 8001f64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f68:	4641      	mov	r1, r8
 8001f6a:	1851      	adds	r1, r2, r1
 8001f6c:	6139      	str	r1, [r7, #16]
 8001f6e:	4649      	mov	r1, r9
 8001f70:	414b      	adcs	r3, r1
 8001f72:	617b      	str	r3, [r7, #20]
 8001f74:	f04f 0200 	mov.w	r2, #0
 8001f78:	f04f 0300 	mov.w	r3, #0
 8001f7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f80:	4659      	mov	r1, fp
 8001f82:	00cb      	lsls	r3, r1, #3
 8001f84:	4651      	mov	r1, sl
 8001f86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f8a:	4651      	mov	r1, sl
 8001f8c:	00ca      	lsls	r2, r1, #3
 8001f8e:	4610      	mov	r0, r2
 8001f90:	4619      	mov	r1, r3
 8001f92:	4603      	mov	r3, r0
 8001f94:	4642      	mov	r2, r8
 8001f96:	189b      	adds	r3, r3, r2
 8001f98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001f9c:	464b      	mov	r3, r9
 8001f9e:	460a      	mov	r2, r1
 8001fa0:	eb42 0303 	adc.w	r3, r2, r3
 8001fa4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001fb2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001fb4:	f04f 0200 	mov.w	r2, #0
 8001fb8:	f04f 0300 	mov.w	r3, #0
 8001fbc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8001fc0:	4649      	mov	r1, r9
 8001fc2:	008b      	lsls	r3, r1, #2
 8001fc4:	4641      	mov	r1, r8
 8001fc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001fca:	4641      	mov	r1, r8
 8001fcc:	008a      	lsls	r2, r1, #2
 8001fce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001fd2:	f7fe f901 	bl	80001d8 <__aeabi_uldivmod>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	460b      	mov	r3, r1
 8001fda:	4611      	mov	r1, r2
 8001fdc:	4b38      	ldr	r3, [pc, #224]	@ (80020c0 <UART_SetConfig+0x4e4>)
 8001fde:	fba3 2301 	umull	r2, r3, r3, r1
 8001fe2:	095b      	lsrs	r3, r3, #5
 8001fe4:	2264      	movs	r2, #100	@ 0x64
 8001fe6:	fb02 f303 	mul.w	r3, r2, r3
 8001fea:	1acb      	subs	r3, r1, r3
 8001fec:	011b      	lsls	r3, r3, #4
 8001fee:	3332      	adds	r3, #50	@ 0x32
 8001ff0:	4a33      	ldr	r2, [pc, #204]	@ (80020c0 <UART_SetConfig+0x4e4>)
 8001ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff6:	095b      	lsrs	r3, r3, #5
 8001ff8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ffc:	441c      	add	r4, r3
 8001ffe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002002:	2200      	movs	r2, #0
 8002004:	673b      	str	r3, [r7, #112]	@ 0x70
 8002006:	677a      	str	r2, [r7, #116]	@ 0x74
 8002008:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800200c:	4642      	mov	r2, r8
 800200e:	464b      	mov	r3, r9
 8002010:	1891      	adds	r1, r2, r2
 8002012:	60b9      	str	r1, [r7, #8]
 8002014:	415b      	adcs	r3, r3
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800201c:	4641      	mov	r1, r8
 800201e:	1851      	adds	r1, r2, r1
 8002020:	6039      	str	r1, [r7, #0]
 8002022:	4649      	mov	r1, r9
 8002024:	414b      	adcs	r3, r1
 8002026:	607b      	str	r3, [r7, #4]
 8002028:	f04f 0200 	mov.w	r2, #0
 800202c:	f04f 0300 	mov.w	r3, #0
 8002030:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002034:	4659      	mov	r1, fp
 8002036:	00cb      	lsls	r3, r1, #3
 8002038:	4651      	mov	r1, sl
 800203a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800203e:	4651      	mov	r1, sl
 8002040:	00ca      	lsls	r2, r1, #3
 8002042:	4610      	mov	r0, r2
 8002044:	4619      	mov	r1, r3
 8002046:	4603      	mov	r3, r0
 8002048:	4642      	mov	r2, r8
 800204a:	189b      	adds	r3, r3, r2
 800204c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800204e:	464b      	mov	r3, r9
 8002050:	460a      	mov	r2, r1
 8002052:	eb42 0303 	adc.w	r3, r2, r3
 8002056:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	663b      	str	r3, [r7, #96]	@ 0x60
 8002062:	667a      	str	r2, [r7, #100]	@ 0x64
 8002064:	f04f 0200 	mov.w	r2, #0
 8002068:	f04f 0300 	mov.w	r3, #0
 800206c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002070:	4649      	mov	r1, r9
 8002072:	008b      	lsls	r3, r1, #2
 8002074:	4641      	mov	r1, r8
 8002076:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800207a:	4641      	mov	r1, r8
 800207c:	008a      	lsls	r2, r1, #2
 800207e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002082:	f7fe f8a9 	bl	80001d8 <__aeabi_uldivmod>
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	4b0d      	ldr	r3, [pc, #52]	@ (80020c0 <UART_SetConfig+0x4e4>)
 800208c:	fba3 1302 	umull	r1, r3, r3, r2
 8002090:	095b      	lsrs	r3, r3, #5
 8002092:	2164      	movs	r1, #100	@ 0x64
 8002094:	fb01 f303 	mul.w	r3, r1, r3
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	011b      	lsls	r3, r3, #4
 800209c:	3332      	adds	r3, #50	@ 0x32
 800209e:	4a08      	ldr	r2, [pc, #32]	@ (80020c0 <UART_SetConfig+0x4e4>)
 80020a0:	fba2 2303 	umull	r2, r3, r2, r3
 80020a4:	095b      	lsrs	r3, r3, #5
 80020a6:	f003 020f 	and.w	r2, r3, #15
 80020aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4422      	add	r2, r4
 80020b2:	609a      	str	r2, [r3, #8]
}
 80020b4:	bf00      	nop
 80020b6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80020ba:	46bd      	mov	sp, r7
 80020bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020c0:	51eb851f 	.word	0x51eb851f

080020c4 <memset>:
 80020c4:	4402      	add	r2, r0
 80020c6:	4603      	mov	r3, r0
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d100      	bne.n	80020ce <memset+0xa>
 80020cc:	4770      	bx	lr
 80020ce:	f803 1b01 	strb.w	r1, [r3], #1
 80020d2:	e7f9      	b.n	80020c8 <memset+0x4>

080020d4 <__libc_init_array>:
 80020d4:	b570      	push	{r4, r5, r6, lr}
 80020d6:	4d0d      	ldr	r5, [pc, #52]	@ (800210c <__libc_init_array+0x38>)
 80020d8:	4c0d      	ldr	r4, [pc, #52]	@ (8002110 <__libc_init_array+0x3c>)
 80020da:	1b64      	subs	r4, r4, r5
 80020dc:	10a4      	asrs	r4, r4, #2
 80020de:	2600      	movs	r6, #0
 80020e0:	42a6      	cmp	r6, r4
 80020e2:	d109      	bne.n	80020f8 <__libc_init_array+0x24>
 80020e4:	4d0b      	ldr	r5, [pc, #44]	@ (8002114 <__libc_init_array+0x40>)
 80020e6:	4c0c      	ldr	r4, [pc, #48]	@ (8002118 <__libc_init_array+0x44>)
 80020e8:	f000 f818 	bl	800211c <_init>
 80020ec:	1b64      	subs	r4, r4, r5
 80020ee:	10a4      	asrs	r4, r4, #2
 80020f0:	2600      	movs	r6, #0
 80020f2:	42a6      	cmp	r6, r4
 80020f4:	d105      	bne.n	8002102 <__libc_init_array+0x2e>
 80020f6:	bd70      	pop	{r4, r5, r6, pc}
 80020f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80020fc:	4798      	blx	r3
 80020fe:	3601      	adds	r6, #1
 8002100:	e7ee      	b.n	80020e0 <__libc_init_array+0xc>
 8002102:	f855 3b04 	ldr.w	r3, [r5], #4
 8002106:	4798      	blx	r3
 8002108:	3601      	adds	r6, #1
 800210a:	e7f2      	b.n	80020f2 <__libc_init_array+0x1e>
 800210c:	08002154 	.word	0x08002154
 8002110:	08002154 	.word	0x08002154
 8002114:	08002154 	.word	0x08002154
 8002118:	08002158 	.word	0x08002158

0800211c <_init>:
 800211c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800211e:	bf00      	nop
 8002120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002122:	bc08      	pop	{r3}
 8002124:	469e      	mov	lr, r3
 8002126:	4770      	bx	lr

08002128 <_fini>:
 8002128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800212a:	bf00      	nop
 800212c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800212e:	bc08      	pop	{r3}
 8002130:	469e      	mov	lr, r3
 8002132:	4770      	bx	lr

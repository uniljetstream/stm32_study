
5_DMA_USART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003520  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080036b8  080036b8  000046b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036e8  080036e8  00005014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080036e8  080036e8  000046e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036f0  080036f0  00005014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036f0  080036f0  000046f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080036f4  080036f4  000046f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080036f8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000014  0800370c  00005014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  0800370c  000050e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000844a  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016a0  00000000  00000000  0000d48e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d8  00000000  00000000  0000eb30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000053c  00000000  00000000  0000f208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001553e  00000000  00000000  0000f744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007f18  00000000  00000000  00024c82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085a9b  00000000  00000000  0002cb9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b2635  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b10  00000000  00000000  000b2678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000b4188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000014 	.word	0x20000014
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080036a0 	.word	0x080036a0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000018 	.word	0x20000018
 80001d4:	080036a0 	.word	0x080036a0

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001fc:	f000 b988 	b.w	8000510 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	468e      	mov	lr, r1
 8000220:	4604      	mov	r4, r0
 8000222:	4688      	mov	r8, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14a      	bne.n	80002be <__udivmoddi4+0xa6>
 8000228:	428a      	cmp	r2, r1
 800022a:	4617      	mov	r7, r2
 800022c:	d962      	bls.n	80002f4 <__udivmoddi4+0xdc>
 800022e:	fab2 f682 	clz	r6, r2
 8000232:	b14e      	cbz	r6, 8000248 <__udivmoddi4+0x30>
 8000234:	f1c6 0320 	rsb	r3, r6, #32
 8000238:	fa01 f806 	lsl.w	r8, r1, r6
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	40b7      	lsls	r7, r6
 8000242:	ea43 0808 	orr.w	r8, r3, r8
 8000246:	40b4      	lsls	r4, r6
 8000248:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800024c:	fa1f fc87 	uxth.w	ip, r7
 8000250:	fbb8 f1fe 	udiv	r1, r8, lr
 8000254:	0c23      	lsrs	r3, r4, #16
 8000256:	fb0e 8811 	mls	r8, lr, r1, r8
 800025a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800025e:	fb01 f20c 	mul.w	r2, r1, ip
 8000262:	429a      	cmp	r2, r3
 8000264:	d909      	bls.n	800027a <__udivmoddi4+0x62>
 8000266:	18fb      	adds	r3, r7, r3
 8000268:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800026c:	f080 80ea 	bcs.w	8000444 <__udivmoddi4+0x22c>
 8000270:	429a      	cmp	r2, r3
 8000272:	f240 80e7 	bls.w	8000444 <__udivmoddi4+0x22c>
 8000276:	3902      	subs	r1, #2
 8000278:	443b      	add	r3, r7
 800027a:	1a9a      	subs	r2, r3, r2
 800027c:	b2a3      	uxth	r3, r4
 800027e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000282:	fb0e 2210 	mls	r2, lr, r0, r2
 8000286:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028a:	fb00 fc0c 	mul.w	ip, r0, ip
 800028e:	459c      	cmp	ip, r3
 8000290:	d909      	bls.n	80002a6 <__udivmoddi4+0x8e>
 8000292:	18fb      	adds	r3, r7, r3
 8000294:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000298:	f080 80d6 	bcs.w	8000448 <__udivmoddi4+0x230>
 800029c:	459c      	cmp	ip, r3
 800029e:	f240 80d3 	bls.w	8000448 <__udivmoddi4+0x230>
 80002a2:	443b      	add	r3, r7
 80002a4:	3802      	subs	r0, #2
 80002a6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002aa:	eba3 030c 	sub.w	r3, r3, ip
 80002ae:	2100      	movs	r1, #0
 80002b0:	b11d      	cbz	r5, 80002ba <__udivmoddi4+0xa2>
 80002b2:	40f3      	lsrs	r3, r6
 80002b4:	2200      	movs	r2, #0
 80002b6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d905      	bls.n	80002ce <__udivmoddi4+0xb6>
 80002c2:	b10d      	cbz	r5, 80002c8 <__udivmoddi4+0xb0>
 80002c4:	e9c5 0100 	strd	r0, r1, [r5]
 80002c8:	2100      	movs	r1, #0
 80002ca:	4608      	mov	r0, r1
 80002cc:	e7f5      	b.n	80002ba <__udivmoddi4+0xa2>
 80002ce:	fab3 f183 	clz	r1, r3
 80002d2:	2900      	cmp	r1, #0
 80002d4:	d146      	bne.n	8000364 <__udivmoddi4+0x14c>
 80002d6:	4573      	cmp	r3, lr
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xc8>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 8105 	bhi.w	80004ea <__udivmoddi4+0x2d2>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4690      	mov	r8, r2
 80002ea:	2d00      	cmp	r5, #0
 80002ec:	d0e5      	beq.n	80002ba <__udivmoddi4+0xa2>
 80002ee:	e9c5 4800 	strd	r4, r8, [r5]
 80002f2:	e7e2      	b.n	80002ba <__udivmoddi4+0xa2>
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f000 8090 	beq.w	800041a <__udivmoddi4+0x202>
 80002fa:	fab2 f682 	clz	r6, r2
 80002fe:	2e00      	cmp	r6, #0
 8000300:	f040 80a4 	bne.w	800044c <__udivmoddi4+0x234>
 8000304:	1a8a      	subs	r2, r1, r2
 8000306:	0c03      	lsrs	r3, r0, #16
 8000308:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800030c:	b280      	uxth	r0, r0
 800030e:	b2bc      	uxth	r4, r7
 8000310:	2101      	movs	r1, #1
 8000312:	fbb2 fcfe 	udiv	ip, r2, lr
 8000316:	fb0e 221c 	mls	r2, lr, ip, r2
 800031a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800031e:	fb04 f20c 	mul.w	r2, r4, ip
 8000322:	429a      	cmp	r2, r3
 8000324:	d907      	bls.n	8000336 <__udivmoddi4+0x11e>
 8000326:	18fb      	adds	r3, r7, r3
 8000328:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800032c:	d202      	bcs.n	8000334 <__udivmoddi4+0x11c>
 800032e:	429a      	cmp	r2, r3
 8000330:	f200 80e0 	bhi.w	80004f4 <__udivmoddi4+0x2dc>
 8000334:	46c4      	mov	ip, r8
 8000336:	1a9b      	subs	r3, r3, r2
 8000338:	fbb3 f2fe 	udiv	r2, r3, lr
 800033c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000340:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000344:	fb02 f404 	mul.w	r4, r2, r4
 8000348:	429c      	cmp	r4, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x144>
 800034c:	18fb      	adds	r3, r7, r3
 800034e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x142>
 8000354:	429c      	cmp	r4, r3
 8000356:	f200 80ca 	bhi.w	80004ee <__udivmoddi4+0x2d6>
 800035a:	4602      	mov	r2, r0
 800035c:	1b1b      	subs	r3, r3, r4
 800035e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0x98>
 8000364:	f1c1 0620 	rsb	r6, r1, #32
 8000368:	408b      	lsls	r3, r1
 800036a:	fa22 f706 	lsr.w	r7, r2, r6
 800036e:	431f      	orrs	r7, r3
 8000370:	fa0e f401 	lsl.w	r4, lr, r1
 8000374:	fa20 f306 	lsr.w	r3, r0, r6
 8000378:	fa2e fe06 	lsr.w	lr, lr, r6
 800037c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000380:	4323      	orrs	r3, r4
 8000382:	fa00 f801 	lsl.w	r8, r0, r1
 8000386:	fa1f fc87 	uxth.w	ip, r7
 800038a:	fbbe f0f9 	udiv	r0, lr, r9
 800038e:	0c1c      	lsrs	r4, r3, #16
 8000390:	fb09 ee10 	mls	lr, r9, r0, lr
 8000394:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000398:	fb00 fe0c 	mul.w	lr, r0, ip
 800039c:	45a6      	cmp	lr, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x1a0>
 80003a4:	193c      	adds	r4, r7, r4
 80003a6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003aa:	f080 809c 	bcs.w	80004e6 <__udivmoddi4+0x2ce>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f240 8099 	bls.w	80004e6 <__udivmoddi4+0x2ce>
 80003b4:	3802      	subs	r0, #2
 80003b6:	443c      	add	r4, r7
 80003b8:	eba4 040e 	sub.w	r4, r4, lr
 80003bc:	fa1f fe83 	uxth.w	lr, r3
 80003c0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c4:	fb09 4413 	mls	r4, r9, r3, r4
 80003c8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003cc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d0:	45a4      	cmp	ip, r4
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1ce>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003da:	f080 8082 	bcs.w	80004e2 <__udivmoddi4+0x2ca>
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d97f      	bls.n	80004e2 <__udivmoddi4+0x2ca>
 80003e2:	3b02      	subs	r3, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f2:	4564      	cmp	r4, ip
 80003f4:	4673      	mov	r3, lr
 80003f6:	46e1      	mov	r9, ip
 80003f8:	d362      	bcc.n	80004c0 <__udivmoddi4+0x2a8>
 80003fa:	d05f      	beq.n	80004bc <__udivmoddi4+0x2a4>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x1fe>
 80003fe:	ebb8 0203 	subs.w	r2, r8, r3
 8000402:	eb64 0409 	sbc.w	r4, r4, r9
 8000406:	fa04 f606 	lsl.w	r6, r4, r6
 800040a:	fa22 f301 	lsr.w	r3, r2, r1
 800040e:	431e      	orrs	r6, r3
 8000410:	40cc      	lsrs	r4, r1
 8000412:	e9c5 6400 	strd	r6, r4, [r5]
 8000416:	2100      	movs	r1, #0
 8000418:	e74f      	b.n	80002ba <__udivmoddi4+0xa2>
 800041a:	fbb1 fcf2 	udiv	ip, r1, r2
 800041e:	0c01      	lsrs	r1, r0, #16
 8000420:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000424:	b280      	uxth	r0, r0
 8000426:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042a:	463b      	mov	r3, r7
 800042c:	4638      	mov	r0, r7
 800042e:	463c      	mov	r4, r7
 8000430:	46b8      	mov	r8, r7
 8000432:	46be      	mov	lr, r7
 8000434:	2620      	movs	r6, #32
 8000436:	fbb1 f1f7 	udiv	r1, r1, r7
 800043a:	eba2 0208 	sub.w	r2, r2, r8
 800043e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000442:	e766      	b.n	8000312 <__udivmoddi4+0xfa>
 8000444:	4601      	mov	r1, r0
 8000446:	e718      	b.n	800027a <__udivmoddi4+0x62>
 8000448:	4610      	mov	r0, r2
 800044a:	e72c      	b.n	80002a6 <__udivmoddi4+0x8e>
 800044c:	f1c6 0220 	rsb	r2, r6, #32
 8000450:	fa2e f302 	lsr.w	r3, lr, r2
 8000454:	40b7      	lsls	r7, r6
 8000456:	40b1      	lsls	r1, r6
 8000458:	fa20 f202 	lsr.w	r2, r0, r2
 800045c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000460:	430a      	orrs	r2, r1
 8000462:	fbb3 f8fe 	udiv	r8, r3, lr
 8000466:	b2bc      	uxth	r4, r7
 8000468:	fb0e 3318 	mls	r3, lr, r8, r3
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb08 f904 	mul.w	r9, r8, r4
 8000476:	40b0      	lsls	r0, r6
 8000478:	4589      	cmp	r9, r1
 800047a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800047e:	b280      	uxth	r0, r0
 8000480:	d93e      	bls.n	8000500 <__udivmoddi4+0x2e8>
 8000482:	1879      	adds	r1, r7, r1
 8000484:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000488:	d201      	bcs.n	800048e <__udivmoddi4+0x276>
 800048a:	4589      	cmp	r9, r1
 800048c:	d81f      	bhi.n	80004ce <__udivmoddi4+0x2b6>
 800048e:	eba1 0109 	sub.w	r1, r1, r9
 8000492:	fbb1 f9fe 	udiv	r9, r1, lr
 8000496:	fb09 f804 	mul.w	r8, r9, r4
 800049a:	fb0e 1119 	mls	r1, lr, r9, r1
 800049e:	b292      	uxth	r2, r2
 80004a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a4:	4542      	cmp	r2, r8
 80004a6:	d229      	bcs.n	80004fc <__udivmoddi4+0x2e4>
 80004a8:	18ba      	adds	r2, r7, r2
 80004aa:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004ae:	d2c4      	bcs.n	800043a <__udivmoddi4+0x222>
 80004b0:	4542      	cmp	r2, r8
 80004b2:	d2c2      	bcs.n	800043a <__udivmoddi4+0x222>
 80004b4:	f1a9 0102 	sub.w	r1, r9, #2
 80004b8:	443a      	add	r2, r7
 80004ba:	e7be      	b.n	800043a <__udivmoddi4+0x222>
 80004bc:	45f0      	cmp	r8, lr
 80004be:	d29d      	bcs.n	80003fc <__udivmoddi4+0x1e4>
 80004c0:	ebbe 0302 	subs.w	r3, lr, r2
 80004c4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c8:	3801      	subs	r0, #1
 80004ca:	46e1      	mov	r9, ip
 80004cc:	e796      	b.n	80003fc <__udivmoddi4+0x1e4>
 80004ce:	eba7 0909 	sub.w	r9, r7, r9
 80004d2:	4449      	add	r1, r9
 80004d4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004dc:	fb09 f804 	mul.w	r8, r9, r4
 80004e0:	e7db      	b.n	800049a <__udivmoddi4+0x282>
 80004e2:	4673      	mov	r3, lr
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1ce>
 80004e6:	4650      	mov	r0, sl
 80004e8:	e766      	b.n	80003b8 <__udivmoddi4+0x1a0>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e6fd      	b.n	80002ea <__udivmoddi4+0xd2>
 80004ee:	443b      	add	r3, r7
 80004f0:	3a02      	subs	r2, #2
 80004f2:	e733      	b.n	800035c <__udivmoddi4+0x144>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	443b      	add	r3, r7
 80004fa:	e71c      	b.n	8000336 <__udivmoddi4+0x11e>
 80004fc:	4649      	mov	r1, r9
 80004fe:	e79c      	b.n	800043a <__udivmoddi4+0x222>
 8000500:	eba1 0109 	sub.w	r1, r1, r9
 8000504:	46c4      	mov	ip, r8
 8000506:	fbb1 f9fe 	udiv	r9, r1, lr
 800050a:	fb09 f804 	mul.w	r8, r9, r4
 800050e:	e7c4      	b.n	800049a <__udivmoddi4+0x282>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART2)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a09      	ldr	r2, [pc, #36]	@ (8000548 <HAL_UART_RxCpltCallback+0x34>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d10c      	bne.n	8000540 <HAL_UART_RxCpltCallback+0x2c>
    {
        // 수신 플래그 설정
        flag_received = 1;
 8000526:	4b09      	ldr	r3, [pc, #36]	@ (800054c <HAL_UART_RxCpltCallback+0x38>)
 8000528:	2201      	movs	r2, #1
 800052a:	701a      	strb	r2, [r3, #0]
        last_receive_tick = HAL_GetTick();
 800052c:	f000 fb2e 	bl	8000b8c <HAL_GetTick>
 8000530:	4603      	mov	r3, r0
 8000532:	4a07      	ldr	r2, [pc, #28]	@ (8000550 <HAL_UART_RxCpltCallback+0x3c>)
 8000534:	6013      	str	r3, [r2, #0]

        // 다음 바이트 수신을 위해 DMA 재시작
        HAL_UART_Receive_DMA(&huart2, &receive_data, 1);
 8000536:	2201      	movs	r2, #1
 8000538:	4906      	ldr	r1, [pc, #24]	@ (8000554 <HAL_UART_RxCpltCallback+0x40>)
 800053a:	4807      	ldr	r0, [pc, #28]	@ (8000558 <HAL_UART_RxCpltCallback+0x44>)
 800053c:	f001 ff57 	bl	80023ee <HAL_UART_Receive_DMA>
    }
}
 8000540:	bf00      	nop
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	40004400 	.word	0x40004400
 800054c:	200000d9 	.word	0x200000d9
 8000550:	200000dc 	.word	0x200000dc
 8000554:	200000d8 	.word	0x200000d8
 8000558:	20000030 	.word	0x20000030

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b590      	push	{r4, r7, lr}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000562:	f000 faad 	bl	8000ac0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f859 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f000 f90b 	bl	8000784 <MX_GPIO_Init>
  MX_DMA_Init();
 800056e:	f000 f8e9 	bl	8000744 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000572:	f000 f8bd 	bl	80006f0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // DMA 수신 시작
  HAL_UART_Receive_DMA(&huart2, &receive_data, 1);
 8000576:	2201      	movs	r2, #1
 8000578:	4922      	ldr	r1, [pc, #136]	@ (8000604 <main+0xa8>)
 800057a:	4823      	ldr	r0, [pc, #140]	@ (8000608 <main+0xac>)
 800057c:	f001 ff37 	bl	80023ee <HAL_UART_Receive_DMA>

  uint32_t last_send_tick = 0;
 8000580:	2300      	movs	r3, #0
 8000582:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    uint32_t current_tick = HAL_GetTick();
 8000584:	f000 fb02 	bl	8000b8c <HAL_GetTick>
 8000588:	6038      	str	r0, [r7, #0]

    // 데이터를 받았으면 "recv" 출력
    if(flag_received == 1)
 800058a:	4b20      	ldr	r3, [pc, #128]	@ (800060c <main+0xb0>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	b2db      	uxtb	r3, r3
 8000590:	2b01      	cmp	r3, #1
 8000592:	d110      	bne.n	80005b6 <main+0x5a>
    {
        flag_received = 0;  // 플래그 리셋
 8000594:	4b1d      	ldr	r3, [pc, #116]	@ (800060c <main+0xb0>)
 8000596:	2200      	movs	r2, #0
 8000598:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit(&huart2, (uint8_t*)recv_msg, strlen(recv_msg), 100);
 800059a:	4b1d      	ldr	r3, [pc, #116]	@ (8000610 <main+0xb4>)
 800059c:	681c      	ldr	r4, [r3, #0]
 800059e:	4b1c      	ldr	r3, [pc, #112]	@ (8000610 <main+0xb4>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4618      	mov	r0, r3
 80005a4:	f7ff fe18 	bl	80001d8 <strlen>
 80005a8:	4603      	mov	r3, r0
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	2364      	movs	r3, #100	@ 0x64
 80005ae:	4621      	mov	r1, r4
 80005b0:	4815      	ldr	r0, [pc, #84]	@ (8000608 <main+0xac>)
 80005b2:	f001 fe91 	bl	80022d8 <HAL_UART_Transmit>
    }

    // 최근 500ms 이내에 수신이 없었고, 1초가 지났으면 "send" 출력
    if((current_tick - last_receive_tick > 500) && (current_tick - last_send_tick >= 1000))
 80005b6:	4b17      	ldr	r3, [pc, #92]	@ (8000614 <main+0xb8>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	683a      	ldr	r2, [r7, #0]
 80005bc:	1ad3      	subs	r3, r2, r3
 80005be:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80005c2:	d915      	bls.n	80005f0 <main+0x94>
 80005c4:	683a      	ldr	r2, [r7, #0]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	1ad3      	subs	r3, r2, r3
 80005ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80005ce:	d30f      	bcc.n	80005f0 <main+0x94>
    {
        HAL_UART_Transmit(&huart2, (uint8_t*)send_msg, strlen(send_msg), 100);
 80005d0:	4b11      	ldr	r3, [pc, #68]	@ (8000618 <main+0xbc>)
 80005d2:	681c      	ldr	r4, [r3, #0]
 80005d4:	4b10      	ldr	r3, [pc, #64]	@ (8000618 <main+0xbc>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4618      	mov	r0, r3
 80005da:	f7ff fdfd 	bl	80001d8 <strlen>
 80005de:	4603      	mov	r3, r0
 80005e0:	b29a      	uxth	r2, r3
 80005e2:	2364      	movs	r3, #100	@ 0x64
 80005e4:	4621      	mov	r1, r4
 80005e6:	4808      	ldr	r0, [pc, #32]	@ (8000608 <main+0xac>)
 80005e8:	f001 fe76 	bl	80022d8 <HAL_UART_Transmit>
        last_send_tick = current_tick;
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	607b      	str	r3, [r7, #4]
    }

    // 수신 직후에는 send 타이머 리셋
    if(current_tick - last_receive_tick <= 500)
 80005f0:	4b08      	ldr	r3, [pc, #32]	@ (8000614 <main+0xb8>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	683a      	ldr	r2, [r7, #0]
 80005f6:	1ad3      	subs	r3, r2, r3
 80005f8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80005fc:	d8c2      	bhi.n	8000584 <main+0x28>
    {
        last_send_tick = current_tick;
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	607b      	str	r3, [r7, #4]
  {
 8000602:	e7bf      	b.n	8000584 <main+0x28>
 8000604:	200000d8 	.word	0x200000d8
 8000608:	20000030 	.word	0x20000030
 800060c:	200000d9 	.word	0x200000d9
 8000610:	20000004 	.word	0x20000004
 8000614:	200000dc 	.word	0x200000dc
 8000618:	20000000 	.word	0x20000000

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	@ 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	@ 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f003 f80c 	bl	8003648 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	4b28      	ldr	r3, [pc, #160]	@ (80006e8 <SystemClock_Config+0xcc>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000648:	4a27      	ldr	r2, [pc, #156]	@ (80006e8 <SystemClock_Config+0xcc>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000650:	4b25      	ldr	r3, [pc, #148]	@ (80006e8 <SystemClock_Config+0xcc>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b22      	ldr	r3, [pc, #136]	@ (80006ec <SystemClock_Config+0xd0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a21      	ldr	r2, [pc, #132]	@ (80006ec <SystemClock_Config+0xd0>)
 8000666:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b1f      	ldr	r3, [pc, #124]	@ (80006ec <SystemClock_Config+0xd0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000678:	2302      	movs	r3, #2
 800067a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067c:	2301      	movs	r3, #1
 800067e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000680:	2310      	movs	r3, #16
 8000682:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000684:	2302      	movs	r3, #2
 8000686:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000688:	2300      	movs	r3, #0
 800068a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800068c:	2310      	movs	r3, #16
 800068e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000690:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000694:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000696:	2304      	movs	r3, #4
 8000698:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800069a:	2304      	movs	r3, #4
 800069c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069e:	f107 0320 	add.w	r3, r7, #32
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 f930 	bl	8001908 <HAL_RCC_OscConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006ae:	f000 f8d7 	bl	8000860 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b2:	230f      	movs	r3, #15
 80006b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b6:	2302      	movs	r3, #2
 80006b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2102      	movs	r1, #2
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 fb92 	bl	8001df8 <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006da:	f000 f8c1 	bl	8000860 <Error_Handler>
  }
}
 80006de:	bf00      	nop
 80006e0:	3750      	adds	r7, #80	@ 0x50
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006f4:	4b11      	ldr	r3, [pc, #68]	@ (800073c <MX_USART2_UART_Init+0x4c>)
 80006f6:	4a12      	ldr	r2, [pc, #72]	@ (8000740 <MX_USART2_UART_Init+0x50>)
 80006f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006fa:	4b10      	ldr	r3, [pc, #64]	@ (800073c <MX_USART2_UART_Init+0x4c>)
 80006fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000700:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000702:	4b0e      	ldr	r3, [pc, #56]	@ (800073c <MX_USART2_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000708:	4b0c      	ldr	r3, [pc, #48]	@ (800073c <MX_USART2_UART_Init+0x4c>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800070e:	4b0b      	ldr	r3, [pc, #44]	@ (800073c <MX_USART2_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000714:	4b09      	ldr	r3, [pc, #36]	@ (800073c <MX_USART2_UART_Init+0x4c>)
 8000716:	220c      	movs	r2, #12
 8000718:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071a:	4b08      	ldr	r3, [pc, #32]	@ (800073c <MX_USART2_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000720:	4b06      	ldr	r3, [pc, #24]	@ (800073c <MX_USART2_UART_Init+0x4c>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000726:	4805      	ldr	r0, [pc, #20]	@ (800073c <MX_USART2_UART_Init+0x4c>)
 8000728:	f001 fd86 	bl	8002238 <HAL_UART_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000732:	f000 f895 	bl	8000860 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000030 	.word	0x20000030
 8000740:	40004400 	.word	0x40004400

08000744 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	4b0c      	ldr	r3, [pc, #48]	@ (8000780 <MX_DMA_Init+0x3c>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	4a0b      	ldr	r2, [pc, #44]	@ (8000780 <MX_DMA_Init+0x3c>)
 8000754:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000758:	6313      	str	r3, [r2, #48]	@ 0x30
 800075a:	4b09      	ldr	r3, [pc, #36]	@ (8000780 <MX_DMA_Init+0x3c>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000766:	2200      	movs	r2, #0
 8000768:	2100      	movs	r1, #0
 800076a:	2010      	movs	r0, #16
 800076c:	f000 faf5 	bl	8000d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000770:	2010      	movs	r0, #16
 8000772:	f000 fb0e 	bl	8000d92 <HAL_NVIC_EnableIRQ>

}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40023800 	.word	0x40023800

08000784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08a      	sub	sp, #40	@ 0x28
 8000788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078a:	f107 0314 	add.w	r3, r7, #20
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	613b      	str	r3, [r7, #16]
 800079e:	4b2d      	ldr	r3, [pc, #180]	@ (8000854 <MX_GPIO_Init+0xd0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	4a2c      	ldr	r2, [pc, #176]	@ (8000854 <MX_GPIO_Init+0xd0>)
 80007a4:	f043 0304 	orr.w	r3, r3, #4
 80007a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007aa:	4b2a      	ldr	r3, [pc, #168]	@ (8000854 <MX_GPIO_Init+0xd0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	f003 0304 	and.w	r3, r3, #4
 80007b2:	613b      	str	r3, [r7, #16]
 80007b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	4b26      	ldr	r3, [pc, #152]	@ (8000854 <MX_GPIO_Init+0xd0>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	4a25      	ldr	r2, [pc, #148]	@ (8000854 <MX_GPIO_Init+0xd0>)
 80007c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c6:	4b23      	ldr	r3, [pc, #140]	@ (8000854 <MX_GPIO_Init+0xd0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000854 <MX_GPIO_Init+0xd0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	4a1e      	ldr	r2, [pc, #120]	@ (8000854 <MX_GPIO_Init+0xd0>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000854 <MX_GPIO_Init+0xd0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	4b18      	ldr	r3, [pc, #96]	@ (8000854 <MX_GPIO_Init+0xd0>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	4a17      	ldr	r2, [pc, #92]	@ (8000854 <MX_GPIO_Init+0xd0>)
 80007f8:	f043 0302 	orr.w	r3, r3, #2
 80007fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fe:	4b15      	ldr	r3, [pc, #84]	@ (8000854 <MX_GPIO_Init+0xd0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	2120      	movs	r1, #32
 800080e:	4812      	ldr	r0, [pc, #72]	@ (8000858 <MX_GPIO_Init+0xd4>)
 8000810:	f001 f860 	bl	80018d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000814:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000818:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800081a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800081e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	4619      	mov	r1, r3
 800082a:	480c      	ldr	r0, [pc, #48]	@ (800085c <MX_GPIO_Init+0xd8>)
 800082c:	f000 fece 	bl	80015cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000830:	2320      	movs	r3, #32
 8000832:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000834:	2301      	movs	r3, #1
 8000836:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083c:	2300      	movs	r3, #0
 800083e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	4619      	mov	r1, r3
 8000846:	4804      	ldr	r0, [pc, #16]	@ (8000858 <MX_GPIO_Init+0xd4>)
 8000848:	f000 fec0 	bl	80015cc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800084c:	bf00      	nop
 800084e:	3728      	adds	r7, #40	@ 0x28
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40023800 	.word	0x40023800
 8000858:	40020000 	.word	0x40020000
 800085c:	40020800 	.word	0x40020800

08000860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000864:	b672      	cpsid	i
}
 8000866:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000868:	bf00      	nop
 800086a:	e7fd      	b.n	8000868 <Error_Handler+0x8>

0800086c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	4b10      	ldr	r3, [pc, #64]	@ (80008b8 <HAL_MspInit+0x4c>)
 8000878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800087a:	4a0f      	ldr	r2, [pc, #60]	@ (80008b8 <HAL_MspInit+0x4c>)
 800087c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000880:	6453      	str	r3, [r2, #68]	@ 0x44
 8000882:	4b0d      	ldr	r3, [pc, #52]	@ (80008b8 <HAL_MspInit+0x4c>)
 8000884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000886:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	603b      	str	r3, [r7, #0]
 8000892:	4b09      	ldr	r3, [pc, #36]	@ (80008b8 <HAL_MspInit+0x4c>)
 8000894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000896:	4a08      	ldr	r2, [pc, #32]	@ (80008b8 <HAL_MspInit+0x4c>)
 8000898:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800089c:	6413      	str	r3, [r2, #64]	@ 0x40
 800089e:	4b06      	ldr	r3, [pc, #24]	@ (80008b8 <HAL_MspInit+0x4c>)
 80008a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008aa:	2007      	movs	r0, #7
 80008ac:	f000 fa4a 	bl	8000d44 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b0:	bf00      	nop
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40023800 	.word	0x40023800

080008bc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	@ 0x28
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a34      	ldr	r2, [pc, #208]	@ (80009ac <HAL_UART_MspInit+0xf0>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d162      	bne.n	80009a4 <HAL_UART_MspInit+0xe8>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	4b33      	ldr	r3, [pc, #204]	@ (80009b0 <HAL_UART_MspInit+0xf4>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e6:	4a32      	ldr	r2, [pc, #200]	@ (80009b0 <HAL_UART_MspInit+0xf4>)
 80008e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ee:	4b30      	ldr	r3, [pc, #192]	@ (80009b0 <HAL_UART_MspInit+0xf4>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	4b2c      	ldr	r3, [pc, #176]	@ (80009b0 <HAL_UART_MspInit+0xf4>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	4a2b      	ldr	r2, [pc, #172]	@ (80009b0 <HAL_UART_MspInit+0xf4>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6313      	str	r3, [r2, #48]	@ 0x30
 800090a:	4b29      	ldr	r3, [pc, #164]	@ (80009b0 <HAL_UART_MspInit+0xf4>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000916:	230c      	movs	r3, #12
 8000918:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000922:	2303      	movs	r3, #3
 8000924:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000926:	2307      	movs	r3, #7
 8000928:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	4619      	mov	r1, r3
 8000930:	4820      	ldr	r0, [pc, #128]	@ (80009b4 <HAL_UART_MspInit+0xf8>)
 8000932:	f000 fe4b 	bl	80015cc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000936:	4b20      	ldr	r3, [pc, #128]	@ (80009b8 <HAL_UART_MspInit+0xfc>)
 8000938:	4a20      	ldr	r2, [pc, #128]	@ (80009bc <HAL_UART_MspInit+0x100>)
 800093a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800093c:	4b1e      	ldr	r3, [pc, #120]	@ (80009b8 <HAL_UART_MspInit+0xfc>)
 800093e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000942:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000944:	4b1c      	ldr	r3, [pc, #112]	@ (80009b8 <HAL_UART_MspInit+0xfc>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800094a:	4b1b      	ldr	r3, [pc, #108]	@ (80009b8 <HAL_UART_MspInit+0xfc>)
 800094c:	2200      	movs	r2, #0
 800094e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000950:	4b19      	ldr	r3, [pc, #100]	@ (80009b8 <HAL_UART_MspInit+0xfc>)
 8000952:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000956:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000958:	4b17      	ldr	r3, [pc, #92]	@ (80009b8 <HAL_UART_MspInit+0xfc>)
 800095a:	2200      	movs	r2, #0
 800095c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800095e:	4b16      	ldr	r3, [pc, #88]	@ (80009b8 <HAL_UART_MspInit+0xfc>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000964:	4b14      	ldr	r3, [pc, #80]	@ (80009b8 <HAL_UART_MspInit+0xfc>)
 8000966:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800096a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800096c:	4b12      	ldr	r3, [pc, #72]	@ (80009b8 <HAL_UART_MspInit+0xfc>)
 800096e:	2200      	movs	r2, #0
 8000970:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000972:	4b11      	ldr	r3, [pc, #68]	@ (80009b8 <HAL_UART_MspInit+0xfc>)
 8000974:	2200      	movs	r2, #0
 8000976:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000978:	480f      	ldr	r0, [pc, #60]	@ (80009b8 <HAL_UART_MspInit+0xfc>)
 800097a:	f000 fa25 	bl	8000dc8 <HAL_DMA_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000984:	f7ff ff6c 	bl	8000860 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	4a0b      	ldr	r2, [pc, #44]	@ (80009b8 <HAL_UART_MspInit+0xfc>)
 800098c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800098e:	4a0a      	ldr	r2, [pc, #40]	@ (80009b8 <HAL_UART_MspInit+0xfc>)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000994:	2200      	movs	r2, #0
 8000996:	2100      	movs	r1, #0
 8000998:	2026      	movs	r0, #38	@ 0x26
 800099a:	f000 f9de 	bl	8000d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800099e:	2026      	movs	r0, #38	@ 0x26
 80009a0:	f000 f9f7 	bl	8000d92 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80009a4:	bf00      	nop
 80009a6:	3728      	adds	r7, #40	@ 0x28
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40004400 	.word	0x40004400
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40020000 	.word	0x40020000
 80009b8:	20000078 	.word	0x20000078
 80009bc:	40026088 	.word	0x40026088

080009c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <NMI_Handler+0x4>

080009c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <HardFault_Handler+0x4>

080009d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <MemManage_Handler+0x4>

080009d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <BusFault_Handler+0x4>

080009e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <UsageFault_Handler+0x4>

080009e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a16:	f000 f8a5 	bl	8000b64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
	...

08000a20 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000a24:	4802      	ldr	r0, [pc, #8]	@ (8000a30 <DMA1_Stream5_IRQHandler+0x10>)
 8000a26:	f000 fb67 	bl	80010f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000078 	.word	0x20000078

08000a34 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a38:	4802      	ldr	r0, [pc, #8]	@ (8000a44 <USART2_IRQHandler+0x10>)
 8000a3a:	f001 fcfd 	bl	8002438 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000030 	.word	0x20000030

08000a48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a4c:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <SystemInit+0x20>)
 8000a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a52:	4a05      	ldr	r2, [pc, #20]	@ (8000a68 <SystemInit+0x20>)
 8000a54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000aa4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a70:	f7ff ffea 	bl	8000a48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a74:	480c      	ldr	r0, [pc, #48]	@ (8000aa8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a76:	490d      	ldr	r1, [pc, #52]	@ (8000aac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a78:	4a0d      	ldr	r2, [pc, #52]	@ (8000ab0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a7c:	e002      	b.n	8000a84 <LoopCopyDataInit>

08000a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a82:	3304      	adds	r3, #4

08000a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a88:	d3f9      	bcc.n	8000a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a8c:	4c0a      	ldr	r4, [pc, #40]	@ (8000ab8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a90:	e001      	b.n	8000a96 <LoopFillZerobss>

08000a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a94:	3204      	adds	r2, #4

08000a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a98:	d3fb      	bcc.n	8000a92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a9a:	f002 fddd 	bl	8003658 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a9e:	f7ff fd5d 	bl	800055c <main>
  bx  lr    
 8000aa2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000aa4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aac:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000ab0:	080036f8 	.word	0x080036f8
  ldr r2, =_sbss
 8000ab4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000ab8:	200000e4 	.word	0x200000e4

08000abc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000abc:	e7fe      	b.n	8000abc <ADC_IRQHandler>
	...

08000ac0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ac4:	4b0e      	ldr	r3, [pc, #56]	@ (8000b00 <HAL_Init+0x40>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a0d      	ldr	r2, [pc, #52]	@ (8000b00 <HAL_Init+0x40>)
 8000aca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ace:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8000b00 <HAL_Init+0x40>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a0a      	ldr	r2, [pc, #40]	@ (8000b00 <HAL_Init+0x40>)
 8000ad6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ada:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000adc:	4b08      	ldr	r3, [pc, #32]	@ (8000b00 <HAL_Init+0x40>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a07      	ldr	r2, [pc, #28]	@ (8000b00 <HAL_Init+0x40>)
 8000ae2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ae6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae8:	2003      	movs	r0, #3
 8000aea:	f000 f92b 	bl	8000d44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aee:	2000      	movs	r0, #0
 8000af0:	f000 f808 	bl	8000b04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000af4:	f7ff feba 	bl	800086c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40023c00 	.word	0x40023c00

08000b04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b0c:	4b12      	ldr	r3, [pc, #72]	@ (8000b58 <HAL_InitTick+0x54>)
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	4b12      	ldr	r3, [pc, #72]	@ (8000b5c <HAL_InitTick+0x58>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	4619      	mov	r1, r3
 8000b16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b22:	4618      	mov	r0, r3
 8000b24:	f000 f943 	bl	8000dae <HAL_SYSTICK_Config>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	e00e      	b.n	8000b50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2b0f      	cmp	r3, #15
 8000b36:	d80a      	bhi.n	8000b4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	6879      	ldr	r1, [r7, #4]
 8000b3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b40:	f000 f90b 	bl	8000d5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b44:	4a06      	ldr	r2, [pc, #24]	@ (8000b60 <HAL_InitTick+0x5c>)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	e000      	b.n	8000b50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000008 	.word	0x20000008
 8000b5c:	20000010 	.word	0x20000010
 8000b60:	2000000c 	.word	0x2000000c

08000b64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b68:	4b06      	ldr	r3, [pc, #24]	@ (8000b84 <HAL_IncTick+0x20>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <HAL_IncTick+0x24>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4413      	add	r3, r2
 8000b74:	4a04      	ldr	r2, [pc, #16]	@ (8000b88 <HAL_IncTick+0x24>)
 8000b76:	6013      	str	r3, [r2, #0]
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	20000010 	.word	0x20000010
 8000b88:	200000e0 	.word	0x200000e0

08000b8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b90:	4b03      	ldr	r3, [pc, #12]	@ (8000ba0 <HAL_GetTick+0x14>)
 8000b92:	681b      	ldr	r3, [r3, #0]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	200000e0 	.word	0x200000e0

08000ba4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f003 0307 	and.w	r3, r3, #7
 8000bb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000be8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bba:	68ba      	ldr	r2, [r7, #8]
 8000bbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bcc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bd6:	4a04      	ldr	r2, [pc, #16]	@ (8000be8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	60d3      	str	r3, [r2, #12]
}
 8000bdc:	bf00      	nop
 8000bde:	3714      	adds	r7, #20
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf0:	4b04      	ldr	r3, [pc, #16]	@ (8000c04 <__NVIC_GetPriorityGrouping+0x18>)
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	0a1b      	lsrs	r3, r3, #8
 8000bf6:	f003 0307 	and.w	r3, r3, #7
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	db0b      	blt.n	8000c32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	f003 021f 	and.w	r2, r3, #31
 8000c20:	4907      	ldr	r1, [pc, #28]	@ (8000c40 <__NVIC_EnableIRQ+0x38>)
 8000c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c26:	095b      	lsrs	r3, r3, #5
 8000c28:	2001      	movs	r0, #1
 8000c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	e000e100 	.word	0xe000e100

08000c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	6039      	str	r1, [r7, #0]
 8000c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	db0a      	blt.n	8000c6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	b2da      	uxtb	r2, r3
 8000c5c:	490c      	ldr	r1, [pc, #48]	@ (8000c90 <__NVIC_SetPriority+0x4c>)
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	0112      	lsls	r2, r2, #4
 8000c64:	b2d2      	uxtb	r2, r2
 8000c66:	440b      	add	r3, r1
 8000c68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c6c:	e00a      	b.n	8000c84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	4908      	ldr	r1, [pc, #32]	@ (8000c94 <__NVIC_SetPriority+0x50>)
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	f003 030f 	and.w	r3, r3, #15
 8000c7a:	3b04      	subs	r3, #4
 8000c7c:	0112      	lsls	r2, r2, #4
 8000c7e:	b2d2      	uxtb	r2, r2
 8000c80:	440b      	add	r3, r1
 8000c82:	761a      	strb	r2, [r3, #24]
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000e100 	.word	0xe000e100
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b089      	sub	sp, #36	@ 0x24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	f1c3 0307 	rsb	r3, r3, #7
 8000cb2:	2b04      	cmp	r3, #4
 8000cb4:	bf28      	it	cs
 8000cb6:	2304      	movcs	r3, #4
 8000cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	3304      	adds	r3, #4
 8000cbe:	2b06      	cmp	r3, #6
 8000cc0:	d902      	bls.n	8000cc8 <NVIC_EncodePriority+0x30>
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3b03      	subs	r3, #3
 8000cc6:	e000      	b.n	8000cca <NVIC_EncodePriority+0x32>
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ccc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	43da      	mvns	r2, r3
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	401a      	ands	r2, r3
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cea:	43d9      	mvns	r1, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf0:	4313      	orrs	r3, r2
         );
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3724      	adds	r7, #36	@ 0x24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
	...

08000d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d10:	d301      	bcc.n	8000d16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d12:	2301      	movs	r3, #1
 8000d14:	e00f      	b.n	8000d36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d16:	4a0a      	ldr	r2, [pc, #40]	@ (8000d40 <SysTick_Config+0x40>)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d1e:	210f      	movs	r1, #15
 8000d20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d24:	f7ff ff8e 	bl	8000c44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d28:	4b05      	ldr	r3, [pc, #20]	@ (8000d40 <SysTick_Config+0x40>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d2e:	4b04      	ldr	r3, [pc, #16]	@ (8000d40 <SysTick_Config+0x40>)
 8000d30:	2207      	movs	r2, #7
 8000d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	e000e010 	.word	0xe000e010

08000d44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f7ff ff29 	bl	8000ba4 <__NVIC_SetPriorityGrouping>
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b086      	sub	sp, #24
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	4603      	mov	r3, r0
 8000d62:	60b9      	str	r1, [r7, #8]
 8000d64:	607a      	str	r2, [r7, #4]
 8000d66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d6c:	f7ff ff3e 	bl	8000bec <__NVIC_GetPriorityGrouping>
 8000d70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	68b9      	ldr	r1, [r7, #8]
 8000d76:	6978      	ldr	r0, [r7, #20]
 8000d78:	f7ff ff8e 	bl	8000c98 <NVIC_EncodePriority>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d82:	4611      	mov	r1, r2
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff ff5d 	bl	8000c44 <__NVIC_SetPriority>
}
 8000d8a:	bf00      	nop
 8000d8c:	3718      	adds	r7, #24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	4603      	mov	r3, r0
 8000d9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ff31 	bl	8000c08 <__NVIC_EnableIRQ>
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b082      	sub	sp, #8
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f7ff ffa2 	bl	8000d00 <SysTick_Config>
 8000dbc:	4603      	mov	r3, r0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
	...

08000dc8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000dd4:	f7ff feda 	bl	8000b8c <HAL_GetTick>
 8000dd8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d101      	bne.n	8000de4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000de0:	2301      	movs	r3, #1
 8000de2:	e099      	b.n	8000f18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2202      	movs	r2, #2
 8000de8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2200      	movs	r2, #0
 8000df0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f022 0201 	bic.w	r2, r2, #1
 8000e02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e04:	e00f      	b.n	8000e26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e06:	f7ff fec1 	bl	8000b8c <HAL_GetTick>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	2b05      	cmp	r3, #5
 8000e12:	d908      	bls.n	8000e26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2220      	movs	r2, #32
 8000e18:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8000e22:	2303      	movs	r3, #3
 8000e24:	e078      	b.n	8000f18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f003 0301 	and.w	r3, r3, #1
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d1e8      	bne.n	8000e06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000e3c:	697a      	ldr	r2, [r7, #20]
 8000e3e:	4b38      	ldr	r3, [pc, #224]	@ (8000f20 <HAL_DMA_Init+0x158>)
 8000e40:	4013      	ands	r3, r2
 8000e42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	685a      	ldr	r2, [r3, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	689b      	ldr	r3, [r3, #8]
 8000e4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	691b      	ldr	r3, [r3, #16]
 8000e58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6a1b      	ldr	r3, [r3, #32]
 8000e70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e72:	697a      	ldr	r2, [r7, #20]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e7c:	2b04      	cmp	r3, #4
 8000e7e:	d107      	bne.n	8000e90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	697a      	ldr	r2, [r7, #20]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	697a      	ldr	r2, [r7, #20]
 8000e96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	f023 0307 	bic.w	r3, r3, #7
 8000ea6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eac:	697a      	ldr	r2, [r7, #20]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eb6:	2b04      	cmp	r3, #4
 8000eb8:	d117      	bne.n	8000eea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ebe:	697a      	ldr	r2, [r7, #20]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d00e      	beq.n	8000eea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f000 fb01 	bl	80014d4 <DMA_CheckFifoParam>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d008      	beq.n	8000eea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2240      	movs	r2, #64	@ 0x40
 8000edc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e016      	b.n	8000f18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	697a      	ldr	r2, [r7, #20]
 8000ef0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f000 fab8 	bl	8001468 <DMA_CalcBaseAndBitshift>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f00:	223f      	movs	r2, #63	@ 0x3f
 8000f02:	409a      	lsls	r2, r3
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2201      	movs	r2, #1
 8000f12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8000f16:	2300      	movs	r3, #0
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3718      	adds	r7, #24
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	f010803f 	.word	0xf010803f

08000f24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
 8000f30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f32:	2300      	movs	r3, #0
 8000f34:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f3a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d101      	bne.n	8000f4a <HAL_DMA_Start_IT+0x26>
 8000f46:	2302      	movs	r3, #2
 8000f48:	e040      	b.n	8000fcc <HAL_DMA_Start_IT+0xa8>
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d12f      	bne.n	8000fbe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	2202      	movs	r2, #2
 8000f62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	68b9      	ldr	r1, [r7, #8]
 8000f72:	68f8      	ldr	r0, [r7, #12]
 8000f74:	f000 fa4a 	bl	800140c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f7c:	223f      	movs	r2, #63	@ 0x3f
 8000f7e:	409a      	lsls	r2, r3
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f042 0216 	orr.w	r2, r2, #22
 8000f92:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d007      	beq.n	8000fac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f042 0208 	orr.w	r2, r2, #8
 8000faa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f042 0201 	orr.w	r2, r2, #1
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	e005      	b.n	8000fca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000fca:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3718      	adds	r7, #24
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fe0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000fe2:	f7ff fdd3 	bl	8000b8c <HAL_GetTick>
 8000fe6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d008      	beq.n	8001006 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2280      	movs	r2, #128	@ 0x80
 8000ff8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e052      	b.n	80010ac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f022 0216 	bic.w	r2, r2, #22
 8001014:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	695a      	ldr	r2, [r3, #20]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001024:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102a:	2b00      	cmp	r3, #0
 800102c:	d103      	bne.n	8001036 <HAL_DMA_Abort+0x62>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001032:	2b00      	cmp	r3, #0
 8001034:	d007      	beq.n	8001046 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f022 0208 	bic.w	r2, r2, #8
 8001044:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f022 0201 	bic.w	r2, r2, #1
 8001054:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001056:	e013      	b.n	8001080 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001058:	f7ff fd98 	bl	8000b8c <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b05      	cmp	r3, #5
 8001064:	d90c      	bls.n	8001080 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2220      	movs	r2, #32
 800106a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2203      	movs	r2, #3
 8001070:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800107c:	2303      	movs	r3, #3
 800107e:	e015      	b.n	80010ac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1e4      	bne.n	8001058 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001092:	223f      	movs	r2, #63	@ 0x3f
 8001094:	409a      	lsls	r2, r3
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2201      	movs	r2, #1
 800109e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d004      	beq.n	80010d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2280      	movs	r2, #128	@ 0x80
 80010cc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e00c      	b.n	80010ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2205      	movs	r2, #5
 80010d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f022 0201 	bic.w	r2, r2, #1
 80010e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001100:	2300      	movs	r3, #0
 8001102:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001104:	4b8e      	ldr	r3, [pc, #568]	@ (8001340 <HAL_DMA_IRQHandler+0x248>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a8e      	ldr	r2, [pc, #568]	@ (8001344 <HAL_DMA_IRQHandler+0x24c>)
 800110a:	fba2 2303 	umull	r2, r3, r2, r3
 800110e:	0a9b      	lsrs	r3, r3, #10
 8001110:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001116:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001122:	2208      	movs	r2, #8
 8001124:	409a      	lsls	r2, r3
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	4013      	ands	r3, r2
 800112a:	2b00      	cmp	r3, #0
 800112c:	d01a      	beq.n	8001164 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0304 	and.w	r3, r3, #4
 8001138:	2b00      	cmp	r3, #0
 800113a:	d013      	beq.n	8001164 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f022 0204 	bic.w	r2, r2, #4
 800114a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001150:	2208      	movs	r2, #8
 8001152:	409a      	lsls	r2, r3
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800115c:	f043 0201 	orr.w	r2, r3, #1
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001168:	2201      	movs	r2, #1
 800116a:	409a      	lsls	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4013      	ands	r3, r2
 8001170:	2b00      	cmp	r3, #0
 8001172:	d012      	beq.n	800119a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800117e:	2b00      	cmp	r3, #0
 8001180:	d00b      	beq.n	800119a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001186:	2201      	movs	r2, #1
 8001188:	409a      	lsls	r2, r3
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001192:	f043 0202 	orr.w	r2, r3, #2
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800119e:	2204      	movs	r2, #4
 80011a0:	409a      	lsls	r2, r3
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	4013      	ands	r3, r2
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d012      	beq.n	80011d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0302 	and.w	r3, r3, #2
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d00b      	beq.n	80011d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011bc:	2204      	movs	r2, #4
 80011be:	409a      	lsls	r2, r3
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011c8:	f043 0204 	orr.w	r2, r3, #4
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011d4:	2210      	movs	r2, #16
 80011d6:	409a      	lsls	r2, r3
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4013      	ands	r3, r2
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d043      	beq.n	8001268 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0308 	and.w	r3, r3, #8
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d03c      	beq.n	8001268 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011f2:	2210      	movs	r2, #16
 80011f4:	409a      	lsls	r2, r3
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d018      	beq.n	800123a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d108      	bne.n	8001228 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121a:	2b00      	cmp	r3, #0
 800121c:	d024      	beq.n	8001268 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	4798      	blx	r3
 8001226:	e01f      	b.n	8001268 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800122c:	2b00      	cmp	r3, #0
 800122e:	d01b      	beq.n	8001268 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	4798      	blx	r3
 8001238:	e016      	b.n	8001268 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001244:	2b00      	cmp	r3, #0
 8001246:	d107      	bne.n	8001258 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f022 0208 	bic.w	r2, r2, #8
 8001256:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125c:	2b00      	cmp	r3, #0
 800125e:	d003      	beq.n	8001268 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800126c:	2220      	movs	r2, #32
 800126e:	409a      	lsls	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4013      	ands	r3, r2
 8001274:	2b00      	cmp	r3, #0
 8001276:	f000 808f 	beq.w	8001398 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0310 	and.w	r3, r3, #16
 8001284:	2b00      	cmp	r3, #0
 8001286:	f000 8087 	beq.w	8001398 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800128e:	2220      	movs	r2, #32
 8001290:	409a      	lsls	r2, r3
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800129c:	b2db      	uxtb	r3, r3
 800129e:	2b05      	cmp	r3, #5
 80012a0:	d136      	bne.n	8001310 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f022 0216 	bic.w	r2, r2, #22
 80012b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	695a      	ldr	r2, [r3, #20]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80012c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d103      	bne.n	80012d2 <HAL_DMA_IRQHandler+0x1da>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d007      	beq.n	80012e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f022 0208 	bic.w	r2, r2, #8
 80012e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012e6:	223f      	movs	r2, #63	@ 0x3f
 80012e8:	409a      	lsls	r2, r3
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2201      	movs	r2, #1
 80012f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001302:	2b00      	cmp	r3, #0
 8001304:	d07e      	beq.n	8001404 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	4798      	blx	r3
        }
        return;
 800130e:	e079      	b.n	8001404 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d01d      	beq.n	800135a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d10d      	bne.n	8001348 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001330:	2b00      	cmp	r3, #0
 8001332:	d031      	beq.n	8001398 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	4798      	blx	r3
 800133c:	e02c      	b.n	8001398 <HAL_DMA_IRQHandler+0x2a0>
 800133e:	bf00      	nop
 8001340:	20000008 	.word	0x20000008
 8001344:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800134c:	2b00      	cmp	r3, #0
 800134e:	d023      	beq.n	8001398 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	4798      	blx	r3
 8001358:	e01e      	b.n	8001398 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001364:	2b00      	cmp	r3, #0
 8001366:	d10f      	bne.n	8001388 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f022 0210 	bic.w	r2, r2, #16
 8001376:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2201      	movs	r2, #1
 800137c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800138c:	2b00      	cmp	r3, #0
 800138e:	d003      	beq.n	8001398 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800139c:	2b00      	cmp	r3, #0
 800139e:	d032      	beq.n	8001406 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d022      	beq.n	80013f2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2205      	movs	r2, #5
 80013b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f022 0201 	bic.w	r2, r2, #1
 80013c2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	3301      	adds	r3, #1
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	697a      	ldr	r2, [r7, #20]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d307      	bcc.n	80013e0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1f2      	bne.n	80013c4 <HAL_DMA_IRQHandler+0x2cc>
 80013de:	e000      	b.n	80013e2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80013e0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2201      	movs	r2, #1
 80013e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d005      	beq.n	8001406 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	4798      	blx	r3
 8001402:	e000      	b.n	8001406 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001404:	bf00      	nop
    }
  }
}
 8001406:	3718      	adds	r7, #24
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
 8001418:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001428:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	683a      	ldr	r2, [r7, #0]
 8001430:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	2b40      	cmp	r3, #64	@ 0x40
 8001438:	d108      	bne.n	800144c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	68ba      	ldr	r2, [r7, #8]
 8001448:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800144a:	e007      	b.n	800145c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	68ba      	ldr	r2, [r7, #8]
 8001452:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	60da      	str	r2, [r3, #12]
}
 800145c:	bf00      	nop
 800145e:	3714      	adds	r7, #20
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	3b10      	subs	r3, #16
 8001478:	4a14      	ldr	r2, [pc, #80]	@ (80014cc <DMA_CalcBaseAndBitshift+0x64>)
 800147a:	fba2 2303 	umull	r2, r3, r2, r3
 800147e:	091b      	lsrs	r3, r3, #4
 8001480:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001482:	4a13      	ldr	r2, [pc, #76]	@ (80014d0 <DMA_CalcBaseAndBitshift+0x68>)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4413      	add	r3, r2
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	461a      	mov	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2b03      	cmp	r3, #3
 8001494:	d909      	bls.n	80014aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800149e:	f023 0303 	bic.w	r3, r3, #3
 80014a2:	1d1a      	adds	r2, r3, #4
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	659a      	str	r2, [r3, #88]	@ 0x58
 80014a8:	e007      	b.n	80014ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80014b2:	f023 0303 	bic.w	r3, r3, #3
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3714      	adds	r7, #20
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	aaaaaaab 	.word	0xaaaaaaab
 80014d0:	080036e0 	.word	0x080036e0

080014d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014dc:	2300      	movs	r3, #0
 80014de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d11f      	bne.n	800152e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	2b03      	cmp	r3, #3
 80014f2:	d856      	bhi.n	80015a2 <DMA_CheckFifoParam+0xce>
 80014f4:	a201      	add	r2, pc, #4	@ (adr r2, 80014fc <DMA_CheckFifoParam+0x28>)
 80014f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014fa:	bf00      	nop
 80014fc:	0800150d 	.word	0x0800150d
 8001500:	0800151f 	.word	0x0800151f
 8001504:	0800150d 	.word	0x0800150d
 8001508:	080015a3 	.word	0x080015a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001510:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d046      	beq.n	80015a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800151c:	e043      	b.n	80015a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001522:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001526:	d140      	bne.n	80015aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800152c:	e03d      	b.n	80015aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001536:	d121      	bne.n	800157c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	2b03      	cmp	r3, #3
 800153c:	d837      	bhi.n	80015ae <DMA_CheckFifoParam+0xda>
 800153e:	a201      	add	r2, pc, #4	@ (adr r2, 8001544 <DMA_CheckFifoParam+0x70>)
 8001540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001544:	08001555 	.word	0x08001555
 8001548:	0800155b 	.word	0x0800155b
 800154c:	08001555 	.word	0x08001555
 8001550:	0800156d 	.word	0x0800156d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	73fb      	strb	r3, [r7, #15]
      break;
 8001558:	e030      	b.n	80015bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800155e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d025      	beq.n	80015b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800156a:	e022      	b.n	80015b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001570:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001574:	d11f      	bne.n	80015b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800157a:	e01c      	b.n	80015b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	2b02      	cmp	r3, #2
 8001580:	d903      	bls.n	800158a <DMA_CheckFifoParam+0xb6>
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	2b03      	cmp	r3, #3
 8001586:	d003      	beq.n	8001590 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001588:	e018      	b.n	80015bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	73fb      	strb	r3, [r7, #15]
      break;
 800158e:	e015      	b.n	80015bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001594:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d00e      	beq.n	80015ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	73fb      	strb	r3, [r7, #15]
      break;
 80015a0:	e00b      	b.n	80015ba <DMA_CheckFifoParam+0xe6>
      break;
 80015a2:	bf00      	nop
 80015a4:	e00a      	b.n	80015bc <DMA_CheckFifoParam+0xe8>
      break;
 80015a6:	bf00      	nop
 80015a8:	e008      	b.n	80015bc <DMA_CheckFifoParam+0xe8>
      break;
 80015aa:	bf00      	nop
 80015ac:	e006      	b.n	80015bc <DMA_CheckFifoParam+0xe8>
      break;
 80015ae:	bf00      	nop
 80015b0:	e004      	b.n	80015bc <DMA_CheckFifoParam+0xe8>
      break;
 80015b2:	bf00      	nop
 80015b4:	e002      	b.n	80015bc <DMA_CheckFifoParam+0xe8>
      break;   
 80015b6:	bf00      	nop
 80015b8:	e000      	b.n	80015bc <DMA_CheckFifoParam+0xe8>
      break;
 80015ba:	bf00      	nop
    }
  } 
  
  return status; 
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop

080015cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b089      	sub	sp, #36	@ 0x24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015da:	2300      	movs	r3, #0
 80015dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015de:	2300      	movs	r3, #0
 80015e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015e2:	2300      	movs	r3, #0
 80015e4:	61fb      	str	r3, [r7, #28]
 80015e6:	e159      	b.n	800189c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015e8:	2201      	movs	r2, #1
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	697a      	ldr	r2, [r7, #20]
 80015f8:	4013      	ands	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	429a      	cmp	r2, r3
 8001602:	f040 8148 	bne.w	8001896 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f003 0303 	and.w	r3, r3, #3
 800160e:	2b01      	cmp	r3, #1
 8001610:	d005      	beq.n	800161e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800161a:	2b02      	cmp	r3, #2
 800161c:	d130      	bne.n	8001680 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	2203      	movs	r2, #3
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	43db      	mvns	r3, r3
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	4013      	ands	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	68da      	ldr	r2, [r3, #12]
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4313      	orrs	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001654:	2201      	movs	r2, #1
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4013      	ands	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	091b      	lsrs	r3, r3, #4
 800166a:	f003 0201 	and.w	r2, r3, #1
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4313      	orrs	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 0303 	and.w	r3, r3, #3
 8001688:	2b03      	cmp	r3, #3
 800168a:	d017      	beq.n	80016bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	2203      	movs	r2, #3
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4013      	ands	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	689a      	ldr	r2, [r3, #8]
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f003 0303 	and.w	r3, r3, #3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d123      	bne.n	8001710 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	08da      	lsrs	r2, r3, #3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3208      	adds	r2, #8
 80016d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	f003 0307 	and.w	r3, r3, #7
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	220f      	movs	r2, #15
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4013      	ands	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	691a      	ldr	r2, [r3, #16]
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4313      	orrs	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	08da      	lsrs	r2, r3, #3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	3208      	adds	r2, #8
 800170a:	69b9      	ldr	r1, [r7, #24]
 800170c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	2203      	movs	r2, #3
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4013      	ands	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 0203 	and.w	r2, r3, #3
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 80a2 	beq.w	8001896 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	4b57      	ldr	r3, [pc, #348]	@ (80018b4 <HAL_GPIO_Init+0x2e8>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800175a:	4a56      	ldr	r2, [pc, #344]	@ (80018b4 <HAL_GPIO_Init+0x2e8>)
 800175c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001760:	6453      	str	r3, [r2, #68]	@ 0x44
 8001762:	4b54      	ldr	r3, [pc, #336]	@ (80018b4 <HAL_GPIO_Init+0x2e8>)
 8001764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001766:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800176e:	4a52      	ldr	r2, [pc, #328]	@ (80018b8 <HAL_GPIO_Init+0x2ec>)
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	089b      	lsrs	r3, r3, #2
 8001774:	3302      	adds	r3, #2
 8001776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800177a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f003 0303 	and.w	r3, r3, #3
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	220f      	movs	r2, #15
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	43db      	mvns	r3, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4013      	ands	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a49      	ldr	r2, [pc, #292]	@ (80018bc <HAL_GPIO_Init+0x2f0>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d019      	beq.n	80017ce <HAL_GPIO_Init+0x202>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a48      	ldr	r2, [pc, #288]	@ (80018c0 <HAL_GPIO_Init+0x2f4>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d013      	beq.n	80017ca <HAL_GPIO_Init+0x1fe>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a47      	ldr	r2, [pc, #284]	@ (80018c4 <HAL_GPIO_Init+0x2f8>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d00d      	beq.n	80017c6 <HAL_GPIO_Init+0x1fa>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a46      	ldr	r2, [pc, #280]	@ (80018c8 <HAL_GPIO_Init+0x2fc>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d007      	beq.n	80017c2 <HAL_GPIO_Init+0x1f6>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a45      	ldr	r2, [pc, #276]	@ (80018cc <HAL_GPIO_Init+0x300>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d101      	bne.n	80017be <HAL_GPIO_Init+0x1f2>
 80017ba:	2304      	movs	r3, #4
 80017bc:	e008      	b.n	80017d0 <HAL_GPIO_Init+0x204>
 80017be:	2307      	movs	r3, #7
 80017c0:	e006      	b.n	80017d0 <HAL_GPIO_Init+0x204>
 80017c2:	2303      	movs	r3, #3
 80017c4:	e004      	b.n	80017d0 <HAL_GPIO_Init+0x204>
 80017c6:	2302      	movs	r3, #2
 80017c8:	e002      	b.n	80017d0 <HAL_GPIO_Init+0x204>
 80017ca:	2301      	movs	r3, #1
 80017cc:	e000      	b.n	80017d0 <HAL_GPIO_Init+0x204>
 80017ce:	2300      	movs	r3, #0
 80017d0:	69fa      	ldr	r2, [r7, #28]
 80017d2:	f002 0203 	and.w	r2, r2, #3
 80017d6:	0092      	lsls	r2, r2, #2
 80017d8:	4093      	lsls	r3, r2
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4313      	orrs	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017e0:	4935      	ldr	r1, [pc, #212]	@ (80018b8 <HAL_GPIO_Init+0x2ec>)
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	089b      	lsrs	r3, r3, #2
 80017e6:	3302      	adds	r3, #2
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017ee:	4b38      	ldr	r3, [pc, #224]	@ (80018d0 <HAL_GPIO_Init+0x304>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	43db      	mvns	r3, r3
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4013      	ands	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d003      	beq.n	8001812 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	4313      	orrs	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001812:	4a2f      	ldr	r2, [pc, #188]	@ (80018d0 <HAL_GPIO_Init+0x304>)
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001818:	4b2d      	ldr	r3, [pc, #180]	@ (80018d0 <HAL_GPIO_Init+0x304>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	43db      	mvns	r3, r3
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	4013      	ands	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d003      	beq.n	800183c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	4313      	orrs	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800183c:	4a24      	ldr	r2, [pc, #144]	@ (80018d0 <HAL_GPIO_Init+0x304>)
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001842:	4b23      	ldr	r3, [pc, #140]	@ (80018d0 <HAL_GPIO_Init+0x304>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	43db      	mvns	r3, r3
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	4013      	ands	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	4313      	orrs	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001866:	4a1a      	ldr	r2, [pc, #104]	@ (80018d0 <HAL_GPIO_Init+0x304>)
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800186c:	4b18      	ldr	r3, [pc, #96]	@ (80018d0 <HAL_GPIO_Init+0x304>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	43db      	mvns	r3, r3
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4013      	ands	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d003      	beq.n	8001890 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	4313      	orrs	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001890:	4a0f      	ldr	r2, [pc, #60]	@ (80018d0 <HAL_GPIO_Init+0x304>)
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3301      	adds	r3, #1
 800189a:	61fb      	str	r3, [r7, #28]
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	2b0f      	cmp	r3, #15
 80018a0:	f67f aea2 	bls.w	80015e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018a4:	bf00      	nop
 80018a6:	bf00      	nop
 80018a8:	3724      	adds	r7, #36	@ 0x24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40013800 	.word	0x40013800
 80018bc:	40020000 	.word	0x40020000
 80018c0:	40020400 	.word	0x40020400
 80018c4:	40020800 	.word	0x40020800
 80018c8:	40020c00 	.word	0x40020c00
 80018cc:	40021000 	.word	0x40021000
 80018d0:	40013c00 	.word	0x40013c00

080018d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	460b      	mov	r3, r1
 80018de:	807b      	strh	r3, [r7, #2]
 80018e0:	4613      	mov	r3, r2
 80018e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018e4:	787b      	ldrb	r3, [r7, #1]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018ea:	887a      	ldrh	r2, [r7, #2]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018f0:	e003      	b.n	80018fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018f2:	887b      	ldrh	r3, [r7, #2]
 80018f4:	041a      	lsls	r2, r3, #16
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	619a      	str	r2, [r3, #24]
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
	...

08001908 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e267      	b.n	8001dea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	2b00      	cmp	r3, #0
 8001924:	d075      	beq.n	8001a12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001926:	4b88      	ldr	r3, [pc, #544]	@ (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f003 030c 	and.w	r3, r3, #12
 800192e:	2b04      	cmp	r3, #4
 8001930:	d00c      	beq.n	800194c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001932:	4b85      	ldr	r3, [pc, #532]	@ (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800193a:	2b08      	cmp	r3, #8
 800193c:	d112      	bne.n	8001964 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800193e:	4b82      	ldr	r3, [pc, #520]	@ (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001946:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800194a:	d10b      	bne.n	8001964 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800194c:	4b7e      	ldr	r3, [pc, #504]	@ (8001b48 <HAL_RCC_OscConfig+0x240>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d05b      	beq.n	8001a10 <HAL_RCC_OscConfig+0x108>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d157      	bne.n	8001a10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e242      	b.n	8001dea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800196c:	d106      	bne.n	800197c <HAL_RCC_OscConfig+0x74>
 800196e:	4b76      	ldr	r3, [pc, #472]	@ (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a75      	ldr	r2, [pc, #468]	@ (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001974:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001978:	6013      	str	r3, [r2, #0]
 800197a:	e01d      	b.n	80019b8 <HAL_RCC_OscConfig+0xb0>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001984:	d10c      	bne.n	80019a0 <HAL_RCC_OscConfig+0x98>
 8001986:	4b70      	ldr	r3, [pc, #448]	@ (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a6f      	ldr	r2, [pc, #444]	@ (8001b48 <HAL_RCC_OscConfig+0x240>)
 800198c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001990:	6013      	str	r3, [r2, #0]
 8001992:	4b6d      	ldr	r3, [pc, #436]	@ (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a6c      	ldr	r2, [pc, #432]	@ (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001998:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800199c:	6013      	str	r3, [r2, #0]
 800199e:	e00b      	b.n	80019b8 <HAL_RCC_OscConfig+0xb0>
 80019a0:	4b69      	ldr	r3, [pc, #420]	@ (8001b48 <HAL_RCC_OscConfig+0x240>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a68      	ldr	r2, [pc, #416]	@ (8001b48 <HAL_RCC_OscConfig+0x240>)
 80019a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019aa:	6013      	str	r3, [r2, #0]
 80019ac:	4b66      	ldr	r3, [pc, #408]	@ (8001b48 <HAL_RCC_OscConfig+0x240>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a65      	ldr	r2, [pc, #404]	@ (8001b48 <HAL_RCC_OscConfig+0x240>)
 80019b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d013      	beq.n	80019e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c0:	f7ff f8e4 	bl	8000b8c <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019c8:	f7ff f8e0 	bl	8000b8c <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b64      	cmp	r3, #100	@ 0x64
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e207      	b.n	8001dea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019da:	4b5b      	ldr	r3, [pc, #364]	@ (8001b48 <HAL_RCC_OscConfig+0x240>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0f0      	beq.n	80019c8 <HAL_RCC_OscConfig+0xc0>
 80019e6:	e014      	b.n	8001a12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e8:	f7ff f8d0 	bl	8000b8c <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019f0:	f7ff f8cc 	bl	8000b8c <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b64      	cmp	r3, #100	@ 0x64
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e1f3      	b.n	8001dea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a02:	4b51      	ldr	r3, [pc, #324]	@ (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1f0      	bne.n	80019f0 <HAL_RCC_OscConfig+0xe8>
 8001a0e:	e000      	b.n	8001a12 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d063      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001a1e:	4b4a      	ldr	r3, [pc, #296]	@ (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 030c 	and.w	r3, r3, #12
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d00b      	beq.n	8001a42 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a2a:	4b47      	ldr	r3, [pc, #284]	@ (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001a32:	2b08      	cmp	r3, #8
 8001a34:	d11c      	bne.n	8001a70 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a36:	4b44      	ldr	r3, [pc, #272]	@ (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d116      	bne.n	8001a70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a42:	4b41      	ldr	r3, [pc, #260]	@ (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d005      	beq.n	8001a5a <HAL_RCC_OscConfig+0x152>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d001      	beq.n	8001a5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e1c7      	b.n	8001dea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a5a:	4b3b      	ldr	r3, [pc, #236]	@ (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	4937      	ldr	r1, [pc, #220]	@ (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a6e:	e03a      	b.n	8001ae6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d020      	beq.n	8001aba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a78:	4b34      	ldr	r3, [pc, #208]	@ (8001b4c <HAL_RCC_OscConfig+0x244>)
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7e:	f7ff f885 	bl	8000b8c <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a86:	f7ff f881 	bl	8000b8c <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e1a8      	b.n	8001dea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a98:	4b2b      	ldr	r3, [pc, #172]	@ (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0f0      	beq.n	8001a86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa4:	4b28      	ldr	r3, [pc, #160]	@ (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	00db      	lsls	r3, r3, #3
 8001ab2:	4925      	ldr	r1, [pc, #148]	@ (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	600b      	str	r3, [r1, #0]
 8001ab8:	e015      	b.n	8001ae6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aba:	4b24      	ldr	r3, [pc, #144]	@ (8001b4c <HAL_RCC_OscConfig+0x244>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac0:	f7ff f864 	bl	8000b8c <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ac8:	f7ff f860 	bl	8000b8c <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e187      	b.n	8001dea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ada:	4b1b      	ldr	r3, [pc, #108]	@ (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f0      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0308 	and.w	r3, r3, #8
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d036      	beq.n	8001b60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d016      	beq.n	8001b28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001afa:	4b15      	ldr	r3, [pc, #84]	@ (8001b50 <HAL_RCC_OscConfig+0x248>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b00:	f7ff f844 	bl	8000b8c <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b08:	f7ff f840 	bl	8000b8c <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e167      	b.n	8001dea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001b1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d0f0      	beq.n	8001b08 <HAL_RCC_OscConfig+0x200>
 8001b26:	e01b      	b.n	8001b60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b28:	4b09      	ldr	r3, [pc, #36]	@ (8001b50 <HAL_RCC_OscConfig+0x248>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b2e:	f7ff f82d 	bl	8000b8c <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b34:	e00e      	b.n	8001b54 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b36:	f7ff f829 	bl	8000b8c <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d907      	bls.n	8001b54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e150      	b.n	8001dea <HAL_RCC_OscConfig+0x4e2>
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	42470000 	.word	0x42470000
 8001b50:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b54:	4b88      	ldr	r3, [pc, #544]	@ (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001b56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1ea      	bne.n	8001b36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0304 	and.w	r3, r3, #4
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f000 8097 	beq.w	8001c9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b72:	4b81      	ldr	r3, [pc, #516]	@ (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d10f      	bne.n	8001b9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60bb      	str	r3, [r7, #8]
 8001b82:	4b7d      	ldr	r3, [pc, #500]	@ (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b86:	4a7c      	ldr	r2, [pc, #496]	@ (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001b88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b8e:	4b7a      	ldr	r3, [pc, #488]	@ (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b96:	60bb      	str	r3, [r7, #8]
 8001b98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b9e:	4b77      	ldr	r3, [pc, #476]	@ (8001d7c <HAL_RCC_OscConfig+0x474>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d118      	bne.n	8001bdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001baa:	4b74      	ldr	r3, [pc, #464]	@ (8001d7c <HAL_RCC_OscConfig+0x474>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a73      	ldr	r2, [pc, #460]	@ (8001d7c <HAL_RCC_OscConfig+0x474>)
 8001bb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bb6:	f7fe ffe9 	bl	8000b8c <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bbe:	f7fe ffe5 	bl	8000b8c <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e10c      	b.n	8001dea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd0:	4b6a      	ldr	r3, [pc, #424]	@ (8001d7c <HAL_RCC_OscConfig+0x474>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d0f0      	beq.n	8001bbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d106      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x2ea>
 8001be4:	4b64      	ldr	r3, [pc, #400]	@ (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001be6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001be8:	4a63      	ldr	r2, [pc, #396]	@ (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bf0:	e01c      	b.n	8001c2c <HAL_RCC_OscConfig+0x324>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	2b05      	cmp	r3, #5
 8001bf8:	d10c      	bne.n	8001c14 <HAL_RCC_OscConfig+0x30c>
 8001bfa:	4b5f      	ldr	r3, [pc, #380]	@ (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001bfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bfe:	4a5e      	ldr	r2, [pc, #376]	@ (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001c00:	f043 0304 	orr.w	r3, r3, #4
 8001c04:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c06:	4b5c      	ldr	r3, [pc, #368]	@ (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c0a:	4a5b      	ldr	r2, [pc, #364]	@ (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c12:	e00b      	b.n	8001c2c <HAL_RCC_OscConfig+0x324>
 8001c14:	4b58      	ldr	r3, [pc, #352]	@ (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001c16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c18:	4a57      	ldr	r2, [pc, #348]	@ (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001c1a:	f023 0301 	bic.w	r3, r3, #1
 8001c1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c20:	4b55      	ldr	r3, [pc, #340]	@ (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001c22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c24:	4a54      	ldr	r2, [pc, #336]	@ (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001c26:	f023 0304 	bic.w	r3, r3, #4
 8001c2a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d015      	beq.n	8001c60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c34:	f7fe ffaa 	bl	8000b8c <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c3a:	e00a      	b.n	8001c52 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c3c:	f7fe ffa6 	bl	8000b8c <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e0cb      	b.n	8001dea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c52:	4b49      	ldr	r3, [pc, #292]	@ (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d0ee      	beq.n	8001c3c <HAL_RCC_OscConfig+0x334>
 8001c5e:	e014      	b.n	8001c8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c60:	f7fe ff94 	bl	8000b8c <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c66:	e00a      	b.n	8001c7e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c68:	f7fe ff90 	bl	8000b8c <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e0b5      	b.n	8001dea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c7e:	4b3e      	ldr	r3, [pc, #248]	@ (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1ee      	bne.n	8001c68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c8a:	7dfb      	ldrb	r3, [r7, #23]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d105      	bne.n	8001c9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c90:	4b39      	ldr	r3, [pc, #228]	@ (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c94:	4a38      	ldr	r2, [pc, #224]	@ (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001c96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c9a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f000 80a1 	beq.w	8001de8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ca6:	4b34      	ldr	r3, [pc, #208]	@ (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 030c 	and.w	r3, r3, #12
 8001cae:	2b08      	cmp	r3, #8
 8001cb0:	d05c      	beq.n	8001d6c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d141      	bne.n	8001d3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cba:	4b31      	ldr	r3, [pc, #196]	@ (8001d80 <HAL_RCC_OscConfig+0x478>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc0:	f7fe ff64 	bl	8000b8c <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc8:	f7fe ff60 	bl	8000b8c <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e087      	b.n	8001dea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cda:	4b27      	ldr	r3, [pc, #156]	@ (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f0      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69da      	ldr	r2, [r3, #28]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a1b      	ldr	r3, [r3, #32]
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf4:	019b      	lsls	r3, r3, #6
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cfc:	085b      	lsrs	r3, r3, #1
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	041b      	lsls	r3, r3, #16
 8001d02:	431a      	orrs	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d08:	061b      	lsls	r3, r3, #24
 8001d0a:	491b      	ldr	r1, [pc, #108]	@ (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d10:	4b1b      	ldr	r3, [pc, #108]	@ (8001d80 <HAL_RCC_OscConfig+0x478>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d16:	f7fe ff39 	bl	8000b8c <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d1e:	f7fe ff35 	bl	8000b8c <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e05c      	b.n	8001dea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d30:	4b11      	ldr	r3, [pc, #68]	@ (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0f0      	beq.n	8001d1e <HAL_RCC_OscConfig+0x416>
 8001d3c:	e054      	b.n	8001de8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d3e:	4b10      	ldr	r3, [pc, #64]	@ (8001d80 <HAL_RCC_OscConfig+0x478>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d44:	f7fe ff22 	bl	8000b8c <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d4c:	f7fe ff1e 	bl	8000b8c <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e045      	b.n	8001dea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d5e:	4b06      	ldr	r3, [pc, #24]	@ (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f0      	bne.n	8001d4c <HAL_RCC_OscConfig+0x444>
 8001d6a:	e03d      	b.n	8001de8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d107      	bne.n	8001d84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e038      	b.n	8001dea <HAL_RCC_OscConfig+0x4e2>
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	40007000 	.word	0x40007000
 8001d80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d84:	4b1b      	ldr	r3, [pc, #108]	@ (8001df4 <HAL_RCC_OscConfig+0x4ec>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d028      	beq.n	8001de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d121      	bne.n	8001de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d11a      	bne.n	8001de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001db4:	4013      	ands	r3, r2
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001dba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d111      	bne.n	8001de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dca:	085b      	lsrs	r3, r3, #1
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d107      	bne.n	8001de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d001      	beq.n	8001de8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e000      	b.n	8001dea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40023800 	.word	0x40023800

08001df8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e0cc      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e0c:	4b68      	ldr	r3, [pc, #416]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0307 	and.w	r3, r3, #7
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d90c      	bls.n	8001e34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e1a:	4b65      	ldr	r3, [pc, #404]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	b2d2      	uxtb	r2, r2
 8001e20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e22:	4b63      	ldr	r3, [pc, #396]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d001      	beq.n	8001e34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e0b8      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d020      	beq.n	8001e82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0304 	and.w	r3, r3, #4
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d005      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e4c:	4b59      	ldr	r3, [pc, #356]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	4a58      	ldr	r2, [pc, #352]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e52:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001e56:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0308 	and.w	r3, r3, #8
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d005      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e64:	4b53      	ldr	r3, [pc, #332]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	4a52      	ldr	r2, [pc, #328]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e6a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001e6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e70:	4b50      	ldr	r3, [pc, #320]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	494d      	ldr	r1, [pc, #308]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d044      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d107      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e96:	4b47      	ldr	r3, [pc, #284]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d119      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e07f      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d003      	beq.n	8001eb6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eb2:	2b03      	cmp	r3, #3
 8001eb4:	d107      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eb6:	4b3f      	ldr	r3, [pc, #252]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d109      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e06f      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec6:	4b3b      	ldr	r3, [pc, #236]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e067      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ed6:	4b37      	ldr	r3, [pc, #220]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f023 0203 	bic.w	r2, r3, #3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	4934      	ldr	r1, [pc, #208]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ee8:	f7fe fe50 	bl	8000b8c <HAL_GetTick>
 8001eec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eee:	e00a      	b.n	8001f06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ef0:	f7fe fe4c 	bl	8000b8c <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e04f      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f06:	4b2b      	ldr	r3, [pc, #172]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 020c 	and.w	r2, r3, #12
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d1eb      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f18:	4b25      	ldr	r3, [pc, #148]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d20c      	bcs.n	8001f40 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f26:	4b22      	ldr	r3, [pc, #136]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	b2d2      	uxtb	r2, r2
 8001f2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2e:	4b20      	ldr	r3, [pc, #128]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d001      	beq.n	8001f40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e032      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d008      	beq.n	8001f5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f4c:	4b19      	ldr	r3, [pc, #100]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	4916      	ldr	r1, [pc, #88]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0308 	and.w	r3, r3, #8
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d009      	beq.n	8001f7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f6a:	4b12      	ldr	r3, [pc, #72]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	490e      	ldr	r1, [pc, #56]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f7e:	f000 f821 	bl	8001fc4 <HAL_RCC_GetSysClockFreq>
 8001f82:	4602      	mov	r2, r0
 8001f84:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	091b      	lsrs	r3, r3, #4
 8001f8a:	f003 030f 	and.w	r3, r3, #15
 8001f8e:	490a      	ldr	r1, [pc, #40]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f90:	5ccb      	ldrb	r3, [r1, r3]
 8001f92:	fa22 f303 	lsr.w	r3, r2, r3
 8001f96:	4a09      	ldr	r2, [pc, #36]	@ (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001f98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001f9a:	4b09      	ldr	r3, [pc, #36]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe fdb0 	bl	8000b04 <HAL_InitTick>

  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40023c00 	.word	0x40023c00
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	080036c8 	.word	0x080036c8
 8001fbc:	20000008 	.word	0x20000008
 8001fc0:	2000000c 	.word	0x2000000c

08001fc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fc8:	b094      	sub	sp, #80	@ 0x50
 8001fca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fdc:	4b79      	ldr	r3, [pc, #484]	@ (80021c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f003 030c 	and.w	r3, r3, #12
 8001fe4:	2b08      	cmp	r3, #8
 8001fe6:	d00d      	beq.n	8002004 <HAL_RCC_GetSysClockFreq+0x40>
 8001fe8:	2b08      	cmp	r3, #8
 8001fea:	f200 80e1 	bhi.w	80021b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d002      	beq.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x34>
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	d003      	beq.n	8001ffe <HAL_RCC_GetSysClockFreq+0x3a>
 8001ff6:	e0db      	b.n	80021b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ff8:	4b73      	ldr	r3, [pc, #460]	@ (80021c8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ffa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ffc:	e0db      	b.n	80021b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ffe:	4b73      	ldr	r3, [pc, #460]	@ (80021cc <HAL_RCC_GetSysClockFreq+0x208>)
 8002000:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002002:	e0d8      	b.n	80021b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002004:	4b6f      	ldr	r3, [pc, #444]	@ (80021c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800200c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800200e:	4b6d      	ldr	r3, [pc, #436]	@ (80021c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d063      	beq.n	80020e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800201a:	4b6a      	ldr	r3, [pc, #424]	@ (80021c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	099b      	lsrs	r3, r3, #6
 8002020:	2200      	movs	r2, #0
 8002022:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002024:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800202c:	633b      	str	r3, [r7, #48]	@ 0x30
 800202e:	2300      	movs	r3, #0
 8002030:	637b      	str	r3, [r7, #52]	@ 0x34
 8002032:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002036:	4622      	mov	r2, r4
 8002038:	462b      	mov	r3, r5
 800203a:	f04f 0000 	mov.w	r0, #0
 800203e:	f04f 0100 	mov.w	r1, #0
 8002042:	0159      	lsls	r1, r3, #5
 8002044:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002048:	0150      	lsls	r0, r2, #5
 800204a:	4602      	mov	r2, r0
 800204c:	460b      	mov	r3, r1
 800204e:	4621      	mov	r1, r4
 8002050:	1a51      	subs	r1, r2, r1
 8002052:	6139      	str	r1, [r7, #16]
 8002054:	4629      	mov	r1, r5
 8002056:	eb63 0301 	sbc.w	r3, r3, r1
 800205a:	617b      	str	r3, [r7, #20]
 800205c:	f04f 0200 	mov.w	r2, #0
 8002060:	f04f 0300 	mov.w	r3, #0
 8002064:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002068:	4659      	mov	r1, fp
 800206a:	018b      	lsls	r3, r1, #6
 800206c:	4651      	mov	r1, sl
 800206e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002072:	4651      	mov	r1, sl
 8002074:	018a      	lsls	r2, r1, #6
 8002076:	4651      	mov	r1, sl
 8002078:	ebb2 0801 	subs.w	r8, r2, r1
 800207c:	4659      	mov	r1, fp
 800207e:	eb63 0901 	sbc.w	r9, r3, r1
 8002082:	f04f 0200 	mov.w	r2, #0
 8002086:	f04f 0300 	mov.w	r3, #0
 800208a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800208e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002092:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002096:	4690      	mov	r8, r2
 8002098:	4699      	mov	r9, r3
 800209a:	4623      	mov	r3, r4
 800209c:	eb18 0303 	adds.w	r3, r8, r3
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	462b      	mov	r3, r5
 80020a4:	eb49 0303 	adc.w	r3, r9, r3
 80020a8:	60fb      	str	r3, [r7, #12]
 80020aa:	f04f 0200 	mov.w	r2, #0
 80020ae:	f04f 0300 	mov.w	r3, #0
 80020b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80020b6:	4629      	mov	r1, r5
 80020b8:	024b      	lsls	r3, r1, #9
 80020ba:	4621      	mov	r1, r4
 80020bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80020c0:	4621      	mov	r1, r4
 80020c2:	024a      	lsls	r2, r1, #9
 80020c4:	4610      	mov	r0, r2
 80020c6:	4619      	mov	r1, r3
 80020c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020ca:	2200      	movs	r2, #0
 80020cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80020d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80020d4:	f7fe f888 	bl	80001e8 <__aeabi_uldivmod>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	4613      	mov	r3, r2
 80020de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80020e0:	e058      	b.n	8002194 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020e2:	4b38      	ldr	r3, [pc, #224]	@ (80021c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	099b      	lsrs	r3, r3, #6
 80020e8:	2200      	movs	r2, #0
 80020ea:	4618      	mov	r0, r3
 80020ec:	4611      	mov	r1, r2
 80020ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80020f2:	623b      	str	r3, [r7, #32]
 80020f4:	2300      	movs	r3, #0
 80020f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80020f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80020fc:	4642      	mov	r2, r8
 80020fe:	464b      	mov	r3, r9
 8002100:	f04f 0000 	mov.w	r0, #0
 8002104:	f04f 0100 	mov.w	r1, #0
 8002108:	0159      	lsls	r1, r3, #5
 800210a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800210e:	0150      	lsls	r0, r2, #5
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	4641      	mov	r1, r8
 8002116:	ebb2 0a01 	subs.w	sl, r2, r1
 800211a:	4649      	mov	r1, r9
 800211c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002120:	f04f 0200 	mov.w	r2, #0
 8002124:	f04f 0300 	mov.w	r3, #0
 8002128:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800212c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002130:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002134:	ebb2 040a 	subs.w	r4, r2, sl
 8002138:	eb63 050b 	sbc.w	r5, r3, fp
 800213c:	f04f 0200 	mov.w	r2, #0
 8002140:	f04f 0300 	mov.w	r3, #0
 8002144:	00eb      	lsls	r3, r5, #3
 8002146:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800214a:	00e2      	lsls	r2, r4, #3
 800214c:	4614      	mov	r4, r2
 800214e:	461d      	mov	r5, r3
 8002150:	4643      	mov	r3, r8
 8002152:	18e3      	adds	r3, r4, r3
 8002154:	603b      	str	r3, [r7, #0]
 8002156:	464b      	mov	r3, r9
 8002158:	eb45 0303 	adc.w	r3, r5, r3
 800215c:	607b      	str	r3, [r7, #4]
 800215e:	f04f 0200 	mov.w	r2, #0
 8002162:	f04f 0300 	mov.w	r3, #0
 8002166:	e9d7 4500 	ldrd	r4, r5, [r7]
 800216a:	4629      	mov	r1, r5
 800216c:	028b      	lsls	r3, r1, #10
 800216e:	4621      	mov	r1, r4
 8002170:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002174:	4621      	mov	r1, r4
 8002176:	028a      	lsls	r2, r1, #10
 8002178:	4610      	mov	r0, r2
 800217a:	4619      	mov	r1, r3
 800217c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800217e:	2200      	movs	r2, #0
 8002180:	61bb      	str	r3, [r7, #24]
 8002182:	61fa      	str	r2, [r7, #28]
 8002184:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002188:	f7fe f82e 	bl	80001e8 <__aeabi_uldivmod>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	4613      	mov	r3, r2
 8002192:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002194:	4b0b      	ldr	r3, [pc, #44]	@ (80021c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	0c1b      	lsrs	r3, r3, #16
 800219a:	f003 0303 	and.w	r3, r3, #3
 800219e:	3301      	adds	r3, #1
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80021a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80021a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80021ae:	e002      	b.n	80021b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021b0:	4b05      	ldr	r3, [pc, #20]	@ (80021c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80021b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80021b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3750      	adds	r7, #80	@ 0x50
 80021bc:	46bd      	mov	sp, r7
 80021be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021c2:	bf00      	nop
 80021c4:	40023800 	.word	0x40023800
 80021c8:	00f42400 	.word	0x00f42400
 80021cc:	007a1200 	.word	0x007a1200

080021d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021d4:	4b03      	ldr	r3, [pc, #12]	@ (80021e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80021d6:	681b      	ldr	r3, [r3, #0]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	20000008 	.word	0x20000008

080021e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021ec:	f7ff fff0 	bl	80021d0 <HAL_RCC_GetHCLKFreq>
 80021f0:	4602      	mov	r2, r0
 80021f2:	4b05      	ldr	r3, [pc, #20]	@ (8002208 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	0a9b      	lsrs	r3, r3, #10
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	4903      	ldr	r1, [pc, #12]	@ (800220c <HAL_RCC_GetPCLK1Freq+0x24>)
 80021fe:	5ccb      	ldrb	r3, [r1, r3]
 8002200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002204:	4618      	mov	r0, r3
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40023800 	.word	0x40023800
 800220c:	080036d8 	.word	0x080036d8

08002210 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002214:	f7ff ffdc 	bl	80021d0 <HAL_RCC_GetHCLKFreq>
 8002218:	4602      	mov	r2, r0
 800221a:	4b05      	ldr	r3, [pc, #20]	@ (8002230 <HAL_RCC_GetPCLK2Freq+0x20>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	0b5b      	lsrs	r3, r3, #13
 8002220:	f003 0307 	and.w	r3, r3, #7
 8002224:	4903      	ldr	r1, [pc, #12]	@ (8002234 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002226:	5ccb      	ldrb	r3, [r1, r3]
 8002228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800222c:	4618      	mov	r0, r3
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40023800 	.word	0x40023800
 8002234:	080036d8 	.word	0x080036d8

08002238 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e042      	b.n	80022d0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d106      	bne.n	8002264 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f7fe fb2c 	bl	80008bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2224      	movs	r2, #36	@ 0x24
 8002268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68da      	ldr	r2, [r3, #12]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800227a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 ff6f 	bl	8003160 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	691a      	ldr	r2, [r3, #16]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002290:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	695a      	ldr	r2, [r3, #20]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80022a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68da      	ldr	r2, [r3, #12]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80022b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2220      	movs	r2, #32
 80022bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2220      	movs	r2, #32
 80022c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b08a      	sub	sp, #40	@ 0x28
 80022dc:	af02      	add	r7, sp, #8
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	603b      	str	r3, [r7, #0]
 80022e4:	4613      	mov	r3, r2
 80022e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b20      	cmp	r3, #32
 80022f6:	d175      	bne.n	80023e4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d002      	beq.n	8002304 <HAL_UART_Transmit+0x2c>
 80022fe:	88fb      	ldrh	r3, [r7, #6]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e06e      	b.n	80023e6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2221      	movs	r2, #33	@ 0x21
 8002312:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002316:	f7fe fc39 	bl	8000b8c <HAL_GetTick>
 800231a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	88fa      	ldrh	r2, [r7, #6]
 8002320:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	88fa      	ldrh	r2, [r7, #6]
 8002326:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002330:	d108      	bne.n	8002344 <HAL_UART_Transmit+0x6c>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d104      	bne.n	8002344 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800233a:	2300      	movs	r3, #0
 800233c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	61bb      	str	r3, [r7, #24]
 8002342:	e003      	b.n	800234c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002348:	2300      	movs	r3, #0
 800234a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800234c:	e02e      	b.n	80023ac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	2200      	movs	r2, #0
 8002356:	2180      	movs	r1, #128	@ 0x80
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 fc3f 	bl	8002bdc <UART_WaitOnFlagUntilTimeout>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d005      	beq.n	8002370 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2220      	movs	r2, #32
 8002368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e03a      	b.n	80023e6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10b      	bne.n	800238e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	881b      	ldrh	r3, [r3, #0]
 800237a:	461a      	mov	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002384:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	3302      	adds	r3, #2
 800238a:	61bb      	str	r3, [r7, #24]
 800238c:	e007      	b.n	800239e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	781a      	ldrb	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	3301      	adds	r3, #1
 800239c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	3b01      	subs	r3, #1
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1cb      	bne.n	800234e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	2200      	movs	r2, #0
 80023be:	2140      	movs	r1, #64	@ 0x40
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f000 fc0b 	bl	8002bdc <UART_WaitOnFlagUntilTimeout>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d005      	beq.n	80023d8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2220      	movs	r2, #32
 80023d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e006      	b.n	80023e6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2220      	movs	r2, #32
 80023dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80023e0:	2300      	movs	r3, #0
 80023e2:	e000      	b.n	80023e6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80023e4:	2302      	movs	r3, #2
  }
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3720      	adds	r7, #32
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b084      	sub	sp, #16
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	60f8      	str	r0, [r7, #12]
 80023f6:	60b9      	str	r1, [r7, #8]
 80023f8:	4613      	mov	r3, r2
 80023fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002402:	b2db      	uxtb	r3, r3
 8002404:	2b20      	cmp	r3, #32
 8002406:	d112      	bne.n	800242e <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d002      	beq.n	8002414 <HAL_UART_Receive_DMA+0x26>
 800240e:	88fb      	ldrh	r3, [r7, #6]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e00b      	b.n	8002430 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800241e:	88fb      	ldrh	r3, [r7, #6]
 8002420:	461a      	mov	r2, r3
 8002422:	68b9      	ldr	r1, [r7, #8]
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f000 fc33 	bl	8002c90 <UART_Start_Receive_DMA>
 800242a:	4603      	mov	r3, r0
 800242c:	e000      	b.n	8002430 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800242e:	2302      	movs	r3, #2
  }
}
 8002430:	4618      	mov	r0, r3
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b0ba      	sub	sp, #232	@ 0xe8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800245e:	2300      	movs	r3, #0
 8002460:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002464:	2300      	movs	r3, #0
 8002466:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800246a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002476:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10f      	bne.n	800249e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800247e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002482:	f003 0320 	and.w	r3, r3, #32
 8002486:	2b00      	cmp	r3, #0
 8002488:	d009      	beq.n	800249e <HAL_UART_IRQHandler+0x66>
 800248a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800248e:	f003 0320 	and.w	r3, r3, #32
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 fda4 	bl	8002fe4 <UART_Receive_IT>
      return;
 800249c:	e273      	b.n	8002986 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800249e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 80de 	beq.w	8002664 <HAL_UART_IRQHandler+0x22c>
 80024a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d106      	bne.n	80024c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80024b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024b8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f000 80d1 	beq.w	8002664 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80024c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00b      	beq.n	80024e6 <HAL_UART_IRQHandler+0xae>
 80024ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d005      	beq.n	80024e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024de:	f043 0201 	orr.w	r2, r3, #1
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024ea:	f003 0304 	and.w	r3, r3, #4
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00b      	beq.n	800250a <HAL_UART_IRQHandler+0xd2>
 80024f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d005      	beq.n	800250a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002502:	f043 0202 	orr.w	r2, r3, #2
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800250a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00b      	beq.n	800252e <HAL_UART_IRQHandler+0xf6>
 8002516:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d005      	beq.n	800252e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002526:	f043 0204 	orr.w	r2, r3, #4
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800252e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002532:	f003 0308 	and.w	r3, r3, #8
 8002536:	2b00      	cmp	r3, #0
 8002538:	d011      	beq.n	800255e <HAL_UART_IRQHandler+0x126>
 800253a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800253e:	f003 0320 	and.w	r3, r3, #32
 8002542:	2b00      	cmp	r3, #0
 8002544:	d105      	bne.n	8002552 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002546:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d005      	beq.n	800255e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002556:	f043 0208 	orr.w	r2, r3, #8
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 820a 	beq.w	800297c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800256c:	f003 0320 	and.w	r3, r3, #32
 8002570:	2b00      	cmp	r3, #0
 8002572:	d008      	beq.n	8002586 <HAL_UART_IRQHandler+0x14e>
 8002574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002578:	f003 0320 	and.w	r3, r3, #32
 800257c:	2b00      	cmp	r3, #0
 800257e:	d002      	beq.n	8002586 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 fd2f 	bl	8002fe4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002590:	2b40      	cmp	r3, #64	@ 0x40
 8002592:	bf0c      	ite	eq
 8002594:	2301      	moveq	r3, #1
 8002596:	2300      	movne	r3, #0
 8002598:	b2db      	uxtb	r3, r3
 800259a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a2:	f003 0308 	and.w	r3, r3, #8
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d103      	bne.n	80025b2 <HAL_UART_IRQHandler+0x17a>
 80025aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d04f      	beq.n	8002652 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 fc3a 	bl	8002e2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025c2:	2b40      	cmp	r3, #64	@ 0x40
 80025c4:	d141      	bne.n	800264a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	3314      	adds	r3, #20
 80025cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025d4:	e853 3f00 	ldrex	r3, [r3]
 80025d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80025dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80025e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80025e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	3314      	adds	r3, #20
 80025ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80025f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80025f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80025fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002602:	e841 2300 	strex	r3, r2, [r1]
 8002606:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800260a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1d9      	bne.n	80025c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002616:	2b00      	cmp	r3, #0
 8002618:	d013      	beq.n	8002642 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800261e:	4a8a      	ldr	r2, [pc, #552]	@ (8002848 <HAL_UART_IRQHandler+0x410>)
 8002620:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002626:	4618      	mov	r0, r3
 8002628:	f7fe fd44 	bl	80010b4 <HAL_DMA_Abort_IT>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d016      	beq.n	8002660 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800263c:	4610      	mov	r0, r2
 800263e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002640:	e00e      	b.n	8002660 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f9b6 	bl	80029b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002648:	e00a      	b.n	8002660 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 f9b2 	bl	80029b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002650:	e006      	b.n	8002660 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f9ae 	bl	80029b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800265e:	e18d      	b.n	800297c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002660:	bf00      	nop
    return;
 8002662:	e18b      	b.n	800297c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002668:	2b01      	cmp	r3, #1
 800266a:	f040 8167 	bne.w	800293c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800266e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002672:	f003 0310 	and.w	r3, r3, #16
 8002676:	2b00      	cmp	r3, #0
 8002678:	f000 8160 	beq.w	800293c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800267c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002680:	f003 0310 	and.w	r3, r3, #16
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 8159 	beq.w	800293c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800268a:	2300      	movs	r3, #0
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	60bb      	str	r3, [r7, #8]
 800269e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026aa:	2b40      	cmp	r3, #64	@ 0x40
 80026ac:	f040 80ce 	bne.w	800284c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80026bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f000 80a9 	beq.w	8002818 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80026ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80026ce:	429a      	cmp	r2, r3
 80026d0:	f080 80a2 	bcs.w	8002818 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80026da:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026e6:	f000 8088 	beq.w	80027fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	330c      	adds	r3, #12
 80026f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80026f8:	e853 3f00 	ldrex	r3, [r3]
 80026fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002700:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002704:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002708:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	330c      	adds	r3, #12
 8002712:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002716:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800271a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800271e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002722:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002726:	e841 2300 	strex	r3, r2, [r1]
 800272a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800272e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1d9      	bne.n	80026ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	3314      	adds	r3, #20
 800273c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800273e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002740:	e853 3f00 	ldrex	r3, [r3]
 8002744:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002746:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002748:	f023 0301 	bic.w	r3, r3, #1
 800274c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	3314      	adds	r3, #20
 8002756:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800275a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800275e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002760:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002762:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002766:	e841 2300 	strex	r3, r2, [r1]
 800276a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800276c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1e1      	bne.n	8002736 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	3314      	adds	r3, #20
 8002778:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800277a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800277c:	e853 3f00 	ldrex	r3, [r3]
 8002780:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002782:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002784:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002788:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	3314      	adds	r3, #20
 8002792:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002796:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002798:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800279a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800279c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800279e:	e841 2300 	strex	r3, r2, [r1]
 80027a2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80027a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1e3      	bne.n	8002772 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2220      	movs	r2, #32
 80027ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	330c      	adds	r3, #12
 80027be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80027c2:	e853 3f00 	ldrex	r3, [r3]
 80027c6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80027c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027ca:	f023 0310 	bic.w	r3, r3, #16
 80027ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	330c      	adds	r3, #12
 80027d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80027dc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80027de:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80027e2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80027e4:	e841 2300 	strex	r3, r2, [r1]
 80027e8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80027ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1e3      	bne.n	80027b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7fe fbed 	bl	8000fd4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2202      	movs	r2, #2
 80027fe:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002808:	b29b      	uxth	r3, r3
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	b29b      	uxth	r3, r3
 800280e:	4619      	mov	r1, r3
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 f8d9 	bl	80029c8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002816:	e0b3      	b.n	8002980 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800281c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002820:	429a      	cmp	r2, r3
 8002822:	f040 80ad 	bne.w	8002980 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800282a:	69db      	ldr	r3, [r3, #28]
 800282c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002830:	f040 80a6 	bne.w	8002980 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2202      	movs	r2, #2
 8002838:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800283e:	4619      	mov	r1, r3
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 f8c1 	bl	80029c8 <HAL_UARTEx_RxEventCallback>
      return;
 8002846:	e09b      	b.n	8002980 <HAL_UART_IRQHandler+0x548>
 8002848:	08002ef3 	.word	0x08002ef3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002854:	b29b      	uxth	r3, r3
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002860:	b29b      	uxth	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 808e 	beq.w	8002984 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8002868:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 8089 	beq.w	8002984 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	330c      	adds	r3, #12
 8002878:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800287a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800287c:	e853 3f00 	ldrex	r3, [r3]
 8002880:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002884:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002888:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	330c      	adds	r3, #12
 8002892:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002896:	647a      	str	r2, [r7, #68]	@ 0x44
 8002898:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800289a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800289c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800289e:	e841 2300 	strex	r3, r2, [r1]
 80028a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80028a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1e3      	bne.n	8002872 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	3314      	adds	r3, #20
 80028b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b4:	e853 3f00 	ldrex	r3, [r3]
 80028b8:	623b      	str	r3, [r7, #32]
   return(result);
 80028ba:	6a3b      	ldr	r3, [r7, #32]
 80028bc:	f023 0301 	bic.w	r3, r3, #1
 80028c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	3314      	adds	r3, #20
 80028ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80028ce:	633a      	str	r2, [r7, #48]	@ 0x30
 80028d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80028d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028d6:	e841 2300 	strex	r3, r2, [r1]
 80028da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80028dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1e3      	bne.n	80028aa <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2220      	movs	r2, #32
 80028e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	330c      	adds	r3, #12
 80028f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	e853 3f00 	ldrex	r3, [r3]
 80028fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f023 0310 	bic.w	r3, r3, #16
 8002906:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	330c      	adds	r3, #12
 8002910:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002914:	61fa      	str	r2, [r7, #28]
 8002916:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002918:	69b9      	ldr	r1, [r7, #24]
 800291a:	69fa      	ldr	r2, [r7, #28]
 800291c:	e841 2300 	strex	r3, r2, [r1]
 8002920:	617b      	str	r3, [r7, #20]
   return(result);
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1e3      	bne.n	80028f0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2202      	movs	r2, #2
 800292c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800292e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002932:	4619      	mov	r1, r3
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 f847 	bl	80029c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800293a:	e023      	b.n	8002984 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800293c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002940:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002944:	2b00      	cmp	r3, #0
 8002946:	d009      	beq.n	800295c <HAL_UART_IRQHandler+0x524>
 8002948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800294c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002950:	2b00      	cmp	r3, #0
 8002952:	d003      	beq.n	800295c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 fadd 	bl	8002f14 <UART_Transmit_IT>
    return;
 800295a:	e014      	b.n	8002986 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800295c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00e      	beq.n	8002986 <HAL_UART_IRQHandler+0x54e>
 8002968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800296c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002970:	2b00      	cmp	r3, #0
 8002972:	d008      	beq.n	8002986 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 fb1d 	bl	8002fb4 <UART_EndTransmit_IT>
    return;
 800297a:	e004      	b.n	8002986 <HAL_UART_IRQHandler+0x54e>
    return;
 800297c:	bf00      	nop
 800297e:	e002      	b.n	8002986 <HAL_UART_IRQHandler+0x54e>
      return;
 8002980:	bf00      	nop
 8002982:	e000      	b.n	8002986 <HAL_UART_IRQHandler+0x54e>
      return;
 8002984:	bf00      	nop
  }
}
 8002986:	37e8      	adds	r7, #232	@ 0xe8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	460b      	mov	r3, r1
 80029d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b09c      	sub	sp, #112	@ 0x70
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ec:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d172      	bne.n	8002ae2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80029fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029fe:	2200      	movs	r2, #0
 8002a00:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	330c      	adds	r3, #12
 8002a08:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a0c:	e853 3f00 	ldrex	r3, [r3]
 8002a10:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002a12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a18:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	330c      	adds	r3, #12
 8002a20:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002a22:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002a24:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a26:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002a28:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002a2a:	e841 2300 	strex	r3, r2, [r1]
 8002a2e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002a30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1e5      	bne.n	8002a02 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	3314      	adds	r3, #20
 8002a3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a40:	e853 3f00 	ldrex	r3, [r3]
 8002a44:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002a46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a48:	f023 0301 	bic.w	r3, r3, #1
 8002a4c:	667b      	str	r3, [r7, #100]	@ 0x64
 8002a4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	3314      	adds	r3, #20
 8002a54:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002a56:	647a      	str	r2, [r7, #68]	@ 0x44
 8002a58:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a5a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002a5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a5e:	e841 2300 	strex	r3, r2, [r1]
 8002a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002a64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1e5      	bne.n	8002a36 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	3314      	adds	r3, #20
 8002a70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a74:	e853 3f00 	ldrex	r3, [r3]
 8002a78:	623b      	str	r3, [r7, #32]
   return(result);
 8002a7a:	6a3b      	ldr	r3, [r7, #32]
 8002a7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a80:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	3314      	adds	r3, #20
 8002a88:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002a8a:	633a      	str	r2, [r7, #48]	@ 0x30
 8002a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a92:	e841 2300 	strex	r3, r2, [r1]
 8002a96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1e5      	bne.n	8002a6a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002a9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002aa0:	2220      	movs	r2, #32
 8002aa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002aa6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d119      	bne.n	8002ae2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002aae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	330c      	adds	r3, #12
 8002ab4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	e853 3f00 	ldrex	r3, [r3]
 8002abc:	60fb      	str	r3, [r7, #12]
   return(result);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f023 0310 	bic.w	r3, r3, #16
 8002ac4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ac6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	330c      	adds	r3, #12
 8002acc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002ace:	61fa      	str	r2, [r7, #28]
 8002ad0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad2:	69b9      	ldr	r1, [r7, #24]
 8002ad4:	69fa      	ldr	r2, [r7, #28]
 8002ad6:	e841 2300 	strex	r3, r2, [r1]
 8002ada:	617b      	str	r3, [r7, #20]
   return(result);
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1e5      	bne.n	8002aae <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ae2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ae8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d106      	bne.n	8002afe <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002af0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002af2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002af4:	4619      	mov	r1, r3
 8002af6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002af8:	f7ff ff66 	bl	80029c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002afc:	e002      	b.n	8002b04 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8002afe:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002b00:	f7fd fd08 	bl	8000514 <HAL_UART_RxCpltCallback>
}
 8002b04:	bf00      	nop
 8002b06:	3770      	adds	r7, #112	@ 0x70
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b18:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d108      	bne.n	8002b3a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002b2c:	085b      	lsrs	r3, r3, #1
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	4619      	mov	r1, r3
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f7ff ff48 	bl	80029c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002b38:	e002      	b.n	8002b40 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f7ff ff30 	bl	80029a0 <HAL_UART_RxHalfCpltCallback>
}
 8002b40:	bf00      	nop
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b58:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b64:	2b80      	cmp	r3, #128	@ 0x80
 8002b66:	bf0c      	ite	eq
 8002b68:	2301      	moveq	r3, #1
 8002b6a:	2300      	movne	r3, #0
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b21      	cmp	r3, #33	@ 0x21
 8002b7a:	d108      	bne.n	8002b8e <UART_DMAError+0x46>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d005      	beq.n	8002b8e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	2200      	movs	r2, #0
 8002b86:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8002b88:	68b8      	ldr	r0, [r7, #8]
 8002b8a:	f000 f927 	bl	8002ddc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b98:	2b40      	cmp	r3, #64	@ 0x40
 8002b9a:	bf0c      	ite	eq
 8002b9c:	2301      	moveq	r3, #1
 8002b9e:	2300      	movne	r3, #0
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	2b22      	cmp	r3, #34	@ 0x22
 8002bae:	d108      	bne.n	8002bc2 <UART_DMAError+0x7a>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d005      	beq.n	8002bc2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8002bbc:	68b8      	ldr	r0, [r7, #8]
 8002bbe:	f000 f935 	bl	8002e2c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bc6:	f043 0210 	orr.w	r2, r3, #16
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002bce:	68b8      	ldr	r0, [r7, #8]
 8002bd0:	f7ff fef0 	bl	80029b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002bd4:	bf00      	nop
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	603b      	str	r3, [r7, #0]
 8002be8:	4613      	mov	r3, r2
 8002bea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bec:	e03b      	b.n	8002c66 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bee:	6a3b      	ldr	r3, [r7, #32]
 8002bf0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002bf4:	d037      	beq.n	8002c66 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bf6:	f7fd ffc9 	bl	8000b8c <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	6a3a      	ldr	r2, [r7, #32]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d302      	bcc.n	8002c0c <UART_WaitOnFlagUntilTimeout+0x30>
 8002c06:	6a3b      	ldr	r3, [r7, #32]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d101      	bne.n	8002c10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e03a      	b.n	8002c86 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	f003 0304 	and.w	r3, r3, #4
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d023      	beq.n	8002c66 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	2b80      	cmp	r3, #128	@ 0x80
 8002c22:	d020      	beq.n	8002c66 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2b40      	cmp	r3, #64	@ 0x40
 8002c28:	d01d      	beq.n	8002c66 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0308 	and.w	r3, r3, #8
 8002c34:	2b08      	cmp	r3, #8
 8002c36:	d116      	bne.n	8002c66 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002c38:	2300      	movs	r3, #0
 8002c3a:	617b      	str	r3, [r7, #20]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	617b      	str	r3, [r7, #20]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f000 f8ec 	bl	8002e2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2208      	movs	r2, #8
 8002c58:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e00f      	b.n	8002c86 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	68ba      	ldr	r2, [r7, #8]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	bf0c      	ite	eq
 8002c76:	2301      	moveq	r3, #1
 8002c78:	2300      	movne	r3, #0
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	79fb      	ldrb	r3, [r7, #7]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d0b4      	beq.n	8002bee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3718      	adds	r7, #24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
	...

08002c90 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b098      	sub	sp, #96	@ 0x60
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002c9e:	68ba      	ldr	r2, [r7, #8]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	88fa      	ldrh	r2, [r7, #6]
 8002ca8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2222      	movs	r2, #34	@ 0x22
 8002cb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cbc:	4a44      	ldr	r2, [pc, #272]	@ (8002dd0 <UART_Start_Receive_DMA+0x140>)
 8002cbe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cc4:	4a43      	ldr	r2, [pc, #268]	@ (8002dd4 <UART_Start_Receive_DMA+0x144>)
 8002cc6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ccc:	4a42      	ldr	r2, [pc, #264]	@ (8002dd8 <UART_Start_Receive_DMA+0x148>)
 8002cce:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002cd8:	f107 0308 	add.w	r3, r7, #8
 8002cdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	3304      	adds	r3, #4
 8002ce8:	4619      	mov	r1, r3
 8002cea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	88fb      	ldrh	r3, [r7, #6]
 8002cf0:	f7fe f918 	bl	8000f24 <HAL_DMA_Start_IT>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d008      	beq.n	8002d0c <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2210      	movs	r2, #16
 8002cfe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2220      	movs	r2, #32
 8002d04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e05d      	b.n	8002dc8 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	613b      	str	r3, [r7, #16]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	613b      	str	r3, [r7, #16]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	613b      	str	r3, [r7, #16]
 8002d20:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d019      	beq.n	8002d5e <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	330c      	adds	r3, #12
 8002d30:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d34:	e853 3f00 	ldrex	r3, [r3]
 8002d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002d3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d40:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	330c      	adds	r3, #12
 8002d48:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d4a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002d4c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d4e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002d50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d52:	e841 2300 	strex	r3, r2, [r1]
 8002d56:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8002d58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1e5      	bne.n	8002d2a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	3314      	adds	r3, #20
 8002d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d68:	e853 3f00 	ldrex	r3, [r3]
 8002d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d70:	f043 0301 	orr.w	r3, r3, #1
 8002d74:	657b      	str	r3, [r7, #84]	@ 0x54
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	3314      	adds	r3, #20
 8002d7c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002d7e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002d80:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d82:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002d84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002d86:	e841 2300 	strex	r3, r2, [r1]
 8002d8a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1e5      	bne.n	8002d5e <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	3314      	adds	r3, #20
 8002d98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	e853 3f00 	ldrex	r3, [r3]
 8002da0:	617b      	str	r3, [r7, #20]
   return(result);
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002da8:	653b      	str	r3, [r7, #80]	@ 0x50
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	3314      	adds	r3, #20
 8002db0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002db2:	627a      	str	r2, [r7, #36]	@ 0x24
 8002db4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db6:	6a39      	ldr	r1, [r7, #32]
 8002db8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dba:	e841 2300 	strex	r3, r2, [r1]
 8002dbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1e5      	bne.n	8002d92 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3760      	adds	r7, #96	@ 0x60
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	080029e1 	.word	0x080029e1
 8002dd4:	08002b0d 	.word	0x08002b0d
 8002dd8:	08002b49 	.word	0x08002b49

08002ddc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b089      	sub	sp, #36	@ 0x24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	330c      	adds	r3, #12
 8002dea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	e853 3f00 	ldrex	r3, [r3]
 8002df2:	60bb      	str	r3, [r7, #8]
   return(result);
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002dfa:	61fb      	str	r3, [r7, #28]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	330c      	adds	r3, #12
 8002e02:	69fa      	ldr	r2, [r7, #28]
 8002e04:	61ba      	str	r2, [r7, #24]
 8002e06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e08:	6979      	ldr	r1, [r7, #20]
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	e841 2300 	strex	r3, r2, [r1]
 8002e10:	613b      	str	r3, [r7, #16]
   return(result);
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1e5      	bne.n	8002de4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8002e20:	bf00      	nop
 8002e22:	3724      	adds	r7, #36	@ 0x24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b095      	sub	sp, #84	@ 0x54
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	330c      	adds	r3, #12
 8002e3a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e3e:	e853 3f00 	ldrex	r3, [r3]
 8002e42:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e46:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	330c      	adds	r3, #12
 8002e52:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e54:	643a      	str	r2, [r7, #64]	@ 0x40
 8002e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e58:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002e5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002e5c:	e841 2300 	strex	r3, r2, [r1]
 8002e60:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1e5      	bne.n	8002e34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	3314      	adds	r3, #20
 8002e6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e70:	6a3b      	ldr	r3, [r7, #32]
 8002e72:	e853 3f00 	ldrex	r3, [r3]
 8002e76:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	f023 0301 	bic.w	r3, r3, #1
 8002e7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	3314      	adds	r3, #20
 8002e86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e88:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e90:	e841 2300 	strex	r3, r2, [r1]
 8002e94:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1e5      	bne.n	8002e68 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d119      	bne.n	8002ed8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	330c      	adds	r3, #12
 8002eaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	e853 3f00 	ldrex	r3, [r3]
 8002eb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	f023 0310 	bic.w	r3, r3, #16
 8002eba:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	330c      	adds	r3, #12
 8002ec2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ec4:	61ba      	str	r2, [r7, #24]
 8002ec6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec8:	6979      	ldr	r1, [r7, #20]
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	e841 2300 	strex	r3, r2, [r1]
 8002ed0:	613b      	str	r3, [r7, #16]
   return(result);
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1e5      	bne.n	8002ea4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2220      	movs	r2, #32
 8002edc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002ee6:	bf00      	nop
 8002ee8:	3754      	adds	r7, #84	@ 0x54
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b084      	sub	sp, #16
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002efe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f7ff fd54 	bl	80029b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f0c:	bf00      	nop
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b21      	cmp	r3, #33	@ 0x21
 8002f26:	d13e      	bne.n	8002fa6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f30:	d114      	bne.n	8002f5c <UART_Transmit_IT+0x48>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d110      	bne.n	8002f5c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	881b      	ldrh	r3, [r3, #0]
 8002f44:	461a      	mov	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f4e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	1c9a      	adds	r2, r3, #2
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	621a      	str	r2, [r3, #32]
 8002f5a:	e008      	b.n	8002f6e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	1c59      	adds	r1, r3, #1
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6211      	str	r1, [r2, #32]
 8002f66:	781a      	ldrb	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	3b01      	subs	r3, #1
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d10f      	bne.n	8002fa2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68da      	ldr	r2, [r3, #12]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f90:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68da      	ldr	r2, [r3, #12]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fa0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	e000      	b.n	8002fa8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002fa6:	2302      	movs	r3, #2
  }
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3714      	adds	r7, #20
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68da      	ldr	r2, [r3, #12]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f7ff fcd9 	bl	800298c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3708      	adds	r7, #8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b08c      	sub	sp, #48	@ 0x30
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8002fec:	2300      	movs	r3, #0
 8002fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b22      	cmp	r3, #34	@ 0x22
 8002ffe:	f040 80aa 	bne.w	8003156 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800300a:	d115      	bne.n	8003038 <UART_Receive_IT+0x54>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d111      	bne.n	8003038 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003018:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	b29b      	uxth	r3, r3
 8003022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003026:	b29a      	uxth	r2, r3
 8003028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800302a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003030:	1c9a      	adds	r2, r3, #2
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	629a      	str	r2, [r3, #40]	@ 0x28
 8003036:	e024      	b.n	8003082 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800303c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003046:	d007      	beq.n	8003058 <UART_Receive_IT+0x74>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10a      	bne.n	8003066 <UART_Receive_IT+0x82>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d106      	bne.n	8003066 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	b2da      	uxtb	r2, r3
 8003060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003062:	701a      	strb	r2, [r3, #0]
 8003064:	e008      	b.n	8003078 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	b2db      	uxtb	r3, r3
 800306e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003072:	b2da      	uxtb	r2, r3
 8003074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003076:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800307c:	1c5a      	adds	r2, r3, #1
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003086:	b29b      	uxth	r3, r3
 8003088:	3b01      	subs	r3, #1
 800308a:	b29b      	uxth	r3, r3
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	4619      	mov	r1, r3
 8003090:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003092:	2b00      	cmp	r3, #0
 8003094:	d15d      	bne.n	8003152 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68da      	ldr	r2, [r3, #12]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 0220 	bic.w	r2, r2, #32
 80030a4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68da      	ldr	r2, [r3, #12]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80030b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	695a      	ldr	r2, [r3, #20]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 0201 	bic.w	r2, r2, #1
 80030c4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2220      	movs	r2, #32
 80030ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d135      	bne.n	8003148 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	330c      	adds	r3, #12
 80030e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	e853 3f00 	ldrex	r3, [r3]
 80030f0:	613b      	str	r3, [r7, #16]
   return(result);
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	f023 0310 	bic.w	r3, r3, #16
 80030f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	330c      	adds	r3, #12
 8003100:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003102:	623a      	str	r2, [r7, #32]
 8003104:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003106:	69f9      	ldr	r1, [r7, #28]
 8003108:	6a3a      	ldr	r2, [r7, #32]
 800310a:	e841 2300 	strex	r3, r2, [r1]
 800310e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1e5      	bne.n	80030e2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0310 	and.w	r3, r3, #16
 8003120:	2b10      	cmp	r3, #16
 8003122:	d10a      	bne.n	800313a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003124:	2300      	movs	r3, #0
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	60fb      	str	r3, [r7, #12]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800313e:	4619      	mov	r1, r3
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f7ff fc41 	bl	80029c8 <HAL_UARTEx_RxEventCallback>
 8003146:	e002      	b.n	800314e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f7fd f9e3 	bl	8000514 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800314e:	2300      	movs	r3, #0
 8003150:	e002      	b.n	8003158 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003152:	2300      	movs	r3, #0
 8003154:	e000      	b.n	8003158 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003156:	2302      	movs	r3, #2
  }
}
 8003158:	4618      	mov	r0, r3
 800315a:	3730      	adds	r7, #48	@ 0x30
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003164:	b0c0      	sub	sp, #256	@ 0x100
 8003166:	af00      	add	r7, sp, #0
 8003168:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800316c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800317c:	68d9      	ldr	r1, [r3, #12]
 800317e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	ea40 0301 	orr.w	r3, r0, r1
 8003188:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800318a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	431a      	orrs	r2, r3
 8003198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	431a      	orrs	r2, r3
 80031a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80031ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80031b8:	f021 010c 	bic.w	r1, r1, #12
 80031bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80031c6:	430b      	orrs	r3, r1
 80031c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80031d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031da:	6999      	ldr	r1, [r3, #24]
 80031dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	ea40 0301 	orr.w	r3, r0, r1
 80031e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	4b8f      	ldr	r3, [pc, #572]	@ (800342c <UART_SetConfig+0x2cc>)
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d005      	beq.n	8003200 <UART_SetConfig+0xa0>
 80031f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	4b8d      	ldr	r3, [pc, #564]	@ (8003430 <UART_SetConfig+0x2d0>)
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d104      	bne.n	800320a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003200:	f7ff f806 	bl	8002210 <HAL_RCC_GetPCLK2Freq>
 8003204:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003208:	e003      	b.n	8003212 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800320a:	f7fe ffed 	bl	80021e8 <HAL_RCC_GetPCLK1Freq>
 800320e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800321c:	f040 810c 	bne.w	8003438 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003220:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003224:	2200      	movs	r2, #0
 8003226:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800322a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800322e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003232:	4622      	mov	r2, r4
 8003234:	462b      	mov	r3, r5
 8003236:	1891      	adds	r1, r2, r2
 8003238:	65b9      	str	r1, [r7, #88]	@ 0x58
 800323a:	415b      	adcs	r3, r3
 800323c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800323e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003242:	4621      	mov	r1, r4
 8003244:	eb12 0801 	adds.w	r8, r2, r1
 8003248:	4629      	mov	r1, r5
 800324a:	eb43 0901 	adc.w	r9, r3, r1
 800324e:	f04f 0200 	mov.w	r2, #0
 8003252:	f04f 0300 	mov.w	r3, #0
 8003256:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800325a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800325e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003262:	4690      	mov	r8, r2
 8003264:	4699      	mov	r9, r3
 8003266:	4623      	mov	r3, r4
 8003268:	eb18 0303 	adds.w	r3, r8, r3
 800326c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003270:	462b      	mov	r3, r5
 8003272:	eb49 0303 	adc.w	r3, r9, r3
 8003276:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800327a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003286:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800328a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800328e:	460b      	mov	r3, r1
 8003290:	18db      	adds	r3, r3, r3
 8003292:	653b      	str	r3, [r7, #80]	@ 0x50
 8003294:	4613      	mov	r3, r2
 8003296:	eb42 0303 	adc.w	r3, r2, r3
 800329a:	657b      	str	r3, [r7, #84]	@ 0x54
 800329c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80032a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80032a4:	f7fc ffa0 	bl	80001e8 <__aeabi_uldivmod>
 80032a8:	4602      	mov	r2, r0
 80032aa:	460b      	mov	r3, r1
 80032ac:	4b61      	ldr	r3, [pc, #388]	@ (8003434 <UART_SetConfig+0x2d4>)
 80032ae:	fba3 2302 	umull	r2, r3, r3, r2
 80032b2:	095b      	lsrs	r3, r3, #5
 80032b4:	011c      	lsls	r4, r3, #4
 80032b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032ba:	2200      	movs	r2, #0
 80032bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80032c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80032c8:	4642      	mov	r2, r8
 80032ca:	464b      	mov	r3, r9
 80032cc:	1891      	adds	r1, r2, r2
 80032ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 80032d0:	415b      	adcs	r3, r3
 80032d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80032d8:	4641      	mov	r1, r8
 80032da:	eb12 0a01 	adds.w	sl, r2, r1
 80032de:	4649      	mov	r1, r9
 80032e0:	eb43 0b01 	adc.w	fp, r3, r1
 80032e4:	f04f 0200 	mov.w	r2, #0
 80032e8:	f04f 0300 	mov.w	r3, #0
 80032ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032f8:	4692      	mov	sl, r2
 80032fa:	469b      	mov	fp, r3
 80032fc:	4643      	mov	r3, r8
 80032fe:	eb1a 0303 	adds.w	r3, sl, r3
 8003302:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003306:	464b      	mov	r3, r9
 8003308:	eb4b 0303 	adc.w	r3, fp, r3
 800330c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800331c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003320:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003324:	460b      	mov	r3, r1
 8003326:	18db      	adds	r3, r3, r3
 8003328:	643b      	str	r3, [r7, #64]	@ 0x40
 800332a:	4613      	mov	r3, r2
 800332c:	eb42 0303 	adc.w	r3, r2, r3
 8003330:	647b      	str	r3, [r7, #68]	@ 0x44
 8003332:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003336:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800333a:	f7fc ff55 	bl	80001e8 <__aeabi_uldivmod>
 800333e:	4602      	mov	r2, r0
 8003340:	460b      	mov	r3, r1
 8003342:	4611      	mov	r1, r2
 8003344:	4b3b      	ldr	r3, [pc, #236]	@ (8003434 <UART_SetConfig+0x2d4>)
 8003346:	fba3 2301 	umull	r2, r3, r3, r1
 800334a:	095b      	lsrs	r3, r3, #5
 800334c:	2264      	movs	r2, #100	@ 0x64
 800334e:	fb02 f303 	mul.w	r3, r2, r3
 8003352:	1acb      	subs	r3, r1, r3
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800335a:	4b36      	ldr	r3, [pc, #216]	@ (8003434 <UART_SetConfig+0x2d4>)
 800335c:	fba3 2302 	umull	r2, r3, r3, r2
 8003360:	095b      	lsrs	r3, r3, #5
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003368:	441c      	add	r4, r3
 800336a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800336e:	2200      	movs	r2, #0
 8003370:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003374:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003378:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800337c:	4642      	mov	r2, r8
 800337e:	464b      	mov	r3, r9
 8003380:	1891      	adds	r1, r2, r2
 8003382:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003384:	415b      	adcs	r3, r3
 8003386:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003388:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800338c:	4641      	mov	r1, r8
 800338e:	1851      	adds	r1, r2, r1
 8003390:	6339      	str	r1, [r7, #48]	@ 0x30
 8003392:	4649      	mov	r1, r9
 8003394:	414b      	adcs	r3, r1
 8003396:	637b      	str	r3, [r7, #52]	@ 0x34
 8003398:	f04f 0200 	mov.w	r2, #0
 800339c:	f04f 0300 	mov.w	r3, #0
 80033a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80033a4:	4659      	mov	r1, fp
 80033a6:	00cb      	lsls	r3, r1, #3
 80033a8:	4651      	mov	r1, sl
 80033aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033ae:	4651      	mov	r1, sl
 80033b0:	00ca      	lsls	r2, r1, #3
 80033b2:	4610      	mov	r0, r2
 80033b4:	4619      	mov	r1, r3
 80033b6:	4603      	mov	r3, r0
 80033b8:	4642      	mov	r2, r8
 80033ba:	189b      	adds	r3, r3, r2
 80033bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80033c0:	464b      	mov	r3, r9
 80033c2:	460a      	mov	r2, r1
 80033c4:	eb42 0303 	adc.w	r3, r2, r3
 80033c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80033d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80033dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80033e0:	460b      	mov	r3, r1
 80033e2:	18db      	adds	r3, r3, r3
 80033e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033e6:	4613      	mov	r3, r2
 80033e8:	eb42 0303 	adc.w	r3, r2, r3
 80033ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80033f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80033f6:	f7fc fef7 	bl	80001e8 <__aeabi_uldivmod>
 80033fa:	4602      	mov	r2, r0
 80033fc:	460b      	mov	r3, r1
 80033fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003434 <UART_SetConfig+0x2d4>)
 8003400:	fba3 1302 	umull	r1, r3, r3, r2
 8003404:	095b      	lsrs	r3, r3, #5
 8003406:	2164      	movs	r1, #100	@ 0x64
 8003408:	fb01 f303 	mul.w	r3, r1, r3
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	3332      	adds	r3, #50	@ 0x32
 8003412:	4a08      	ldr	r2, [pc, #32]	@ (8003434 <UART_SetConfig+0x2d4>)
 8003414:	fba2 2303 	umull	r2, r3, r2, r3
 8003418:	095b      	lsrs	r3, r3, #5
 800341a:	f003 0207 	and.w	r2, r3, #7
 800341e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4422      	add	r2, r4
 8003426:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003428:	e106      	b.n	8003638 <UART_SetConfig+0x4d8>
 800342a:	bf00      	nop
 800342c:	40011000 	.word	0x40011000
 8003430:	40011400 	.word	0x40011400
 8003434:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003438:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800343c:	2200      	movs	r2, #0
 800343e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003442:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003446:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800344a:	4642      	mov	r2, r8
 800344c:	464b      	mov	r3, r9
 800344e:	1891      	adds	r1, r2, r2
 8003450:	6239      	str	r1, [r7, #32]
 8003452:	415b      	adcs	r3, r3
 8003454:	627b      	str	r3, [r7, #36]	@ 0x24
 8003456:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800345a:	4641      	mov	r1, r8
 800345c:	1854      	adds	r4, r2, r1
 800345e:	4649      	mov	r1, r9
 8003460:	eb43 0501 	adc.w	r5, r3, r1
 8003464:	f04f 0200 	mov.w	r2, #0
 8003468:	f04f 0300 	mov.w	r3, #0
 800346c:	00eb      	lsls	r3, r5, #3
 800346e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003472:	00e2      	lsls	r2, r4, #3
 8003474:	4614      	mov	r4, r2
 8003476:	461d      	mov	r5, r3
 8003478:	4643      	mov	r3, r8
 800347a:	18e3      	adds	r3, r4, r3
 800347c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003480:	464b      	mov	r3, r9
 8003482:	eb45 0303 	adc.w	r3, r5, r3
 8003486:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800348a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003496:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800349a:	f04f 0200 	mov.w	r2, #0
 800349e:	f04f 0300 	mov.w	r3, #0
 80034a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80034a6:	4629      	mov	r1, r5
 80034a8:	008b      	lsls	r3, r1, #2
 80034aa:	4621      	mov	r1, r4
 80034ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034b0:	4621      	mov	r1, r4
 80034b2:	008a      	lsls	r2, r1, #2
 80034b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80034b8:	f7fc fe96 	bl	80001e8 <__aeabi_uldivmod>
 80034bc:	4602      	mov	r2, r0
 80034be:	460b      	mov	r3, r1
 80034c0:	4b60      	ldr	r3, [pc, #384]	@ (8003644 <UART_SetConfig+0x4e4>)
 80034c2:	fba3 2302 	umull	r2, r3, r3, r2
 80034c6:	095b      	lsrs	r3, r3, #5
 80034c8:	011c      	lsls	r4, r3, #4
 80034ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034ce:	2200      	movs	r2, #0
 80034d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80034d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80034d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80034dc:	4642      	mov	r2, r8
 80034de:	464b      	mov	r3, r9
 80034e0:	1891      	adds	r1, r2, r2
 80034e2:	61b9      	str	r1, [r7, #24]
 80034e4:	415b      	adcs	r3, r3
 80034e6:	61fb      	str	r3, [r7, #28]
 80034e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034ec:	4641      	mov	r1, r8
 80034ee:	1851      	adds	r1, r2, r1
 80034f0:	6139      	str	r1, [r7, #16]
 80034f2:	4649      	mov	r1, r9
 80034f4:	414b      	adcs	r3, r1
 80034f6:	617b      	str	r3, [r7, #20]
 80034f8:	f04f 0200 	mov.w	r2, #0
 80034fc:	f04f 0300 	mov.w	r3, #0
 8003500:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003504:	4659      	mov	r1, fp
 8003506:	00cb      	lsls	r3, r1, #3
 8003508:	4651      	mov	r1, sl
 800350a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800350e:	4651      	mov	r1, sl
 8003510:	00ca      	lsls	r2, r1, #3
 8003512:	4610      	mov	r0, r2
 8003514:	4619      	mov	r1, r3
 8003516:	4603      	mov	r3, r0
 8003518:	4642      	mov	r2, r8
 800351a:	189b      	adds	r3, r3, r2
 800351c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003520:	464b      	mov	r3, r9
 8003522:	460a      	mov	r2, r1
 8003524:	eb42 0303 	adc.w	r3, r2, r3
 8003528:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800352c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003536:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003538:	f04f 0200 	mov.w	r2, #0
 800353c:	f04f 0300 	mov.w	r3, #0
 8003540:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003544:	4649      	mov	r1, r9
 8003546:	008b      	lsls	r3, r1, #2
 8003548:	4641      	mov	r1, r8
 800354a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800354e:	4641      	mov	r1, r8
 8003550:	008a      	lsls	r2, r1, #2
 8003552:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003556:	f7fc fe47 	bl	80001e8 <__aeabi_uldivmod>
 800355a:	4602      	mov	r2, r0
 800355c:	460b      	mov	r3, r1
 800355e:	4611      	mov	r1, r2
 8003560:	4b38      	ldr	r3, [pc, #224]	@ (8003644 <UART_SetConfig+0x4e4>)
 8003562:	fba3 2301 	umull	r2, r3, r3, r1
 8003566:	095b      	lsrs	r3, r3, #5
 8003568:	2264      	movs	r2, #100	@ 0x64
 800356a:	fb02 f303 	mul.w	r3, r2, r3
 800356e:	1acb      	subs	r3, r1, r3
 8003570:	011b      	lsls	r3, r3, #4
 8003572:	3332      	adds	r3, #50	@ 0x32
 8003574:	4a33      	ldr	r2, [pc, #204]	@ (8003644 <UART_SetConfig+0x4e4>)
 8003576:	fba2 2303 	umull	r2, r3, r2, r3
 800357a:	095b      	lsrs	r3, r3, #5
 800357c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003580:	441c      	add	r4, r3
 8003582:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003586:	2200      	movs	r2, #0
 8003588:	673b      	str	r3, [r7, #112]	@ 0x70
 800358a:	677a      	str	r2, [r7, #116]	@ 0x74
 800358c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003590:	4642      	mov	r2, r8
 8003592:	464b      	mov	r3, r9
 8003594:	1891      	adds	r1, r2, r2
 8003596:	60b9      	str	r1, [r7, #8]
 8003598:	415b      	adcs	r3, r3
 800359a:	60fb      	str	r3, [r7, #12]
 800359c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035a0:	4641      	mov	r1, r8
 80035a2:	1851      	adds	r1, r2, r1
 80035a4:	6039      	str	r1, [r7, #0]
 80035a6:	4649      	mov	r1, r9
 80035a8:	414b      	adcs	r3, r1
 80035aa:	607b      	str	r3, [r7, #4]
 80035ac:	f04f 0200 	mov.w	r2, #0
 80035b0:	f04f 0300 	mov.w	r3, #0
 80035b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80035b8:	4659      	mov	r1, fp
 80035ba:	00cb      	lsls	r3, r1, #3
 80035bc:	4651      	mov	r1, sl
 80035be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035c2:	4651      	mov	r1, sl
 80035c4:	00ca      	lsls	r2, r1, #3
 80035c6:	4610      	mov	r0, r2
 80035c8:	4619      	mov	r1, r3
 80035ca:	4603      	mov	r3, r0
 80035cc:	4642      	mov	r2, r8
 80035ce:	189b      	adds	r3, r3, r2
 80035d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035d2:	464b      	mov	r3, r9
 80035d4:	460a      	mov	r2, r1
 80035d6:	eb42 0303 	adc.w	r3, r2, r3
 80035da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80035dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80035e6:	667a      	str	r2, [r7, #100]	@ 0x64
 80035e8:	f04f 0200 	mov.w	r2, #0
 80035ec:	f04f 0300 	mov.w	r3, #0
 80035f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80035f4:	4649      	mov	r1, r9
 80035f6:	008b      	lsls	r3, r1, #2
 80035f8:	4641      	mov	r1, r8
 80035fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035fe:	4641      	mov	r1, r8
 8003600:	008a      	lsls	r2, r1, #2
 8003602:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003606:	f7fc fdef 	bl	80001e8 <__aeabi_uldivmod>
 800360a:	4602      	mov	r2, r0
 800360c:	460b      	mov	r3, r1
 800360e:	4b0d      	ldr	r3, [pc, #52]	@ (8003644 <UART_SetConfig+0x4e4>)
 8003610:	fba3 1302 	umull	r1, r3, r3, r2
 8003614:	095b      	lsrs	r3, r3, #5
 8003616:	2164      	movs	r1, #100	@ 0x64
 8003618:	fb01 f303 	mul.w	r3, r1, r3
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	3332      	adds	r3, #50	@ 0x32
 8003622:	4a08      	ldr	r2, [pc, #32]	@ (8003644 <UART_SetConfig+0x4e4>)
 8003624:	fba2 2303 	umull	r2, r3, r2, r3
 8003628:	095b      	lsrs	r3, r3, #5
 800362a:	f003 020f 	and.w	r2, r3, #15
 800362e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4422      	add	r2, r4
 8003636:	609a      	str	r2, [r3, #8]
}
 8003638:	bf00      	nop
 800363a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800363e:	46bd      	mov	sp, r7
 8003640:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003644:	51eb851f 	.word	0x51eb851f

08003648 <memset>:
 8003648:	4402      	add	r2, r0
 800364a:	4603      	mov	r3, r0
 800364c:	4293      	cmp	r3, r2
 800364e:	d100      	bne.n	8003652 <memset+0xa>
 8003650:	4770      	bx	lr
 8003652:	f803 1b01 	strb.w	r1, [r3], #1
 8003656:	e7f9      	b.n	800364c <memset+0x4>

08003658 <__libc_init_array>:
 8003658:	b570      	push	{r4, r5, r6, lr}
 800365a:	4d0d      	ldr	r5, [pc, #52]	@ (8003690 <__libc_init_array+0x38>)
 800365c:	4c0d      	ldr	r4, [pc, #52]	@ (8003694 <__libc_init_array+0x3c>)
 800365e:	1b64      	subs	r4, r4, r5
 8003660:	10a4      	asrs	r4, r4, #2
 8003662:	2600      	movs	r6, #0
 8003664:	42a6      	cmp	r6, r4
 8003666:	d109      	bne.n	800367c <__libc_init_array+0x24>
 8003668:	4d0b      	ldr	r5, [pc, #44]	@ (8003698 <__libc_init_array+0x40>)
 800366a:	4c0c      	ldr	r4, [pc, #48]	@ (800369c <__libc_init_array+0x44>)
 800366c:	f000 f818 	bl	80036a0 <_init>
 8003670:	1b64      	subs	r4, r4, r5
 8003672:	10a4      	asrs	r4, r4, #2
 8003674:	2600      	movs	r6, #0
 8003676:	42a6      	cmp	r6, r4
 8003678:	d105      	bne.n	8003686 <__libc_init_array+0x2e>
 800367a:	bd70      	pop	{r4, r5, r6, pc}
 800367c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003680:	4798      	blx	r3
 8003682:	3601      	adds	r6, #1
 8003684:	e7ee      	b.n	8003664 <__libc_init_array+0xc>
 8003686:	f855 3b04 	ldr.w	r3, [r5], #4
 800368a:	4798      	blx	r3
 800368c:	3601      	adds	r6, #1
 800368e:	e7f2      	b.n	8003676 <__libc_init_array+0x1e>
 8003690:	080036f0 	.word	0x080036f0
 8003694:	080036f0 	.word	0x080036f0
 8003698:	080036f0 	.word	0x080036f0
 800369c:	080036f4 	.word	0x080036f4

080036a0 <_init>:
 80036a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036a2:	bf00      	nop
 80036a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036a6:	bc08      	pop	{r3}
 80036a8:	469e      	mov	lr, r3
 80036aa:	4770      	bx	lr

080036ac <_fini>:
 80036ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ae:	bf00      	nop
 80036b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036b2:	bc08      	pop	{r3}
 80036b4:	469e      	mov	lr, r3
 80036b6:	4770      	bx	lr
